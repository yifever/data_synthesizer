{
    "func_id": "business-1",
    "task": "schedule a meeting",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "schedule a meeting"
    },
    "snippet": "def schedule_meeting(\n    participant_emails: List[str],\n    meeting_date: str,\n    meeting_time: str,\n    meeting_subject: str,\n    meeting_body: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Schedules a meeting and returns the meeting details.\n    \n    Parameters:\n        participant_emails (List[str]): The emails of the participants to invite.\n        meeting_date (str): The date of the meeting in YYYY-MM-DD format.\n        meeting_time (str): The time of the meeting in HH:MM format.\n        meeting_subject (str): The subject of the meeting.\n        meeting_body (str): The body of the meeting invite.\n                                          \n    Returns:\n        Dict[str, str]: A dictionary with 'meeting_id', 'meeting_link' as keys and their respective details as values.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def schedule_meeting(\n    participant_emails: List[str],\n    meeting_date: str,\n    meeting_time: str,\n    meeting_subject: str,\n    meeting_body: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Schedules a meeting and returns the meeting details.\n    \n    Parameters:\n        participant_emails (List[str]): The emails of the participants to invite.\n        meeting_date (str): The date of the meeting in YYYY-MM-DD format.\n        meeting_time (str): The time of the meeting in HH:MM format.\n        meeting_subject (str): The subject of the meeting.\n        meeting_body (str): The body of the meeting invite.\n                                          \n    Returns:\n        Dict[str, str]: A dictionary with 'meeting_id', 'meeting_link' as keys and their respective details as values.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "schedule_meeting",
            "description": "Schedules a meeting and returns the meeting details.",
            "parameters": {
                "type": "object",
                "properties": {
                    "participant_emails": {
                        "type": "array",
                        "description": "The emails of the participants to invite.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "meeting_date": {
                        "type": "string",
                        "description": "The date of the meeting in YYYY-MM-DD format."
                    },
                    "meeting_time": {
                        "type": "string",
                        "description": "The time of the meeting in HH:MM format."
                    },
                    "meeting_subject": {
                        "type": "string",
                        "description": "The subject of the meeting."
                    },
                    "meeting_body": {
                        "type": "string",
                        "description": "The body of the meeting invite."
                    }
                },
                "required": [
                    "participant_emails",
                    "meeting_date",
                    "meeting_time",
                    "meeting_subject",
                    "meeting_body"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "meeting_id": {
                        "type": "string",
                        "description": "The id of the scheduled meeting."
                    },
                    "meeting_link": {
                        "type": "string",
                        "description": "The link to join the scheduled meeting."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'schedule_meeting', 'description': 'Schedules a meeting and returns the meeting details.', 'parameters': {'type': 'object', 'properties': {'participant_emails': {'type': 'array', 'description': 'The emails of the participants to invite.', 'items': {'type': 'string'}}, 'meeting_date': {'type': 'string', 'description': 'The date of the meeting in YYYY-MM-DD format.'}, 'meeting_time': {'type': 'string', 'description': 'The time of the meeting in HH:MM format.'}, 'meeting_subject': {'type': 'string', 'description': 'The subject of the meeting.'}, 'meeting_body': {'type': 'string', 'description': 'The body of the meeting invite.'}}, 'required': ['participant_emails', 'meeting_date', 'meeting_time', 'meeting_subject', 'meeting_body']}, 'returns': {'type': 'object', 'properties': {'meeting_id': {'type': 'string', 'description': 'The id of the scheduled meeting.'}, 'meeting_link': {'type': 'string', 'description': 'The link to join the scheduled meeting.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": "Here is your requested conversation which calls the \"schedule_meeting\" function:\n\n    {\n        \"conversation\": \n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you schedule a meeting for me?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know the emails of the participants, the date and time of the meeting in YYYY-MM-DD and HH:MM format respectively, the subject, and the body of the meeting please?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, the participants emails are 'abc@example.com' and 'xyz@example.com', date of the meeting is '2022-04-30', time is '16:00', subject of the meeting is 'Project Discussion', and body of the meeting is 'To discuss about the project progress'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm scheduling your meeting now.\"\n    }\n]\n,\n        \"function_call\": \n{\n    \"function_name\": \"schedule_meeting\",\n    \"parameters\": {\n        \"participant_emails\": [\"abc@example.com\", \"xyz@example.com\"],\n        \"meeting_date\": \"2022-04-30\",\n        \"meeting_time\": \"16:00\",\n        \"meeting_subject\": \"Project Discussion\",\n        \"meeting_body\": \"To discuss about the project progress\"\n    }\n}\n\n    }"
}
{
    "func_id": "business-4",
    "task": "create an account for a new customer",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "create an account for a new customer"
    },
    "snippet": "def create_account(\n    customer_name: str,\n    email: str,\n    password: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Creates an account for a new customer and returns the account details.\n    \n    Parameters:\n        customer_name (str): The customer's name.\n        email (str): The customer's email.\n        password (str): The customer's password.\n                                          \n    Returns:\n        Dict[str, str]: A dictionary containing the account details. \n                        It should have 'customer_name', 'email', and 'account_id' as keys.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def create_account(\n    customer_name: str,\n    email: str,\n    password: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Creates an account for a new customer and returns the account details.\n    \n    Parameters:\n        customer_name (str): The customer's name.\n        email (str): The customer's email.\n        password (str): The customer's password.\n                                          \n    Returns:\n        Dict[str, str]: A dictionary containing the account details. \n                        It should have 'customer_name', 'email', and 'account_id' as keys.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "create_account",
            "description": "Creates an account for a new customer and returns the account details.",
            "parameters": {
                "type": "object",
                "properties": {
                    "customer_name": {
                        "type": "string",
                        "description": "The customer's name."
                    },
                    "email": {
                        "type": "string",
                        "description": "The customer's email."
                    },
                    "password": {
                        "type": "string",
                        "description": "The customer's password."
                    }
                },
                "required": [
                    "customer_name",
                    "email",
                    "password"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "customer_name": {
                        "type": "string",
                        "description": "The customer's name."
                    },
                    "email": {
                        "type": "string",
                        "description": "The customer's email."
                    },
                    "account_id": {
                        "type": "string",
                        "description": "The unique identifier of the customer's account."
                    }
                },
                "required": [
                    "customer_name",
                    "email",
                    "account_id"
                ]
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'create_account', 'description': 'Creates an account for a new customer and returns the account details.', 'parameters': {'type': 'object', 'properties': {'customer_name': {'type': 'string', 'description': \"The customer's name.\"}, 'email': {'type': 'string', 'description': \"The customer's email.\"}, 'password': {'type': 'string', 'description': \"The customer's password.\"}}, 'required': ['customer_name', 'email', 'password']}, 'returns': {'type': 'object', 'properties': {'customer_name': {'type': 'string', 'description': \"The customer's name.\"}, 'email': {'type': 'string', 'description': \"The customer's email.\"}, 'account_id': {'type': 'string', 'description': \"The unique identifier of the customer's account.\"}}, 'required': ['customer_name', 'email', 'account_id']}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you create an account for me?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. May I know your name, email, and password?"
            },
            {
                "role": "user",
                "text": "Yes, my name is 'John Doe', email is 'johndoe@example.com' and password is 'secret123'."
            },
            {
                "role": "assistant",
                "text": "Great, I'm creating your account now."
            }
        ],
        "function_call": {
            "function_name": "create_account",
            "parameters": {
                "customer_name": "John Doe",
                "email": "johndoe@example.com",
                "password": "secret123"
            }
        }
    }
}
{
    "func_id": "business-6",
    "task": "calculate payroll for a team",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "calculate payroll for a team"
    },
    "snippet": "def calculate_payroll(\n    team: List[Dict[str, Union[str, int, float]]]\n) -> Dict[str, float]:\n    \"\"\"\n    Calculate the payroll for the given team.\n    \n    Parameters:\n        team (List[Dict[str, Union[str, int, float]]]): A list of dictionaries where each dictionary represents\n                                                        a team member and has keys 'name', 'hours_worked', \n                                                        and 'hourly_rate'.\n\n    Returns:\n        Dict[str, float]: A dictionary where each key is a team member's name and each value is the payroll \n                          amount for that team member.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def calculate_payroll(\n    team: List[Dict[str, Union[str, int, float]]]\n) -> Dict[str, float]:\n    \"\"\"\n    Calculate the payroll for the given team.\n    \n    Parameters:\n        team (List[Dict[str, Union[str, int, float]]]): A list of dictionaries where each dictionary represents\n                                                        a team member and has keys 'name', 'hours_worked', \n                                                        and 'hourly_rate'.\n\n    Returns:\n        Dict[str, float]: A dictionary where each key is a team member's name and each value is the payroll \n                          amount for that team member.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "calculate_payroll",
            "description": "Calculate the payroll for the given team.",
            "parameters": {
                "type": "array",
                "description": "A list of dictionaries where each dictionary represents a team member and has keys 'name', 'hours_worked', and 'hourly_rate'.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "The name of the team member."
                        },
                        "hours_worked": {
                            "type": [
                                "integer",
                                "float"
                            ],
                            "description": "The number of hours the team member has worked."
                        },
                        "hourly_rate": {
                            "type": [
                                "integer",
                                "float"
                            ],
                            "description": "The hourly rate for the team member."
                        }
                    },
                    "required": [
                        "name",
                        "hours_worked",
                        "hourly_rate"
                    ]
                }
            },
            "returns": {
                "type": "object",
                "description": "A dictionary where each key is a team member's name and each value is the payroll amount for that team member.",
                "properties": {
                    "team_member_pay": {
                        "type": "float"
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'calculate_payroll', 'description': 'Calculate the payroll for the given team.', 'parameters': {'type': 'array', 'description': \"A list of dictionaries where each dictionary represents a team member and has keys 'name', 'hours_worked', and 'hourly_rate'.\", 'items': {'type': 'object', 'properties': {'name': {'type': 'string', 'description': 'The name of the team member.'}, 'hours_worked': {'type': ['integer', 'float'], 'description': 'The number of hours the team member has worked.'}, 'hourly_rate': {'type': ['integer', 'float'], 'description': 'The hourly rate for the team member.'}}, 'required': ['name', 'hours_worked', 'hourly_rate']}}, 'returns': {'type': 'object', 'description': \"A dictionary where each key is a team member's name and each value is the payroll amount for that team member.\", 'properties': {'team_member_pay': {'type': 'float'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you calculate the payroll for my team?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Could you please provide me with the details of each team member, including their name, hours worked, and hourly rate?"
            },
            {
                "role": "user",
                "text": "Sure, here they are: [{'name': 'Alice', 'hours_worked': 40, 'hourly_rate': 20}, {'name': 'Bob', 'hours_worked': 30, 'hourly_rate': 25}, {'name': 'Charlie', 'hours_worked': 35, 'hourly_rate': 30}]"
            },
            {
                "role": "assistant",
                "text": "Great, I am calculating the payroll for each team member now."
            }
        ],
        "function_call": {
            "function_name": "calculate_payroll",
            "parameters": {
                "team_info": [
                    {
                        "name": "Alice",
                        "hours_worked": 40,
                        "hourly_rate": 20
                    },
                    {
                        "name": "Bob",
                        "hours_worked": 30,
                        "hourly_rate": 25
                    },
                    {
                        "name": "Charlie",
                        "hours_worked": 35,
                        "hourly_rate": 30
                    }
                ]
            }
        }
    }
}
{
    "func_id": "business-7",
    "task": "update inventory stock data",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "update inventory stock data"
    },
    "snippet": "def update_inventory_stock(\n    inventory_id: str,\n    quantity: int,\n) -> Dict[str, bool]:\n    \"\"\"\n    Updates the inventory stock data and returns whether the operation was successful.\n    \n    Parameters:\n        inventory_id (str): The id of the inventory item to be updated.\n        quantity (int): The new quantity of the inventory item.\n                                          \n    Returns:\n        Dict[str, bool]: A dictionary with 'update_success' as a key and the operation status as a value.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def update_inventory_stock(\n    inventory_id: str,\n    quantity: int,\n) -> Dict[str, bool]:\n    \"\"\"\n    Updates the inventory stock data and returns whether the operation was successful.\n    \n    Parameters:\n        inventory_id (str): The id of the inventory item to be updated.\n        quantity (int): The new quantity of the inventory item.\n                                          \n    Returns:\n        Dict[str, bool]: A dictionary with 'update_success' as a key and the operation status as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "update_inventory_stock",
            "description": "Updates the inventory stock data and returns whether the operation was successful.",
            "parameters": {
                "type": "object",
                "properties": {
                    "inventory_id": {
                        "type": "string",
                        "description": "The id of the inventory item to be updated."
                    },
                    "quantity": {
                        "type": "integer",
                        "description": "The new quantity of the inventory item."
                    }
                },
                "required": [
                    "inventory_id",
                    "quantity"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "update_success": {
                        "type": "boolean",
                        "description": "A dictionary with 'update_success' as a key and the operation status as a value."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'update_inventory_stock', 'description': 'Updates the inventory stock data and returns whether the operation was successful.', 'parameters': {'type': 'object', 'properties': {'inventory_id': {'type': 'string', 'description': 'The id of the inventory item to be updated.'}, 'quantity': {'type': 'integer', 'description': 'The new quantity of the inventory item.'}}, 'required': ['inventory_id', 'quantity']}, 'returns': {'type': 'object', 'properties': {'update_success': {'type': 'boolean', 'description': \"A dictionary with 'update_success' as a key and the operation status as a value.\"}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you update the stock for one of my inventory items?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Could you please provide me with the id of the inventory item and the new quantity?"
            },
            {
                "role": "user",
                "text": "Yes, the inventory id is '5789' and the new quantity is '200'."
            },
            {
                "role": "assistant",
                "text": "Great, I'm updating the stock data for your inventory item now."
            }
        ],
        "function_call": {
            "function_name": "update_inventory_stock",
            "parameters": {
                "inventory_id": "5789",
                "quantity": 200
            }
        }
    }
}
{
    "func_id": "business-8",
    "task": "track the status of a shipment",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "track the status of a shipment"
    },
    "snippet": "def track_shipment_status(\n    tracking_number: str,\n    courier_service: str,\n) -> Dict[str, Union[str, datetime]]:\n    \"\"\"\n    Tracks a shipment by tracking number and courier service and returns the current status.\n    \n    Parameters:\n        tracking_number (str): The tracking number of the shipment.\n        courier_service (str): The courier service that is delivering the shipment.\n                              \n    Returns:\n        Dict[str, Union[str, datetime]]: A dictionary with 'status' as a key and the current status of the shipment,\n                                         and 'last_updated' as a key and the datetime when the status was last updated.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def track_shipment_status(\n    tracking_number: str,\n    courier_service: str,\n) -> Dict[str, Union[str, datetime]]:\n    \"\"\"\n    Tracks a shipment by tracking number and courier service and returns the current status.\n    \n    Parameters:\n        tracking_number (str): The tracking number of the shipment.\n        courier_service (str): The courier service that is delivering the shipment.\n                              \n    Returns:\n        Dict[str, Union[str, datetime]]: A dictionary with 'status' as a key and the current status of the shipment,\n                                         and 'last_updated' as a key and the datetime when the status was last updated.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "track_shipment_status",
            "description": "Tracks a shipment by tracking number and courier service and returns the current status.",
            "parameters": {
                "type": "object",
                "properties": {
                    "tracking_number": {
                        "type": "string",
                        "description": "The tracking number of the shipment."
                    },
                    "courier_service": {
                        "type": "string",
                        "description": "The courier service that is delivering the shipment."
                    }
                },
                "required": [
                    "tracking_number",
                    "courier_service"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "The current status of the shipment."
                    },
                    "last_updated": {
                        "type": "datetime",
                        "description": "The datetime when the status was last updated."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'track_shipment_status', 'description': 'Tracks a shipment by tracking number and courier service and returns the current status.', 'parameters': {'type': 'object', 'properties': {'tracking_number': {'type': 'string', 'description': 'The tracking number of the shipment.'}, 'courier_service': {'type': 'string', 'description': 'The courier service that is delivering the shipment.'}}, 'required': ['tracking_number', 'courier_service']}, 'returns': {'type': 'object', 'properties': {'status': {'type': 'string', 'description': 'The current status of the shipment.'}, 'last_updated': {'type': 'datetime', 'description': 'The datetime when the status was last updated.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you check the status of my shipment?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Could you please give me the tracking number and the courier service?"
            },
            {
                "role": "user",
                "text": "Yes, my tracking number is '12345ABC' and it's through FedEx."
            },
            {
                "role": "assistant",
                "text": "Great, I'm tracking your shipment now."
            }
        ],
        "function_call": {
            "function_name": "track_shipment_status",
            "parameters": {
                "tracking_number": "12345ABC",
                "courier_service": "FedEx"
            }
        }
    }
}
{
    "func_id": "business-9",
    "task": "assign a customer support ticket to an agent",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "assign a customer support ticket to an agent"
    },
    "snippet": "Here's a snippet of a python function that assigns a customer support ticket to an agent:\n\n```python\ndef assign_ticket_to_agent(\n    ticket_id: str,\n    agent_id: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Assigns a customer support ticket to an agent.\n    \n    Parameters:\n        ticket_id (str): The customer support ticket id.\n        agent_id (str): The id of the agent to assign the ticket to.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'ticket_id' and 'agent_id' as keys, and the corresponding ids as values, indicating the ticket is assigned to the agent.\n    \"\"\"\n```\nThis snippet defines a function \"assign_ticket_to_agent\" that takes two arguments, 'ticket_id' and 'agent_id', both strings representing the ids of the support ticket and agent respectively. The function returns a dictionary with 'ticket_id' and 'agent_id' as keys and their corresponding ids as values.",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "Here's a snippet of a python function that assigns a customer support ticket to an agent:\n\n```python\ndef assign_ticket_to_agent(\n    ticket_id: str,\n    agent_id: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Assigns a customer support ticket to an agent.\n    \n    Parameters:\n        ticket_id (str): The customer support ticket id.\n        agent_id (str): The id of the agent to assign the ticket to.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'ticket_id' and 'agent_id' as keys, and the corresponding ids as values, indicating the ticket is assigned to the agent.\n    \"\"\"\n```\nThis snippet defines a function \"assign_ticket_to_agent\" that takes two arguments, 'ticket_id' and 'agent_id', both strings representing the ids of the support ticket and agent respectively. The function returns a dictionary with 'ticket_id' and 'agent_id' as keys and their corresponding ids as values.",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "assign_ticket_to_agent",
            "description": "Assigns a customer support ticket to an agent.",
            "parameters": {
                "type": "object",
                "properties": {
                    "ticket_id": {
                        "type": "string",
                        "description": "The customer support ticket id."
                    },
                    "agent_id": {
                        "type": "string",
                        "description": "The id of the agent to assign the ticket to."
                    }
                },
                "required": [
                    "ticket_id",
                    "agent_id"
                ]
            },
            "returns": {
                "type": "object",
                "description": "A dictionary with 'ticket_id' and 'agent_id' as keys, and the corresponding ids as values, indicating the ticket is assigned to the agent.",
                "properties": {
                    "ticket_id": {
                        "type": "string"
                    },
                    "agent_id": {
                        "type": "string"
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'assign_ticket_to_agent', 'description': 'Assigns a customer support ticket to an agent.', 'parameters': {'type': 'object', 'properties': {'ticket_id': {'type': 'string', 'description': 'The customer support ticket id.'}, 'agent_id': {'type': 'string', 'description': 'The id of the agent to assign the ticket to.'}}, 'required': ['ticket_id', 'agent_id']}, 'returns': {'type': 'object', 'description': \"A dictionary with 'ticket_id' and 'agent_id' as keys, and the corresponding ids as values, indicating the ticket is assigned to the agent.\", 'properties': {'ticket_id': {'type': 'string'}, 'agent_id': {'type': 'string'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hello, I need to assign a customer support ticket to an agent."
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that for you. Could you please provide the ticket id and the id of the agent you want to assign to?"
            },
            {
                "role": "user",
                "text": "Yes, the ticket id is '12345' and the agent id is '67890'."
            },
            {
                "role": "assistant",
                "text": "Thank you. I am now assigning the ticket to the specified agent."
            }
        ],
        "function_call": {
            "function_name": "assign_ticket_to_agent",
            "parameters": {
                "ticket_id": "12345",
                "agent_id": "67890"
            }
        }
    }
}
{
    "func_id": "business-10",
    "task": "generate a unique discount code for a customer for maketing promotions",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "generate a unique discount code for a customer for maketing promotions"
    },
    "snippet": "def generate_discount_code(\n    customer_id: str\n) -> str:\n    \"\"\"\n    Generates a unique discount code for a customer for marketing promotions.\n    \n    Parameters:\n        customer_id (str): The unique ID of the customer.\n        \n    Returns:\n        str: The unique discount code for the customer.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def generate_discount_code(\n    customer_id: str\n) -> str:\n    \"\"\"\n    Generates a unique discount code for a customer for marketing promotions.\n    \n    Parameters:\n        customer_id (str): The unique ID of the customer.\n        \n    Returns:\n        str: The unique discount code for the customer.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "generate_discount_code",
            "description": "Generates a unique discount code for a customer for marketing promotions.",
            "parameters": {
                "type": "object",
                "properties": {
                    "customer_id": {
                        "type": "string",
                        "description": "The unique ID of the customer."
                    }
                },
                "required": [
                    "customer_id"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "unique_discount_code": {
                        "type": "string",
                        "description": "The unique discount code for the customer."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'generate_discount_code', 'description': 'Generates a unique discount code for a customer for marketing promotions.', 'parameters': {'type': 'object', 'properties': {'customer_id': {'type': 'string', 'description': 'The unique ID of the customer.'}}, 'required': ['customer_id']}, 'returns': {'type': 'object', 'properties': {'unique_discount_code': {'type': 'string', 'description': 'The unique discount code for the customer.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you generate a unique discount code for me?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. May I know your customer ID?"
            },
            {
                "role": "user",
                "text": "Yes, my customer ID is 'ABC123'."
            },
            {
                "role": "assistant",
                "text": "Great, I'm generating your unique discount code now."
            }
        ],
        "function_call": {
            "function_name": "generate_discount_code",
            "parameters": {
                "customer_id": "ABC123"
            }
        }
    }
}
{
    "func_id": "business-11",
    "task": "enable a customer's subscription to various services",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "enable a customer's subscription to various services"
    },
    "snippet": "def enable_customer_subscription(\n    customer_id: str,\n    service_list: List[str],\n) -> str:\n    \"\"\"\n    Enables a customer's subscription to various services.\n    \n    Parameters:\n        customer_id (str): The id of the customer.\n        service_list (List[str]): The list of services to subscribe to. Each element in the list should be the name of a service.\n                                          \n    Returns:\n        str: A string indicating the status of the operation.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def enable_customer_subscription(\n    customer_id: str,\n    service_list: List[str],\n) -> str:\n    \"\"\"\n    Enables a customer's subscription to various services.\n    \n    Parameters:\n        customer_id (str): The id of the customer.\n        service_list (List[str]): The list of services to subscribe to. Each element in the list should be the name of a service.\n                                          \n    Returns:\n        str: A string indicating the status of the operation.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "enable_customer_subscription",
            "description": "Enables a customer's subscription to various services.",
            "parameters": {
                "type": "object",
                "properties": {
                    "customer_id": {
                        "type": "string",
                        "description": "The id of the customer."
                    },
                    "service_list": {
                        "type": "array",
                        "description": "The list of services to subscribe to. Each element in the list should be the name of a service.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "customer_id",
                    "service_list"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "A string indicating the status of the operation."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'enable_customer_subscription', 'description': \"Enables a customer's subscription to various services.\", 'parameters': {'type': 'object', 'properties': {'customer_id': {'type': 'string', 'description': 'The id of the customer.'}, 'service_list': {'type': 'array', 'description': 'The list of services to subscribe to. Each element in the list should be the name of a service.', 'items': {'type': 'string'}}}, 'required': ['customer_id', 'service_list']}, 'returns': {'type': 'object', 'properties': {'status': {'type': 'string', 'description': 'A string indicating the status of the operation.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hello, can you sign me up for some services?"
            },
            {
                "role": "assistant",
                "text": "Of course, I can do that for you. Can you please provide me your customer ID?"
            },
            {
                "role": "user",
                "text": "Oh, right. My customer ID is 'ABC123'."
            },
            {
                "role": "assistant",
                "text": "Great, thank you! Now, could you tell me which services would you like to subscribe to?"
            },
            {
                "role": "user",
                "text": "I'd like to subscribe to 'Internet', 'TV' and 'Mobile'."
            },
            {
                "role": "assistant",
                "text": "Okay, I'm enabling your subscription to 'Internet', 'TV', and 'Mobile' now."
            }
        ],
        "function_call": {
            "function_name": "enable_customer_subscription",
            "parameters": {
                "customer_id": "ABC123",
                "service_list": [
                    "Internet",
                    "TV",
                    "Mobile"
                ]
            }
        }
    }
}
{
    "func_id": "business-15",
    "task": "perform a backup process of important business data",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "perform a backup process of important business data"
    },
    "snippet": "```python\ndef backup_business_data(\n    data_locations: List[str],\n    backup_location: str,\n    notification_email: str,\n) -> None:\n    \"\"\"\n    Performs a backup process of important business data.\n\n    Parameters:\n        data_locations (List[str]): A list of locations (paths) where the important business data is stored.\n        backup_location (str): The location (path) where the backup should be stored.\n        notification_email (str): The email address to notify once the backup process is complete.\n\n    Returns:\n        None\n    \"\"\"\n```",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "```python\ndef backup_business_data(\n    data_locations: List[str],\n    backup_location: str,\n    notification_email: str,\n) -> None:\n    \"\"\"\n    Performs a backup process of important business data.\n\n    Parameters:\n        data_locations (List[str]): A list of locations (paths) where the important business data is stored.\n        backup_location (str): The location (path) where the backup should be stored.\n        notification_email (str): The email address to notify once the backup process is complete.\n\n    Returns:\n        None\n    \"\"\"\n```",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "backup_business_data",
            "description": "Performs a backup process of important business data.",
            "parameters": {
                "type": "object",
                "properties": {
                    "data_locations": {
                        "type": "array",
                        "description": "A list of locations (paths) where the important business data is stored.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "backup_location": {
                        "type": "string",
                        "description": "The location (path) where the backup should be stored."
                    },
                    "notification_email": {
                        "type": "string",
                        "description": "The email address to notify once the backup process is complete."
                    }
                },
                "required": [
                    "data_locations",
                    "backup_location",
                    "notification_email"
                ]
            },
            "returns": {
                "type": "null",
                "description": "No value is returned by this function."
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'backup_business_data', 'description': 'Performs a backup process of important business data.', 'parameters': {'type': 'object', 'properties': {'data_locations': {'type': 'array', 'description': 'A list of locations (paths) where the important business data is stored.', 'items': {'type': 'string'}}, 'backup_location': {'type': 'string', 'description': 'The location (path) where the backup should be stored.'}, 'notification_email': {'type': 'string', 'description': 'The email address to notify once the backup process is complete.'}}, 'required': ['data_locations', 'backup_location', 'notification_email']}, 'returns': {'type': 'null', 'description': 'No value is returned by this function.'}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you backup my business data?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Could you please provide the locations where your important business data is stored?"
            },
            {
                "role": "user",
                "text": "Yes, my data is stored in locations 'DataLocation1' and 'DataLocation2'."
            },
            {
                "role": "assistant",
                "text": "Great, where would you like the backup to be stored?"
            },
            {
                "role": "user",
                "text": "Please store the backup at 'BackupLocation'."
            },
            {
                "role": "assistant",
                "text": "Understood. And finally, could you please share the email address where you would like to receive the notification once the backup process is complete?"
            },
            {
                "role": "user",
                "text": "Sure, please send the notification to 'MyEmail@website.com'."
            },
            {
                "role": "assistant",
                "text": "Perfect! I'm starting the backup process now."
            }
        ],
        "function_call": {
            "function_name": "backup_business_data",
            "parameters": {
                "data_locations": [
                    "DataLocation1",
                    "DataLocation2"
                ],
                "backup_location": "BackupLocation",
                "notification_email": "MyEmail@website.com"
            }
        }
    }
}
{
    "func_id": "business-16",
    "task": "check the validity of a software license for a given product",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "check the validity of a software license for a given product"
    },
    "snippet": "def check_license_validity(\n    product_id: str,\n    license_key: str,\n) -> bool:\n    \"\"\"\n    Checks the validity of a software license for a given product.\n    \n    Parameters:\n        product_id (str): The identifier of the product.\n        license_key (str): The software license key to validate.\n\n    Returns:\n        bool: Returns True if the software license is valid, otherwise returns False.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def check_license_validity(\n    product_id: str,\n    license_key: str,\n) -> bool:\n    \"\"\"\n    Checks the validity of a software license for a given product.\n    \n    Parameters:\n        product_id (str): The identifier of the product.\n        license_key (str): The software license key to validate.\n\n    Returns:\n        bool: Returns True if the software license is valid, otherwise returns False.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "check_license_validity",
            "description": "Checks the validity of a software license for a given product.",
            "parameters": {
                "type": "object",
                "properties": {
                    "product_id": {
                        "type": "string",
                        "description": "The identifier of the product."
                    },
                    "license_key": {
                        "type": "string",
                        "description": "The software license key to validate."
                    }
                },
                "required": [
                    "product_id",
                    "license_key"
                ]
            },
            "returns": {
                "type": "boolean",
                "description": "Returns True if the software license is valid, otherwise returns False."
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'check_license_validity', 'description': 'Checks the validity of a software license for a given product.', 'parameters': {'type': 'object', 'properties': {'product_id': {'type': 'string', 'description': 'The identifier of the product.'}, 'license_key': {'type': 'string', 'description': 'The software license key to validate.'}}, 'required': ['product_id', 'license_key']}, 'returns': {'type': 'boolean', 'description': 'Returns True if the software license is valid, otherwise returns False.'}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you check if my software license is still valid for my product?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Could you provide me with the product ID and the software license key?"
            },
            {
                "role": "user",
                "text": "Yes, my product ID is '12345' and my license key is 'abcde'."
            },
            {
                "role": "assistant",
                "text": "Okay, let me check the validity of your software license now."
            }
        ],
        "function_call": {
            "function_name": "check_license_validity",
            "parameters": {
                "product_id": "12345",
                "license_key": "abcde"
            }
        }
    }
}
{
    "func_id": "business-19",
    "task": "submit timesheets for employees, either for approval or archival",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "submit timesheets for employees, either for approval or archival"
    },
    "snippet": "def submit_timesheets(\n    employees: List[Dict[str, Any]],\n    action: str,\n    date_range: Tuple[str, str]\n) -> Dict[str, str]:\n    \"\"\"\n    Submits timesheets for employees, either for approval or archival.\n\n    Parameters:\n        employees (List[Dict[str, Any]]): A list of dictionaries containing employee details.\n                                          Each dictionary should have 'name' and 'timesheet' keys.\n        action (str): The action to perform - 'approval' or 'archival'.\n        date_range (Tuple[str, str]): A tuple containing the start and end date in YYYY-MM-DD format \n                                      for which the timesheets are to be submitted.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key and the operation status as a value. \n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def submit_timesheets(\n    employees: List[Dict[str, Any]],\n    action: str,\n    date_range: Tuple[str, str]\n) -> Dict[str, str]:\n    \"\"\"\n    Submits timesheets for employees, either for approval or archival.\n\n    Parameters:\n        employees (List[Dict[str, Any]]): A list of dictionaries containing employee details.\n                                          Each dictionary should have 'name' and 'timesheet' keys.\n        action (str): The action to perform - 'approval' or 'archival'.\n        date_range (Tuple[str, str]): A tuple containing the start and end date in YYYY-MM-DD format \n                                      for which the timesheets are to be submitted.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key and the operation status as a value. \n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "submit_timesheets",
            "description": "Submits timesheets for employees, either for approval or archival.",
            "parameters": {
                "type": "object",
                "properties": {
                    "employees": {
                        "type": "array",
                        "description": "A list of dictionaries containing employee details. Each dictionary should have 'name' and 'timesheet' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "timesheet": {
                                    "type": "any"
                                }
                            },
                            "required": [
                                "name",
                                "timesheet"
                            ]
                        }
                    },
                    "action": {
                        "type": "string",
                        "description": "The action to perform - 'approval' or 'archival'."
                    },
                    "date_range": {
                        "type": "object",
                        "description": "A tuple containing the start and end date in YYYY-MM-DD format for which the timesheets are to be submitted.",
                        "properties": {
                            "start_date": {
                                "type": "string",
                                "description": "The start date in YYYY-MM-DD format."
                            },
                            "end_date": {
                                "type": "string",
                                "description": "The end date in YYYY-MM-DD format."
                            }
                        },
                        "required": [
                            "start_date",
                            "end_date"
                        ]
                    }
                },
                "required": [
                    "employees",
                    "action",
                    "date_range"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "A dictionary with 'status' as a key and the operation status as a value."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'submit_timesheets', 'description': 'Submits timesheets for employees, either for approval or archival.', 'parameters': {'type': 'object', 'properties': {'employees': {'type': 'array', 'description': \"A list of dictionaries containing employee details. Each dictionary should have 'name' and 'timesheet' keys.\", 'items': {'type': 'object', 'properties': {'name': {'type': 'string'}, 'timesheet': {'type': 'any'}}, 'required': ['name', 'timesheet']}}, 'action': {'type': 'string', 'description': \"The action to perform - 'approval' or 'archival'.\"}, 'date_range': {'type': 'object', 'description': 'A tuple containing the start and end date in YYYY-MM-DD format for which the timesheets are to be submitted.', 'properties': {'start_date': {'type': 'string', 'description': 'The start date in YYYY-MM-DD format.'}, 'end_date': {'type': 'string', 'description': 'The end date in YYYY-MM-DD format.'}}, 'required': ['start_date', 'end_date']}}, 'required': ['employees', 'action', 'date_range']}, 'returns': {'type': 'object', 'properties': {'status': {'type': 'string', 'description': \"A dictionary with 'status' as a key and the operation status as a value.\"}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you submit timesheets for my employees?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. I need some details. Can you provide me the list of employees along with their timesheets? Also, indicate whether this is for approval or archival. And finally, provide me with the date range in YYYY-MM-DD format."
            },
            {
                "role": "user",
                "text": "Yes, here are the details. The employee list includes John, with his timesheet as TS1, and Jane, with her timesheet as TS2. This action is for approval. The date range is from 2022-02-01 to 2022-02-28."
            },
            {
                "role": "assistant",
                "text": "Great, I'm submitting the timesheets now."
            }
        ],
        "function_call": {
            "function_name": "submit_timesheets",
            "parameters": {
                "employees": [
                    {
                        "name": "John",
                        "timesheet": "TS1"
                    },
                    {
                        "name": "Jane",
                        "timesheet": "TS2"
                    }
                ],
                "action": "approval",
                "date_range": {
                    "start_date": "2022-02-01",
                    "end_date": "2022-02-28"
                }
            }
        }
    }
}
{
    "func_id": "business-20",
    "task": "calculate and distribute performance-based incentives or bonuses to employees",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "calculate and distribute performance-based incentives or bonuses to employees"
    },
    "snippet": "def calculate_and_distribute_bonuses(\n    employees: List[Dict[str, Union[str, int, float]]],\n    performance_scores: Dict[str, float]\n) -> Dict[str, float]:\n    \"\"\"\n    Calculates and distributes performance-based incentives or bonuses to employees.\n\n    Parameters:\n        employees (List[Dict[str, Union[str, int, float]]]): \n            A list of dictionaries containing employee details. \n            Each dictionary should have 'employee_id', 'name' and 'base_salary' keys.\n        \n        performance_scores (Dict[str, float]): \n            A dictionary with employee_ids as keys and their \n            corresponding performance scores as values. \n\n    Returns:\n        Dict[str, float]: \n            A dictionary with employee_ids as keys and the \n            calculated bonus amount as the corresponding value.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def calculate_and_distribute_bonuses(\n    employees: List[Dict[str, Union[str, int, float]]],\n    performance_scores: Dict[str, float]\n) -> Dict[str, float]:\n    \"\"\"\n    Calculates and distributes performance-based incentives or bonuses to employees.\n\n    Parameters:\n        employees (List[Dict[str, Union[str, int, float]]]): \n            A list of dictionaries containing employee details. \n            Each dictionary should have 'employee_id', 'name' and 'base_salary' keys.\n        \n        performance_scores (Dict[str, float]): \n            A dictionary with employee_ids as keys and their \n            corresponding performance scores as values. \n\n    Returns:\n        Dict[str, float]: \n            A dictionary with employee_ids as keys and the \n            calculated bonus amount as the corresponding value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "calculate_and_distribute_bonuses",
            "description": "Calculates and distributes performance-based incentives or bonuses to employees.",
            "parameters": {
                "type": "object",
                "properties": {
                    "employees": {
                        "type": "array",
                        "description": "A list of dictionaries containing employee details. Each dictionary should have 'employee_id', 'name' and 'base_salary' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "employee_id": {
                                    "type": "string"
                                },
                                "name": {
                                    "type": "string"
                                },
                                "base_salary": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "employee_id",
                                "name",
                                "base_salary"
                            ]
                        }
                    },
                    "performance_scores": {
                        "type": "object",
                        "description": "A dictionary with employee_ids as keys and their corresponding performance scores as values.",
                        "additionalProperties": {
                            "type": "float"
                        }
                    }
                },
                "required": [
                    "employees",
                    "performance_scores"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "bonus_amount": {
                        "type": "float",
                        "description": "A dictionary with employee_ids as keys and the calculated bonus amount as the corresponding value."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'calculate_and_distribute_bonuses', 'description': 'Calculates and distributes performance-based incentives or bonuses to employees.', 'parameters': {'type': 'object', 'properties': {'employees': {'type': 'array', 'description': \"A list of dictionaries containing employee details. Each dictionary should have 'employee_id', 'name' and 'base_salary' keys.\", 'items': {'type': 'object', 'properties': {'employee_id': {'type': 'string'}, 'name': {'type': 'string'}, 'base_salary': {'type': 'integer'}}, 'required': ['employee_id', 'name', 'base_salary']}}, 'performance_scores': {'type': 'object', 'description': 'A dictionary with employee_ids as keys and their corresponding performance scores as values.', 'additionalProperties': {'type': 'float'}}}, 'required': ['employees', 'performance_scores']}, 'returns': {'type': 'object', 'properties': {'bonus_amount': {'type': 'float', 'description': 'A dictionary with employee_ids as keys and the calculated bonus amount as the corresponding value.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": "The conversation would go like this:\n\n```json\n{\n    \"conversation\": \n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you calculate and distribute the bonuses for my employees?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can help with that. May I have the list of your employees along with their performance scores?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, here they are. The employee details are: [{'employee_id': '1', 'name': 'John Doe', 'base_salary': 50000}, {'employee_id': '2', 'name': 'Jane Doe', 'base_salary': 60000}]. And the performance scores are: {'1': 0.8, '2': 0.75}.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm calculating and distributing the bonuses now.\"\n    }\n],\n    \"function_call\": \n{\n    \"function_name\": \"calculate_and_distribute_bonuses\",\n    \"parameters\": {\n        \"employees\": [{'employee_id': '1', 'name': 'John Doe', 'base_salary': 50000}, {'employee_id': '2', 'name': 'Jane Doe', 'base_salary': 60000}],\n        \"performance_scores\": {'1': 0.8, '2': 0.75}\n    }\n}\n}\n```"
}
{
    "func_id": "business-21",
    "task": "generate employee shift schedules based on availability and workload",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "generate employee shift schedules based on availability and workload"
    },
    "snippet": "def generate_shift_schedule(\n    availability: Dict[str, List[str]],\n    workload: Dict[str, int],\n) -> Dict[str, List[str]]:\n    \"\"\"\n    Generates employee shift schedules based on the provided availability and workload.\n\n    Parameters:\n        availability (Dict[str, List[str]]): A dictionary object where each key is an employee's name\n                                             and the value is a list of strings representing the days of\n                                             the week when the employee is available.\n\n        workload (Dict[str, int]): A dictionary object where each key is a day of the week and the value \n                                    is an integer representing the total number of shifts required for\n                                    that day.\n\n    Returns:\n        Dict[str, List[str]]: A dictionary object where each key is an employee's name and the value\n                               is a list of strings representing the sorted work schedule for that \n                               employee based on their availability and required workload.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def generate_shift_schedule(\n    availability: Dict[str, List[str]],\n    workload: Dict[str, int],\n) -> Dict[str, List[str]]:\n    \"\"\"\n    Generates employee shift schedules based on the provided availability and workload.\n\n    Parameters:\n        availability (Dict[str, List[str]]): A dictionary object where each key is an employee's name\n                                             and the value is a list of strings representing the days of\n                                             the week when the employee is available.\n\n        workload (Dict[str, int]): A dictionary object where each key is a day of the week and the value \n                                    is an integer representing the total number of shifts required for\n                                    that day.\n\n    Returns:\n        Dict[str, List[str]]: A dictionary object where each key is an employee's name and the value\n                               is a list of strings representing the sorted work schedule for that \n                               employee based on their availability and required workload.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "generate_shift_schedule",
            "description": "Generates employee shift schedules based on the provided availability and workload.",
            "parameters": {
                "type": "object",
                "properties": {
                    "availability": {
                        "type": "object",
                        "description": "A dictionary object where each key is an employee's name and the value is a list of strings representing the days of the week when the employee is available."
                    },
                    "workload": {
                        "type": "object",
                        "description": "A dictionary object where each key is a day of the week and the value is an integer representing the total number of shifts required for that day."
                    }
                },
                "required": [
                    "availability",
                    "workload"
                ]
            },
            "returns": {
                "type": "object",
                "description": "A dictionary object where each key is an employee's name and the value is a list of strings representing the sorted work schedule for that employee based on their availability and required workload.",
                "properties": {
                    "shift_schedule": {
                        "type": "object",
                        "description": "A dictionary object where each key is an employee's name and the value is a list of strings representing the sorted work schedule for that employee."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'generate_shift_schedule', 'description': 'Generates employee shift schedules based on the provided availability and workload.', 'parameters': {'type': 'object', 'properties': {'availability': {'type': 'object', 'description': \"A dictionary object where each key is an employee's name and the value is a list of strings representing the days of the week when the employee is available.\"}, 'workload': {'type': 'object', 'description': 'A dictionary object where each key is a day of the week and the value is an integer representing the total number of shifts required for that day.'}}, 'required': ['availability', 'workload']}, 'returns': {'type': 'object', 'description': \"A dictionary object where each key is an employee's name and the value is a list of strings representing the sorted work schedule for that employee based on their availability and required workload.\", 'properties': {'shift_schedule': {'type': 'object', 'description': \"A dictionary object where each key is an employee's name and the value is a list of strings representing the sorted work schedule for that employee.\"}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you help me generate a shift schedule for my employees?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Can you provide me with the availability of each employee and the workload for each day of the week?"
            },
            {
                "role": "user",
                "text": "Yes, I can. For availability, we have John who is available Monday and Wednesday, Lisa on Tuesday and Thursday, and Mike on Friday. For the workload, we need 2 shifts on Monday and Wednesday, 3 shifts on Tuesday and Thursday, and 1 shift on Friday."
            },
            {
                "role": "assistant",
                "text": "Great, I'm generating the shift schedule based on the information you provided."
            }
        ],
        "function_call": {
            "function_name": "generate_shift_schedule",
            "parameters": {
                "availability": {
                    "John": [
                        "Monday",
                        "Wednesday"
                    ],
                    "Lisa": [
                        "Tuesday",
                        "Thursday"
                    ],
                    "Mike": [
                        "Friday"
                    ]
                },
                "workload": {
                    "Monday": 2,
                    "Tuesday": 3,
                    "Wednesday": 2,
                    "Thursday": 3,
                    "Friday": 1
                }
            }
        }
    }
}
{
    "func_id": "business-22",
    "task": "create and approve budgets for different departments or projects",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "create and approve budgets for different departments or projects"
    },
    "snippet": "def create_and_approve_budgets(\n    budgets: Dict[str, float],\n    departments_or_projects: List[str],\n) -> Dict[str, float]:\n    \"\"\"\n    Creates and approves budgets for different departments or projects.\n    \n    Parameters:\n        budgets (Dict[str, float]): A dictionary with the budget amounts, \n                                    where each key is a department or project, \n                                    and the value is the corresponding budget.\n        departments_or_projects (List[str]): A list of department or project names.\n                                     \n    Returns:\n        Dict[str, float]: A dictionary with the approved budgets,\n                          where each key is a department or project, \n                          and the value is the corresponding approved budget.\n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def create_and_approve_budgets(\n    budgets: Dict[str, float],\n    departments_or_projects: List[str],\n) -> Dict[str, float]:\n    \"\"\"\n    Creates and approves budgets for different departments or projects.\n    \n    Parameters:\n        budgets (Dict[str, float]): A dictionary with the budget amounts, \n                                    where each key is a department or project, \n                                    and the value is the corresponding budget.\n        departments_or_projects (List[str]): A list of department or project names.\n                                     \n    Returns:\n        Dict[str, float]: A dictionary with the approved budgets,\n                          where each key is a department or project, \n                          and the value is the corresponding approved budget.\n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "create_and_approve_budgets",
            "description": "Creates and approves budgets for different departments or projects.",
            "parameters": {
                "type": "object",
                "properties": {
                    "budgets": {
                        "type": "object",
                        "description": "A dictionary with the budget amounts, where each key is a department or project, and the value is the corresponding budget.",
                        "additionalProperties": {
                            "type": "float"
                        }
                    },
                    "departments_or_projects": {
                        "type": "array",
                        "description": "A list of department or project names.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "budgets",
                    "departments_or_projects"
                ]
            },
            "returns": {
                "type": "object",
                "description": "A dictionary with the approved budgets, where each key is a department or project, and the value is the corresponding approved budget.",
                "additionalProperties": {
                    "type": "float"
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'create_and_approve_budgets', 'description': 'Creates and approves budgets for different departments or projects.', 'parameters': {'type': 'object', 'properties': {'budgets': {'type': 'object', 'description': 'A dictionary with the budget amounts, where each key is a department or project, and the value is the corresponding budget.', 'additionalProperties': {'type': 'float'}}, 'departments_or_projects': {'type': 'array', 'description': 'A list of department or project names.', 'items': {'type': 'string'}}}, 'required': ['budgets', 'departments_or_projects']}, 'returns': {'type': 'object', 'description': 'A dictionary with the approved budgets, where each key is a department or project, and the value is the corresponding approved budget.', 'additionalProperties': {'type': 'float'}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you help me create and approve budgets for my departments?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Could you please provide me the budget amounts for each of your departments or projects, and provide their respective names?"
            },
            {
                "role": "user",
                "text": "Yes, for marketing department budget is 50000, for sales department it's 60000, for product development it's 70000 and the firm's new Project X has been allocated budget of 80000."
            },
            {
                "role": "assistant",
                "text": "Great, I am going to create and approve these budgets now."
            }
        ],
        "function_call": {
            "function_name": "create_and_approve_budgets",
            "parameters": {
                "budgets": {
                    "marketing": 50000.0,
                    "sales": 60000.0,
                    "product development": 70000.0,
                    "Project X": 80000.0
                },
                "departments_or_projects": [
                    "marketing",
                    "sales",
                    "product development",
                    "Project X"
                ]
            }
        }
    }
}
