{
    "function_id": "ubereats-1",
    "task": "Accept a new delivery request.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Accept a new delivery request."
    },
    "snippet": "def accept_delivery_request(\n    delivery_id: int,\n    client_id: int,\n    pickup_location: str, \n    delivery_location: str, \n    delivery_date: str, \n    delivery_contents: Dict[str, str],\n    delivery_instructions: Optional[str] = None\n) -> str:\n    \"\"\"\n    Accepts a new delivery request and returns a confirmation message.\n\n    Parameters:\n        delivery_id (int): The unique ID for this delivery.\n        client_id (int): The unique ID for the client requesting the delivery.\n        pickup_location (str): The pickup location for the delivery.\n        delivery_location (str): The delivery location.\n        delivery_date (str): The delivery date in YYYY-MM-DD format.\n        delivery_contents (Dict[str, str]): A dictionary containing delivery content details. Keys may vary depending on the specifics of the delivery.\n        delivery_instructions (Optional[str]): Additional client instructions for the delivery.\n\n    Returns:\n        str: A confirmation message that the delivery request has been accepted.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def accept_delivery_request(\n    delivery_id: int,\n    client_id: int,\n    pickup_location: str, \n    delivery_location: str, \n    delivery_date: str, \n    delivery_contents: Dict[str, str],\n    delivery_instructions: Optional[str] = None\n) -> str:\n    \"\"\"\n    Accepts a new delivery request and returns a confirmation message.\n\n    Parameters:\n        delivery_id (int): The unique ID for this delivery.\n        client_id (int): The unique ID for the client requesting the delivery.\n        pickup_location (str): The pickup location for the delivery.\n        delivery_location (str): The delivery location.\n        delivery_date (str): The delivery date in YYYY-MM-DD format.\n        delivery_contents (Dict[str, str]): A dictionary containing delivery content details. Keys may vary depending on the specifics of the delivery.\n        delivery_instructions (Optional[str]): Additional client instructions for the delivery.\n\n    Returns:\n        str: A confirmation message that the delivery request has been accepted.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "accept_delivery_request",
            "description": "Accepts a new delivery request and returns a confirmation message.",
            "parameters": {
                "type": "object",
                "properties": {
                    "delivery_id": {
                        "type": "integer",
                        "description": "The unique ID for this delivery."
                    },
                    "client_id": {
                        "type": "integer",
                        "description": "The unique ID for the client requesting the delivery."
                    },
                    "pickup_location": {
                        "type": "string",
                        "description": "The pickup location for the delivery."
                    },
                    "delivery_location": {
                        "type": "string",
                        "description": "The delivery location."
                    },
                    "delivery_date": {
                        "type": "string",
                        "description": "The delivery date in YYYY-MM-DD format."
                    },
                    "delivery_contents": {
                        "type": "object",
                        "description": "A dictionary containing delivery content details. Keys may vary depending on the specifics of the delivery.",
                        "properties": {}
                    },
                    "delivery_instructions": {
                        "type": "string",
                        "description": "Additional client instructions for the delivery."
                    }
                },
                "required": [
                    "delivery_id",
                    "client_id",
                    "pickup_location",
                    "delivery_location",
                    "delivery_date",
                    "delivery_contents"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "confirmation_message": {
                        "type": "string",
                        "description": "A confirmation message that the delivery request has been accepted."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'accept_delivery_request', 'description': 'Accepts a new delivery request and returns a confirmation message.', 'parameters': {'type': 'object', 'properties': {'delivery_id': {'type': 'integer', 'description': 'The unique ID for this delivery.'}, 'client_id': {'type': 'integer', 'description': 'The unique ID for the client requesting the delivery.'}, 'pickup_location': {'type': 'string', 'description': 'The pickup location for the delivery.'}, 'delivery_location': {'type': 'string', 'description': 'The delivery location.'}, 'delivery_date': {'type': 'string', 'description': 'The delivery date in YYYY-MM-DD format.'}, 'delivery_contents': {'type': 'object', 'description': 'A dictionary containing delivery content details. Keys may vary depending on the specifics of the delivery.', 'properties': {}}, 'delivery_instructions': {'type': 'string', 'description': 'Additional client instructions for the delivery.'}}, 'required': ['delivery_id', 'client_id', 'pickup_location', 'delivery_location', 'delivery_date', 'delivery_contents']}, 'returns': {'type': 'object', 'properties': {'confirmation_message': {'type': 'string', 'description': 'A confirmation message that the delivery request has been accepted.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": "{\n    \"conversation\": \n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, I need to make a new delivery request.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can help you with that. Can I have the following details: the delivery ID, your client ID, the pickup and delivery locations, the delivery date, the delivery contents, and any special instructions you might have?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Certainly, the delivery ID is '12345', my client ID is '56789'. Pickup location is 'Office', and delivery location is 'Home'. The delivery date is '2022-03-05'. I want to deliver a furniture. Here are the details {'Name': 'Sofa', 'Quantity': '1', 'Dimensions': '80x35x35'}. And please inform the recipient to handle with care.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Alright, I have all the details, I am placing the delivery request for you now.\"\n    }\n]\n,\n    \"function_call\": \n{\n    \"function_name\": \"accept_delivery_request\",\n    \"parameters\": {\n        \"delivery_id\": 12345,\n        \"client_id\": 56789,\n        \"pickup_location\": \"Office\",\n        \"delivery_location\": \"Home\",\n        \"delivery_date\": \"2022-03-05\",\n        \"delivery_contents\": {'Name': 'Sofa', 'Quantity': '1', 'Dimensions': '80x35x35'},\n        \"delivery_instructions\": \"Please inform the recipient to handle with care.\"\n    }\n}\n\n}"
}
{
    "function_id": "ubereats-2",
    "task": "Navigate to the restaurant for food pickup.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Navigate to the restaurant for food pickup."
    },
    "snippet": "def navigate_to_restaurant_for_food_pickup(\n    restaurant_location: str,\n    current_location: str\n) -> str:\n    \"\"\"\n    Navigates to the specified restaurant for food pickup.\n\n    Parameters:\n        restaurant_location (str): The location of the restaurant for food pickup.\n        current_location (str): The current location of the user.\n\n    Returns:\n        str: A string containing the direction guidance to the restaurant.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def navigate_to_restaurant_for_food_pickup(\n    restaurant_location: str,\n    current_location: str\n) -> str:\n    \"\"\"\n    Navigates to the specified restaurant for food pickup.\n\n    Parameters:\n        restaurant_location (str): The location of the restaurant for food pickup.\n        current_location (str): The current location of the user.\n\n    Returns:\n        str: A string containing the direction guidance to the restaurant.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "navigate_to_restaurant_for_food_pickup",
            "description": "Navigates to the specified restaurant for food pickup.",
            "parameters": {
                "type": "object",
                "properties": {
                    "restaurant_location": {
                        "type": "string",
                        "description": "The location of the restaurant for food pickup."
                    },
                    "current_location": {
                        "type": "string",
                        "description": "The current location of the user."
                    }
                },
                "required": [
                    "restaurant_location",
                    "current_location"
                ]
            },
            "returns": {
                "type": "string",
                "description": "A string containing the direction guidance to the restaurant."
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'navigate_to_restaurant_for_food_pickup', 'description': 'Navigates to the specified restaurant for food pickup.', 'parameters': {'type': 'object', 'properties': {'restaurant_location': {'type': 'string', 'description': 'The location of the restaurant for food pickup.'}, 'current_location': {'type': 'string', 'description': 'The current location of the user.'}}, 'required': ['restaurant_location', 'current_location']}, 'returns': {'type': 'string', 'description': 'A string containing the direction guidance to the restaurant.'}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you help me navigate to a restaurant for a food pickup?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Could you please provide me the restaurant location?"
            },
            {
                "role": "user",
                "text": "Yes, the restaurant is located at '123 Main Street'."
            },
            {
                "role": "assistant",
                "text": "Got it. I would be needing to know your current location as well."
            },
            {
                "role": "user",
                "text": "Sure, I'm currently at '456 Pine Avenue'."
            },
            {
                "role": "assistant",
                "text": "Great, I'm generating the navigation directions to the restaurant now."
            }
        ],
        "function_call": {
            "function_name": "navigate_to_restaurant_for_food_pickup",
            "parameters": {
                "restaurant_location": "123 Main Street",
                "current_location": "456 Pine Avenue"
            }
        }
    }
}
{
    "function_id": "ubereats-5",
    "task": "Navigate to the customer's location for food delivery.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Navigate to the customer's location for food delivery."
    },
    "snippet": "def navigate_to_customer_location(\n    customer_address: str,\n    current_location: str,\n) -> None:\n    \"\"\"\n    Finds a route to the customer's address from the current location for food delivery.\n    \n    Parameters:\n        customer_address (str): The address of the customer.\n        current_location (str): The current location of the food delivery driver.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def navigate_to_customer_location(\n    customer_address: str,\n    current_location: str,\n) -> None:\n    \"\"\"\n    Finds a route to the customer's address from the current location for food delivery.\n    \n    Parameters:\n        customer_address (str): The address of the customer.\n        current_location (str): The current location of the food delivery driver.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "navigate_to_customer_location",
            "description": "Finds a route to the customer's address from the current location for food delivery.",
            "parameters": {
                "type": "object",
                "properties": {
                    "customer_address": {
                        "type": "string",
                        "description": "The address of the customer."
                    },
                    "current_location": {
                        "type": "string",
                        "description": "The current location of the food delivery driver."
                    }
                },
                "required": [
                    "customer_address",
                    "current_location"
                ]
            },
            "returns": {
                "type": "null"
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'navigate_to_customer_location', 'description': \"Finds a route to the customer's address from the current location for food delivery.\", 'parameters': {'type': 'object', 'properties': {'customer_address': {'type': 'string', 'description': 'The address of the customer.'}, 'current_location': {'type': 'string', 'description': 'The current location of the food delivery driver.'}}, 'required': ['customer_address', 'current_location']}, 'returns': {'type': 'null'}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "I need to deliver this food package, can you navigate me to the customer\u2019s address?"
            },
            {
                "role": "assistant",
                "text": "Of course, can you provide me with the customer's address?"
            },
            {
                "role": "user",
                "text": "Yes, the customer's address is '123 Happy Street'."
            },
            {
                "role": "assistant",
                "text": "Thank you. I would also need your current location to find the best route."
            },
            {
                "role": "user",
                "text": "Sure, I am currently at '456 Busy Avenue'."
            },
            {
                "role": "assistant",
                "text": "Great, I'm calculating the best route for you now."
            }
        ],
        "function_call": {
            "function_name": "navigate_to_customer_location",
            "parameters": {
                "customer_address": "123 Happy Street",
                "current_location": "456 Busy Avenue"
            }
        }
    }
}
{
    "function_id": "ubereats-6",
    "task": "Confirm the successful delivery of the food items to the customer.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Confirm the successful delivery of the food items to the customer."
    },
    "snippet": "def confirm_delivery(\n    order_id: int,\n    customer_id: int,\n) -> Dict[str, bool]:\n    \"\"\"\n    Confirms the successful delivery of the food items to the customer.\n    \n    Parameters:\n        order_id (int): The id of the order that was delivered.\n        customer_id (int): The id of the customer to whom the order was delivered.\n                                          \n    Returns:\n        Dict[str, bool]: A dictionary with 'order_delivered' as a key and a boolean as a value that\n                         signifies whether or not the order was successfully delivered.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def confirm_delivery(\n    order_id: int,\n    customer_id: int,\n) -> Dict[str, bool]:\n    \"\"\"\n    Confirms the successful delivery of the food items to the customer.\n    \n    Parameters:\n        order_id (int): The id of the order that was delivered.\n        customer_id (int): The id of the customer to whom the order was delivered.\n                                          \n    Returns:\n        Dict[str, bool]: A dictionary with 'order_delivered' as a key and a boolean as a value that\n                         signifies whether or not the order was successfully delivered.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "confirm_delivery",
            "description": "Confirms the successful delivery of the food items to the customer.",
            "parameters": {
                "type": "object",
                "properties": {
                    "order_id": {
                        "type": "integer",
                        "description": "The id of the order that was delivered."
                    },
                    "customer_id": {
                        "type": "integer",
                        "description": "The id of the customer to whom the order was delivered."
                    }
                },
                "required": [
                    "order_id",
                    "customer_id"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "order_delivered": {
                        "type": "boolean",
                        "description": "A boolean that signifies whether or not the order was successfully delivered."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'confirm_delivery', 'description': 'Confirms the successful delivery of the food items to the customer.', 'parameters': {'type': 'object', 'properties': {'order_id': {'type': 'integer', 'description': 'The id of the order that was delivered.'}, 'customer_id': {'type': 'integer', 'description': 'The id of the customer to whom the order was delivered.'}}, 'required': ['order_id', 'customer_id']}, 'returns': {'type': 'object', 'properties': {'order_delivered': {'type': 'boolean', 'description': 'A boolean that signifies whether or not the order was successfully delivered.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hi, I just received my food order. Can you confirm the delivery?"
            },
            {
                "role": "assistant",
                "text": "Of course, I can assist you with that. May I have the order ID and your customer ID, please?"
            },
            {
                "role": "user",
                "text": "Sure, my order ID is '12345' and customer ID is '67890'."
            },
            {
                "role": "assistant",
                "text": "Perfect, I'm confirming the delivery of your order now."
            }
        ],
        "function_call": {
            "function_name": "confirm_delivery",
            "parameters": {
                "order_id": 12345,
                "customer_id": 67890
            }
        }
    }
}
{
    "function_id": "ubereats-7",
    "task": "Handle and report any issues with the order (e.g., missing items, delays).",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Handle and report any issues with the order (e.g., missing items, delays)."
    },
    "snippet": "def handle_order_issues(\n    order_details: Dict[str, Any],\n) -> Dict[str, str]:\n    \"\"\"\n    Handles and reports any issues with the order such as missing items or delays.\n\n    Parameters:\n        order_details (Dict[str, Any]): A dictionary containing the details of the order.\n                                        It should have 'items' and 'delivery_date' keys.\n                                        \n    Returns:\n        Dict[str, str]: A dictionary with 'status', 'issue_type' and 'message' as keys.\n                        'status' can be 'SUCCESS' or 'FAILURE'.\n                        'issue_type' can be 'MISSING_ITEMS' or 'DELAY' or 'NONE' in case of no issues.\n                        'message' is a detailed explanation of the reported issue.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def handle_order_issues(\n    order_details: Dict[str, Any],\n) -> Dict[str, str]:\n    \"\"\"\n    Handles and reports any issues with the order such as missing items or delays.\n\n    Parameters:\n        order_details (Dict[str, Any]): A dictionary containing the details of the order.\n                                        It should have 'items' and 'delivery_date' keys.\n                                        \n    Returns:\n        Dict[str, str]: A dictionary with 'status', 'issue_type' and 'message' as keys.\n                        'status' can be 'SUCCESS' or 'FAILURE'.\n                        'issue_type' can be 'MISSING_ITEMS' or 'DELAY' or 'NONE' in case of no issues.\n                        'message' is a detailed explanation of the reported issue.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "handle_order_issues",
            "description": "Handles and reports any issues with the order such as missing items or delays.",
            "parameters": {
                "type": "object",
                "properties": {
                    "order_details": {
                        "type": "object",
                        "description": "A dictionary containing the details of the order. It should have 'items' and 'delivery_date' keys."
                    }
                },
                "required": [
                    "order_details"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "'status' can be 'SUCCESS' or 'FAILURE'."
                    },
                    "issue_type": {
                        "type": "string",
                        "description": "'issue_type' can be 'MISSING_ITEMS' or 'DELAY' or 'NONE' in case of no issues."
                    },
                    "message": {
                        "type": "string",
                        "description": "'message' is a detailed explanation of the reported issue."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'handle_order_issues', 'description': 'Handles and reports any issues with the order such as missing items or delays.', 'parameters': {'type': 'object', 'properties': {'order_details': {'type': 'object', 'description': \"A dictionary containing the details of the order. It should have 'items' and 'delivery_date' keys.\"}}, 'required': ['order_details']}, 'returns': {'type': 'object', 'properties': {'status': {'type': 'string', 'description': \"'status' can be 'SUCCESS' or 'FAILURE'.\"}, 'issue_type': {'type': 'string', 'description': \"'issue_type' can be 'MISSING_ITEMS' or 'DELAY' or 'NONE' in case of no issues.\"}, 'message': {'type': 'string', 'description': \"'message' is a detailed explanation of the reported issue.\"}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, I think there's a problem with my order. Could you check it out for me?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. May I have the details of your order?"
            },
            {
                "role": "user",
                "text": "Yes, here are my order details in a dictionary format."
            },
            {
                "role": "assistant",
                "text": "Alright, let me check any issues with this order."
            }
        ],
        "function_call": {
            "function_name": "handle_order_issues",
            "parameters": {
                "order_details": "{here goes the dictionary of order details}"
            }
        }
    }
}
{
    "function_id": "ubereats-8",
    "task": "Record and submit daily earnings for review.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Record and submit daily earnings for review."
    },
    "snippet": "def record_daily_earnings(\n    earnings: Dict[str, float],\n    submit_date: str,\n) -> bool:\n    \"\"\"\n    Records and submits daily earnings for review.\n    \n    Parameters:\n        earnings (Dict[str, float]): A dictionary with keys as the product or service name and its corresponding \n                                     earnings as the value.\n        submit_date (str): The date of submission in YYYY-MM-DD format.\n                              \n    Returns:\n        bool: A boolean value indicating if the submission was successful or not.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def record_daily_earnings(\n    earnings: Dict[str, float],\n    submit_date: str,\n) -> bool:\n    \"\"\"\n    Records and submits daily earnings for review.\n    \n    Parameters:\n        earnings (Dict[str, float]): A dictionary with keys as the product or service name and its corresponding \n                                     earnings as the value.\n        submit_date (str): The date of submission in YYYY-MM-DD format.\n                              \n    Returns:\n        bool: A boolean value indicating if the submission was successful or not.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "record_daily_earnings",
            "description": "Records and submits daily earnings for review.",
            "parameters": {
                "type": "object",
                "properties": {
                    "earnings": {
                        "type": "object",
                        "description": "A dictionary with keys as the product or service name and its corresponding earnings as the value.",
                        "properties": {
                            "type": "string"
                        }
                    },
                    "submit_date": {
                        "type": "string",
                        "description": "The date of submission in YYYY-MM-DD format."
                    }
                },
                "required": [
                    "earnings",
                    "submit_date"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "successful_submission": {
                        "type": "boolean",
                        "description": "A boolean value indicating if the submission was successful or not."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'record_daily_earnings', 'description': 'Records and submits daily earnings for review.', 'parameters': {'type': 'object', 'properties': {'earnings': {'type': 'object', 'description': 'A dictionary with keys as the product or service name and its corresponding earnings as the value.', 'properties': {'type': 'string'}}, 'submit_date': {'type': 'string', 'description': 'The date of submission in YYYY-MM-DD format.'}}, 'required': ['earnings', 'submit_date']}, 'returns': {'type': 'object', 'properties': {'successful_submission': {'type': 'boolean', 'description': 'A boolean value indicating if the submission was successful or not.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you record my daily earnings?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Could you please provide your earnings details in the form of a dictionary with keys as the product or service name and its corresponding earnings as the value?"
            },
            {
                "role": "user",
                "text": "Sure, here are my earnings: {'website design': 500, 'logo design': 200, 'SEO consultation': 300}"
            },
            {
                "role": "assistant",
                "text": "Great. Now, could you please confirm the date of earning submission in YYYY-MM-DD format?"
            },
            {
                "role": "user",
                "text": "The date of submission is '2022-07-14'."
            },
            {
                "role": "assistant",
                "text": "Perfect. I'm recording your earnings now and preparing them for review."
            }
        ],
        "function_call": {
            "function_name": "record_daily_earnings",
            "parameters": {
                "earnings": {
                    "website design": 500,
                    "logo design": 200,
                    "SEO consultation": 300
                },
                "submit_date": "2022-07-14"
            }
        }
    }
}
{
    "function_id": "ubereats-9",
    "task": "Monitor fuel level and find the nearest gas station if needed.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Monitor fuel level and find the nearest gas station if needed."
    },
    "snippet": "def monitor_fuel_and_locate_gas_station(\n    current_fuel_level: float,\n    fuel_consumption_rate: float,\n    current_location: Tuple[float, float]\n) -> Union[str, Dict[str, float]]:\n    \"\"\"\n    Monitors the current fuel level and returns the nearest gas station if needed.\n    \n    Parameters:\n        current_fuel_level (float): The current level of fuel in the tank.\n        fuel_consumption_rate (float): The rate at which the vehicle consumes fuel.\n        current_location (Tuple[float, float]): The current geographical location of the vehicle as a pair of GPS coordinates.\n        \n    Returns:\n        Union[str, Dict[str, float]]: If the fuel level is adequate, returns a string informing that no gas station is needed.\n                                       If the fuel level is low, returns a dictionary with 'gas_station_location' \n                                       as a key and the coordinates of the nearest gas station as a value.\n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def monitor_fuel_and_locate_gas_station(\n    current_fuel_level: float,\n    fuel_consumption_rate: float,\n    current_location: Tuple[float, float]\n) -> Union[str, Dict[str, float]]:\n    \"\"\"\n    Monitors the current fuel level and returns the nearest gas station if needed.\n    \n    Parameters:\n        current_fuel_level (float): The current level of fuel in the tank.\n        fuel_consumption_rate (float): The rate at which the vehicle consumes fuel.\n        current_location (Tuple[float, float]): The current geographical location of the vehicle as a pair of GPS coordinates.\n        \n    Returns:\n        Union[str, Dict[str, float]]: If the fuel level is adequate, returns a string informing that no gas station is needed.\n                                       If the fuel level is low, returns a dictionary with 'gas_station_location' \n                                       as a key and the coordinates of the nearest gas station as a value.\n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "monitor_fuel_and_locate_gas_station",
            "description": "Monitors the current fuel level and returns the nearest gas station if needed.",
            "parameters": {
                "type": "object",
                "properties": {
                    "current_fuel_level": {
                        "type": "float",
                        "description": "The current level of fuel in the tank."
                    },
                    "fuel_consumption_rate": {
                        "type": "float",
                        "description": "The rate at which the vehicle consumes fuel."
                    },
                    "current_location": {
                        "type": "Tuple",
                        "description": "The current geographical location of the vehicle as a pair of GPS coordinates.",
                        "items": {
                            "type": "float"
                        }
                    }
                },
                "required": [
                    "current_fuel_level",
                    "fuel_consumption_rate",
                    "current_location"
                ]
            },
            "returns": {
                "type": "Union",
                "description": "If the fuel level is adequate, returns a string informing that no gas station is needed. If the fuel level is low, returns a dictionary with 'gas_station_location' as a key and the coordinates of the nearest gas station as a value.",
                "items": {
                    "type": [
                        "str",
                        "Dict"
                    ],
                    "properties": {
                        "gas_station_location": {
                            "type": "Tuple",
                            "items": {
                                "type": "float"
                            }
                        }
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'monitor_fuel_and_locate_gas_station', 'description': 'Monitors the current fuel level and returns the nearest gas station if needed.', 'parameters': {'type': 'object', 'properties': {'current_fuel_level': {'type': 'float', 'description': 'The current level of fuel in the tank.'}, 'fuel_consumption_rate': {'type': 'float', 'description': 'The rate at which the vehicle consumes fuel.'}, 'current_location': {'type': 'Tuple', 'description': 'The current geographical location of the vehicle as a pair of GPS coordinates.', 'items': {'type': 'float'}}}, 'required': ['current_fuel_level', 'fuel_consumption_rate', 'current_location']}, 'returns': {'type': 'Union', 'description': \"If the fuel level is adequate, returns a string informing that no gas station is needed. If the fuel level is low, returns a dictionary with 'gas_station_location' as a key and the coordinates of the nearest gas station as a value.\", 'items': {'type': ['str', 'Dict'], 'properties': {'gas_station_location': {'type': 'Tuple', 'items': {'type': 'float'}}}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": "{\n    \"conversation\": \n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you check my current fuel level?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. Can you give me your current fuel level, fuel consumption rate and location?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my current fuel level is '50.5', fuel consumption rate is '3.0' and location is '(40.748817, -73.985428)'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Alright, I'm going to monitor your fuel level and locate the nearest gas station if needed.\"\n    }\n]\n,\n    \"function_call\": \n{\n    \"function_name\": \"monitor_fuel_and_locate_gas_station\",\n    \"parameters\": {\n        \"current_fuel_level\": 50.5,\n        \"fuel_consumption_rate\": 3.0,\n        \"current_location\": (40.748817, -73.985428)\n    }\n}\n\n}"
}
{
    "function_id": "ubereats-10",
    "task": "Update availability status (e.g., going offline, taking a break).",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Update availability status (e.g., going offline, taking a break)."
    },
    "snippet": "def update_availability_status(\n    user_id: int,\n    new_status: str\n) -> Dict[str, str]:\n    \"\"\"\n    Updates the availability status of a user and returns their updated status.\n\n    Parameters:\n        user_id (int): The id of the user to update their status.\n        new_status (str): The new status to be set for the user. Examples of status values are 'offline', 'online', 'break'.\n        \n    Returns:\n        Dict[str, str]: A dictionary with 'user_id' as a key and the updated status as a value.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def update_availability_status(\n    user_id: int,\n    new_status: str\n) -> Dict[str, str]:\n    \"\"\"\n    Updates the availability status of a user and returns their updated status.\n\n    Parameters:\n        user_id (int): The id of the user to update their status.\n        new_status (str): The new status to be set for the user. Examples of status values are 'offline', 'online', 'break'.\n        \n    Returns:\n        Dict[str, str]: A dictionary with 'user_id' as a key and the updated status as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "update_availability_status",
            "description": "Updates the availability status of a user and returns their updated status.",
            "parameters": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "integer",
                        "description": "The id of the user to update their status."
                    },
                    "new_status": {
                        "type": "string",
                        "description": "The new status to be set for the user. Examples of status values are 'offline', 'online', 'break'."
                    }
                },
                "required": [
                    "user_id",
                    "new_status"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "integer",
                        "description": "The id of the user whose status has been updated."
                    },
                    "status": {
                        "type": "string",
                        "description": "The updated status of the user."
                    }
                },
                "required": [
                    "user_id",
                    "status"
                ]
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'update_availability_status', 'description': 'Updates the availability status of a user and returns their updated status.', 'parameters': {'type': 'object', 'properties': {'user_id': {'type': 'integer', 'description': 'The id of the user to update their status.'}, 'new_status': {'type': 'string', 'description': \"The new status to be set for the user. Examples of status values are 'offline', 'online', 'break'.\"}}, 'required': ['user_id', 'new_status']}, 'returns': {'type': 'object', 'properties': {'user_id': {'type': 'integer', 'description': 'The id of the user whose status has been updated.'}, 'status': {'type': 'string', 'description': 'The updated status of the user.'}}, 'required': ['user_id', 'status']}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you change my availability status?"
            },
            {
                "role": "assistant",
                "text": "Of course, I'd be happy to assist. May I have your user ID please?"
            },
            {
                "role": "user",
                "text": "Yes, my user ID is '56834'."
            },
            {
                "role": "assistant",
                "text": "Great, and what status would you like me to set? It can be 'offline', 'online', or 'break'."
            },
            {
                "role": "user",
                "text": "Please set it to 'offline'."
            },
            {
                "role": "assistant",
                "text": "Alright, I'm updating your status to 'offline' now."
            }
        ],
        "function_call": {
            "function_name": "update_availability_status",
            "parameters": {
                "user_id": 56834,
                "new_status": "offline"
            }
        }
    }
}
{
    "function_id": "ubereats-11",
    "task": "Rate the restaurant based on the ease of the pickup process.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Rate the restaurant based on the ease of the pickup process."
    },
    "snippet": "def rate_pickup(\n    pickup_time: str,\n    wait_time: str,\n    staff_friendliness: int,\n    order_accuracy: int\n) -> Dict[str, float]:\n    \"\"\"\n    Rates the restaurant based on the ease of the pickup process.\n\n    Parameters:\n        pickup_time (str): The time the order was picked up in HH:MM:SS format.\n        wait_time (str): The time the customer waited for the order in HH:MM:SS format.\n        staff_friendliness (int): A rating for the friendliness of the staff on a scale of 1 to 10.\n        order_accuracy (int): A rating for the accuracy of the order on a scale of 1 to 10.\n        \n    Returns:\n        Dict[str, float]: A dictionary with 'pickup_rating' as a key and the calculated rating as a value.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def rate_pickup(\n    pickup_time: str,\n    wait_time: str,\n    staff_friendliness: int,\n    order_accuracy: int\n) -> Dict[str, float]:\n    \"\"\"\n    Rates the restaurant based on the ease of the pickup process.\n\n    Parameters:\n        pickup_time (str): The time the order was picked up in HH:MM:SS format.\n        wait_time (str): The time the customer waited for the order in HH:MM:SS format.\n        staff_friendliness (int): A rating for the friendliness of the staff on a scale of 1 to 10.\n        order_accuracy (int): A rating for the accuracy of the order on a scale of 1 to 10.\n        \n    Returns:\n        Dict[str, float]: A dictionary with 'pickup_rating' as a key and the calculated rating as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "rate_pickup",
            "description": "Rates the restaurant based on the ease of the pickup process.",
            "parameters": {
                "type": "object",
                "properties": {
                    "pickup_time": {
                        "type": "string",
                        "description": "The time the order was picked up in HH:MM:SS format."
                    },
                    "wait_time": {
                        "type": "string",
                        "description": "The time the customer waited for the order in HH:MM:SS format."
                    },
                    "staff_friendliness": {
                        "type": "integer",
                        "description": "A rating for the friendliness of the staff on a scale of 1 to 10."
                    },
                    "order_accuracy": {
                        "type": "integer",
                        "description": "A rating for the accuracy of the order on a scale of 1 to 10."
                    }
                },
                "required": [
                    "pickup_time",
                    "wait_time",
                    "staff_friendliness",
                    "order_accuracy"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "pickup_rating": {
                        "type": "float",
                        "description": "A dictionary with 'pickup_rating' as a key and the calculated rating as a value."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'rate_pickup', 'description': 'Rates the restaurant based on the ease of the pickup process.', 'parameters': {'type': 'object', 'properties': {'pickup_time': {'type': 'string', 'description': 'The time the order was picked up in HH:MM:SS format.'}, 'wait_time': {'type': 'string', 'description': 'The time the customer waited for the order in HH:MM:SS format.'}, 'staff_friendliness': {'type': 'integer', 'description': 'A rating for the friendliness of the staff on a scale of 1 to 10.'}, 'order_accuracy': {'type': 'integer', 'description': 'A rating for the accuracy of the order on a scale of 1 to 10.'}}, 'required': ['pickup_time', 'wait_time', 'staff_friendliness', 'order_accuracy']}, 'returns': {'type': 'object', 'properties': {'pickup_rating': {'type': 'float', 'description': \"A dictionary with 'pickup_rating' as a key and the calculated rating as a value.\"}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you rate my recent restaurant pickup experience?"
            },
            {
                "role": "assistant",
                "text": "Sure, I would need some information though. Can you provide the time your order was picked up and the time you waited for the order, both in the format of HH:MM:SS?"
            },
            {
                "role": "user",
                "text": "Sure, I picked up my order at 19:00:00 and I waited for it for about 00:10:00."
            },
            {
                "role": "assistant",
                "text": "Got it. Could you also rate the friendliness of the staff and the accuracy of your order on a scale of 1 to 10?"
            },
            {
                "role": "user",
                "text": "Yes, the staff were quite friendly, I would give them an 8. The order was absolutely accurate, that\u2019s a 10."
            },
            {
                "role": "assistant",
                "text": "Great. I have all the details, now let me calculate your pickup rating."
            }
        ],
        "function_call": {
            "function_name": "rate_pickup",
            "parameters": {
                "pickup_time": "19:00:00",
                "wait_time": "00:10:00",
                "staff_friendliness": 8,
                "order_accuracy": 10
            }
        }
    }
}
{
    "function_id": "ubereats-12",
    "task": "Rate the customer based on the ease of the delivery process.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Rate the customer based on the ease of the delivery process."
    },
    "snippet": "def rate_customer_based_on_delivery(\n    delivery_process: Dict[str, Union[str, int, float]]\n) -> Dict[str, float]:\n    \"\"\"\n    Rates the customer based on the ease of the delivery process.\n    \n    Parameters:\n        delivery_process (Dict[str, Union[str, int, float]]): A dictionary containing details about the delivery process.\n                                                              It should have the following keys 'customer_id', 'delivery_time' (in minutes),\n                                                              'distance' (in miles), 'product_quantity', and 'product_size' (small, medium, large).\n    \n    Returns:\n        Dict[str, float]: A dictionary with 'customer_id' as a key and the customer's rating as a value.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def rate_customer_based_on_delivery(\n    delivery_process: Dict[str, Union[str, int, float]]\n) -> Dict[str, float]:\n    \"\"\"\n    Rates the customer based on the ease of the delivery process.\n    \n    Parameters:\n        delivery_process (Dict[str, Union[str, int, float]]): A dictionary containing details about the delivery process.\n                                                              It should have the following keys 'customer_id', 'delivery_time' (in minutes),\n                                                              'distance' (in miles), 'product_quantity', and 'product_size' (small, medium, large).\n    \n    Returns:\n        Dict[str, float]: A dictionary with 'customer_id' as a key and the customer's rating as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "rate_customer_based_on_delivery",
            "description": "Rates the customer based on the ease of the delivery process.",
            "parameters": {
                "type": "object",
                "properties": {
                    "delivery_process": {
                        "type": "object",
                        "description": "A dictionary containing details about the delivery process. It should have the following keys 'customer_id', 'delivery_time' (in minutes), 'distance' (in miles), 'product_quantity', and 'product_size' (small, medium, large).",
                        "properties": {
                            "customer_id": {
                                "type": "string"
                            },
                            "delivery_time": {
                                "type": "integer"
                            },
                            "distance": {
                                "type": "float"
                            },
                            "product_quantity": {
                                "type": "integer"
                            },
                            "product_size": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "customer_id",
                            "delivery_time",
                            "distance",
                            "product_quantity",
                            "product_size"
                        ]
                    }
                },
                "required": [
                    "delivery_process"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "customer_id": {
                        "type": "string",
                        "description": "A dictionary with 'customer_id' as a key and the customer's rating as a value."
                    },
                    "rating": {
                        "type": "float",
                        "description": "The rating of the customer based on the delivery parameters."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'rate_customer_based_on_delivery', 'description': 'Rates the customer based on the ease of the delivery process.', 'parameters': {'type': 'object', 'properties': {'delivery_process': {'type': 'object', 'description': \"A dictionary containing details about the delivery process. It should have the following keys 'customer_id', 'delivery_time' (in minutes), 'distance' (in miles), 'product_quantity', and 'product_size' (small, medium, large).\", 'properties': {'customer_id': {'type': 'string'}, 'delivery_time': {'type': 'integer'}, 'distance': {'type': 'float'}, 'product_quantity': {'type': 'integer'}, 'product_size': {'type': 'string'}}, 'required': ['customer_id', 'delivery_time', 'distance', 'product_quantity', 'product_size']}}, 'required': ['delivery_process']}, 'returns': {'type': 'object', 'properties': {'customer_id': {'type': 'string', 'description': \"A dictionary with 'customer_id' as a key and the customer's rating as a value.\"}, 'rating': {'type': 'float', 'description': 'The rating of the customer based on the delivery parameters.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you rate my performance as a customer based on my recent delivery?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can help with that. Could you please provide me with the details of the delivery?"
            },
            {
                "role": "user",
                "text": "Yes, my customer_id is '12345', the delivery_time was '30' minutes, distance covered was '10.5' miles, I ordered '2' items, and the product size was 'medium'."
            },
            {
                "role": "assistant",
                "text": "Great, I am now computing your rating based on the delivery details."
            }
        ],
        "function_call": {
            "function_name": "rate_customer_based_on_delivery",
            "parameters": {
                "delivery_process": {
                    "customer_id": "12345",
                    "delivery_time": 30,
                    "distance": 10.5,
                    "product_quantity": 2,
                    "product_size": "medium"
                }
            }
        }
    }
}
{
    "function_id": "ubereats-13",
    "task": "Review customer feedback and ratings.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Review customer feedback and ratings."
    },
    "snippet": "def review_customer_feedback(\n    feedback: List[Dict[str, Union[str, int]]],\n) -> Dict[str, float]:\n    \"\"\"\n    Reviews customer feedback and ratings, and returns average rating and feedback counts.\n    \n    Parameters:\n        feedback (List[Dict[str, Union[str, int]]]): A list of dictionaries where each dictionary represents a \n                                                      customer's feedback and rating. According to the data structure, \n                                                      each dictionary should have 'comment' as a string and 'rating' \n                                                      as an integer (1-5).\n                                                      \n    Returns:\n        Dict[str, float]: A dictionary with 'average_rating' as a key and the average rating as a value,\n                          'feedback_count' as a key and the count of total feedback received as a value.\n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def review_customer_feedback(\n    feedback: List[Dict[str, Union[str, int]]],\n) -> Dict[str, float]:\n    \"\"\"\n    Reviews customer feedback and ratings, and returns average rating and feedback counts.\n    \n    Parameters:\n        feedback (List[Dict[str, Union[str, int]]]): A list of dictionaries where each dictionary represents a \n                                                      customer's feedback and rating. According to the data structure, \n                                                      each dictionary should have 'comment' as a string and 'rating' \n                                                      as an integer (1-5).\n                                                      \n    Returns:\n        Dict[str, float]: A dictionary with 'average_rating' as a key and the average rating as a value,\n                          'feedback_count' as a key and the count of total feedback received as a value.\n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "review_customer_feedback",
            "description": "Reviews customer feedback and ratings, and returns average rating and feedback counts.",
            "parameters": {
                "type": "object",
                "properties": {
                    "feedback": {
                        "type": "array",
                        "description": "A list of dictionaries where each dictionary represents a customer's feedback and rating. Each dictionary should have 'comment' as a string and 'rating' as an integer (1-5).",
                        "items": {
                            "type": "object",
                            "properties": {
                                "comment": {
                                    "type": "string"
                                },
                                "rating": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "comment",
                                "rating"
                            ]
                        }
                    }
                },
                "required": [
                    "feedback"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "average_rating": {
                        "type": "float",
                        "description": "The average rating of the feedbacks."
                    },
                    "feedback_count": {
                        "type": "float",
                        "description": "The count of total feedback received."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'review_customer_feedback', 'description': 'Reviews customer feedback and ratings, and returns average rating and feedback counts.', 'parameters': {'type': 'object', 'properties': {'feedback': {'type': 'array', 'description': \"A list of dictionaries where each dictionary represents a customer's feedback and rating. Each dictionary should have 'comment' as a string and 'rating' as an integer (1-5).\", 'items': {'type': 'object', 'properties': {'comment': {'type': 'string'}, 'rating': {'type': 'integer'}}, 'required': ['comment', 'rating']}}}, 'required': ['feedback']}, 'returns': {'type': 'object', 'properties': {'average_rating': {'type': 'float', 'description': 'The average rating of the feedbacks.'}, 'feedback_count': {'type': 'float', 'description': 'The count of total feedback received.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you review the customer feedback and ratings for me?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Can you provide me with the feedback data?"
            },
            {
                "role": "user",
                "text": "Yes, here is the feedback data."
            },
            {
                "role": "assistant",
                "text": "Great, I'm reviewing the customer feedback and ratings now."
            }
        ],
        "function_call": {
            "function_name": "review_customer_feedback",
            "parameters": {
                "feedback": [
                    {
                        "comment": "Good product",
                        "rating": 4
                    },
                    {
                        "comment": "Excellent service",
                        "rating": 5
                    },
                    {
                        "comment": "Could be better",
                        "rating": 3
                    }
                ]
            }
        }
    }
}
{
    "function_id": "ubereats-14",
    "task": "Contact support for resolving any disputes or issues.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Contact support for resolving any disputes or issues."
    },
    "snippet": "def contact_support_for_dispute_resolution(\n    dispute_id: str,\n    user_id: str,\n    issue_details: str,\n    communication_channel: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Contacts support for resolving any disputes or issues.\n    \n    Parameters:\n        dispute_id (str): The unique identifier of the dispute.\n        user_id (str): The unique identifier of the user raising the dispute.\n        issue_details (str): Description of the dispute or problem faced by the user.\n        communication_channel (str): The preferred communication channel (email, phone, in-app chat).\n  \n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key and the current status of the dispute resolution as a value.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def contact_support_for_dispute_resolution(\n    dispute_id: str,\n    user_id: str,\n    issue_details: str,\n    communication_channel: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Contacts support for resolving any disputes or issues.\n    \n    Parameters:\n        dispute_id (str): The unique identifier of the dispute.\n        user_id (str): The unique identifier of the user raising the dispute.\n        issue_details (str): Description of the dispute or problem faced by the user.\n        communication_channel (str): The preferred communication channel (email, phone, in-app chat).\n  \n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key and the current status of the dispute resolution as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "contact_support_for_dispute_resolution",
            "description": "Contacts support for resolving any disputes or issues.",
            "parameters": {
                "type": "object",
                "properties": {
                    "dispute_id": {
                        "type": "string",
                        "description": "The unique identifier of the dispute."
                    },
                    "user_id": {
                        "type": "string",
                        "description": "The unique identifier of the user raising the dispute."
                    },
                    "issue_details": {
                        "type": "string",
                        "description": "Description of the dispute or problem faced by the user."
                    },
                    "communication_channel": {
                        "type": "string",
                        "description": "The preferred communication channel (email, phone, in-app chat)."
                    }
                },
                "required": [
                    "dispute_id",
                    "user_id",
                    "issue_details",
                    "communication_channel"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "The current status of the dispute resolution."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'contact_support_for_dispute_resolution', 'description': 'Contacts support for resolving any disputes or issues.', 'parameters': {'type': 'object', 'properties': {'dispute_id': {'type': 'string', 'description': 'The unique identifier of the dispute.'}, 'user_id': {'type': 'string', 'description': 'The unique identifier of the user raising the dispute.'}, 'issue_details': {'type': 'string', 'description': 'Description of the dispute or problem faced by the user.'}, 'communication_channel': {'type': 'string', 'description': 'The preferred communication channel (email, phone, in-app chat).'}}, 'required': ['dispute_id', 'user_id', 'issue_details', 'communication_channel']}, 'returns': {'type': 'object', 'properties': {'status': {'type': 'string', 'description': 'The current status of the dispute resolution.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, I have an issue that needs resolving. Can you contact support for me?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. May I have the dispute ID?"
            },
            {
                "role": "user",
                "text": "Yes, the dispute ID is 'D1234'."
            },
            {
                "role": "assistant",
                "text": "Noted down the dispute ID. Could you please provide me with your user ID?"
            },
            {
                "role": "user",
                "text": "My user ID is 'U5678'."
            },
            {
                "role": "assistant",
                "text": "Great, and could you briefly describe the problem or the dispute you are facing?"
            },
            {
                "role": "user",
                "text": "I have been incorrectly charged for a service I didn't use."
            },
            {
                "role": "assistant",
                "text": "Thank you for the details. One more thing, which communication channel you would prefer for resolution? Email, phone or in-app chat?"
            },
            {
                "role": "user",
                "text": "I would prefer an email."
            },
            {
                "role": "assistant",
                "text": "Great, I'm contacting the support for dispute resolution now."
            }
        ],
        "function_call": {
            "function_name": "contact_support_for_dispute_resolution",
            "parameters": {
                "dispute_id": "D1234",
                "user_id": "U5678",
                "issue_details": "I have been incorrectly charged for a service I didn't use.",
                "communication_channel": "Email"
            }
        }
    }
}
{
    "function_id": "ubereats-15",
    "task": "Submit receipts for any work-related expenses for reimbursement.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Submit receipts for any work-related expenses for reimbursement."
    },
    "snippet": "def submit_expense_receipts(\n    employee_id: str,\n    expense_items: List[Dict[str, Union[str, float]]]\n) -> Dict[str, str]:\n    \"\"\"\n    Submits work-related expense receipts for reimbursement and returns the response.\n\n    Parameters:\n        employee_id (str): The ID of the employee submitting the receipts.\n        expense_items (List[Dict[str, Union[str, float]]]): A list of dictionaries each representing an expense. \n        Each dictionary should have 'expense_date', 'expense_type', 'description' and 'amount' keys.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'response_id' as key and the id of the response as value, also 'status' as\n        key and the status of the submission as value.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def submit_expense_receipts(\n    employee_id: str,\n    expense_items: List[Dict[str, Union[str, float]]]\n) -> Dict[str, str]:\n    \"\"\"\n    Submits work-related expense receipts for reimbursement and returns the response.\n\n    Parameters:\n        employee_id (str): The ID of the employee submitting the receipts.\n        expense_items (List[Dict[str, Union[str, float]]]): A list of dictionaries each representing an expense. \n        Each dictionary should have 'expense_date', 'expense_type', 'description' and 'amount' keys.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'response_id' as key and the id of the response as value, also 'status' as\n        key and the status of the submission as value.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "submit_expense_receipts",
            "description": "Submits work-related expense receipts for reimbursement and returns the response.",
            "parameters": {
                "type": "object",
                "properties": {
                    "employee_id": {
                        "type": "string",
                        "description": "The ID of the employee submitting the receipts."
                    },
                    "expense_items": {
                        "type": "array",
                        "description": "A list of dictionaries each representing an expense. Each dictionary should have 'expense_date', 'expense_type', 'description' and 'amount' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "expense_date": {
                                    "type": "string"
                                },
                                "expense_type": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                },
                                "amount": {
                                    "type": "float"
                                }
                            },
                            "required": [
                                "expense_date",
                                "expense_type",
                                "description",
                                "amount"
                            ]
                        }
                    }
                },
                "required": [
                    "employee_id",
                    "expense_items"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "response_id": {
                        "type": "string",
                        "description": "The id of the submitted expense."
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the expense submission."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'submit_expense_receipts', 'description': 'Submits work-related expense receipts for reimbursement and returns the response.', 'parameters': {'type': 'object', 'properties': {'employee_id': {'type': 'string', 'description': 'The ID of the employee submitting the receipts.'}, 'expense_items': {'type': 'array', 'description': \"A list of dictionaries each representing an expense. Each dictionary should have 'expense_date', 'expense_type', 'description' and 'amount' keys.\", 'items': {'type': 'object', 'properties': {'expense_date': {'type': 'string'}, 'expense_type': {'type': 'string'}, 'description': {'type': 'string'}, 'amount': {'type': 'float'}}, 'required': ['expense_date', 'expense_type', 'description', 'amount']}}}, 'required': ['employee_id', 'expense_items']}, 'returns': {'type': 'object', 'properties': {'response_id': {'type': 'string', 'description': 'The id of the submitted expense.'}, 'status': {'type': 'string', 'description': 'The status of the expense submission.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": "{\n    \"conversation\": \n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, I need to submit my work-related expense receipts for reimbursement.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can assist with that. Can you provide your employee ID please?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my employee ID is 'EMP12345'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, please provide the details of your expenses. Kindly make sure each expense contains an expense date, expense type, a description, and the amount.\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Sure, here they are: [{'expense_date': '2022-01-01', 'expense_type': 'Travel', 'description': 'Hotel Accommodation', 'amount': 150.00}, {'expense_date': '2022-01-02', 'expense_type': 'Meals', 'description': 'Lunch with Clients', 'amount': 60.00}]\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Thanks, I'm submitting your work-related expense receipts for reimbursement now.\"\n    }\n]\n,\n    \"function_call\": \n{\n    \"function_name\": \"submit_expense_receipts\",\n    \"parameters\": {\n        \"employee_id\": \"EMP12345\",\n        \"expense_items\": [{'expense_date': '2022-01-01', 'expense_type': 'Travel', 'description': 'Hotel Accommodation', 'amount': 150.00}, {'expense_date': '2022-01-02', 'expense_type': 'Meals', 'description': 'Lunch with Clients', 'amount': 60.00}]\n    }\n}\n\n}"
}
{
    "function_id": "ubereats-16",
    "task": "View and accept any promotional tasks or bonus opportunities.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "View and accept any promotional tasks or bonus opportunities."
    },
    "snippet": "def view_and_accept_promotions(\n    available_promotions: List[Dict[str, Any]],\n) -> List[Dict[str, Any]]:\n    \"\"\"\n    Checks and accepts any available promotional tasks or bonus opportunities and returns them.\n    \n    Parameters:\n        available_promotions (List[Dict[str, Any]]): A list of dictionaries containing available promotions.\n                                                      Each dictionary should have 'promotion_name' and 'details' \n                                                      keys at a minimum. Other keys are optional and can vary \n                                                      depending on the promotion type.\n                                          \n    Returns:\n        List[Dict[str, Any]]: A list of dictionaries with accepted promotion details.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def view_and_accept_promotions(\n    available_promotions: List[Dict[str, Any]],\n) -> List[Dict[str, Any]]:\n    \"\"\"\n    Checks and accepts any available promotional tasks or bonus opportunities and returns them.\n    \n    Parameters:\n        available_promotions (List[Dict[str, Any]]): A list of dictionaries containing available promotions.\n                                                      Each dictionary should have 'promotion_name' and 'details' \n                                                      keys at a minimum. Other keys are optional and can vary \n                                                      depending on the promotion type.\n                                          \n    Returns:\n        List[Dict[str, Any]]: A list of dictionaries with accepted promotion details.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "view_and_accept_promotions",
            "description": "Checks and accepts any available promotional tasks or bonus opportunities and returns them.",
            "parameters": {
                "type": "object",
                "properties": {
                    "available_promotions": {
                        "type": "array",
                        "description": "A list of dictionaries containing available promotions. Each dictionary should have 'promotion_name' and 'details' keys at a minimum. Other keys are optional and can vary depending on the promotion type.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "promotion_name": {
                                    "type": "string"
                                },
                                "details": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "promotion_name",
                                "details"
                            ]
                        }
                    }
                },
                "required": [
                    "available_promotions"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "accepted_promotions": {
                        "type": "array",
                        "description": "A list of dictionaries with accepted promotion details.",
                        "items": {
                            "type": "object",
                            "description": "Each object represents a promotional deal that has been accepted. The details of the promotion are within each object."
                        }
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'view_and_accept_promotions', 'description': 'Checks and accepts any available promotional tasks or bonus opportunities and returns them.', 'parameters': {'type': 'object', 'properties': {'available_promotions': {'type': 'array', 'description': \"A list of dictionaries containing available promotions. Each dictionary should have 'promotion_name' and 'details' keys at a minimum. Other keys are optional and can vary depending on the promotion type.\", 'items': {'type': 'object', 'properties': {'promotion_name': {'type': 'string'}, 'details': {'type': 'string'}}, 'required': ['promotion_name', 'details']}}}, 'required': ['available_promotions']}, 'returns': {'type': 'object', 'properties': {'accepted_promotions': {'type': 'array', 'description': 'A list of dictionaries with accepted promotion details.', 'items': {'type': 'object', 'description': 'Each object represents a promotional deal that has been accepted. The details of the promotion are within each object.'}}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you check if there are any new promotions I can accept?"
            },
            {
                "role": "assistant",
                "text": "Sure, let me check for any available promotions for you."
            },
            {
                "role": "assistant",
                "text": "I found some promotional tasks and bonus opportunities that you might be interested in."
            },
            {
                "role": "user",
                "text": "Great, please accept them on my behalf."
            },
            {
                "role": "assistant",
                "text": "Okay, I have accepted all the available promotions for you."
            }
        ],
        "function_call": {
            "function_name": "view_and_accept_promotions",
            "parameters": {
                "available_promotions": [
                    "Promotion 1",
                    "Promotion 2",
                    "Promotion 3"
                ]
            }
        }
    }
}
{
    "function_id": "ubereats-18",
    "task": "Keep track of miles driven for tax purposes.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Keep track of miles driven for tax purposes."
    },
    "snippet": "def track_miles_driven(\n    vehicle_id: str,\n    start_mileage: int,\n    end_mileage: int,\n    date_driven: str,\n) -> Dict[str, Union[str, int]]:\n    \"\"\"\n    Tracks the miles driven for a specific vehicle and date, useful for tax purposes.\n    \n    Parameters:\n        vehicle_id (str): The identifier of the vehicle.\n        start_mileage (int): The mileage at the start of the tour.\n        end_mileage (int): The mileage at the end of the tour.\n        date_driven (str): The date when the mileage was recorded in YYYY-MM-DD format.\n                          \n    Returns:\n        Dict[str, Union[str, int]]: A dictionary with keys 'vehicle_id', 'miles_driven' and 'date_driven', \n                                     and their corresponding values.\n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def track_miles_driven(\n    vehicle_id: str,\n    start_mileage: int,\n    end_mileage: int,\n    date_driven: str,\n) -> Dict[str, Union[str, int]]:\n    \"\"\"\n    Tracks the miles driven for a specific vehicle and date, useful for tax purposes.\n    \n    Parameters:\n        vehicle_id (str): The identifier of the vehicle.\n        start_mileage (int): The mileage at the start of the tour.\n        end_mileage (int): The mileage at the end of the tour.\n        date_driven (str): The date when the mileage was recorded in YYYY-MM-DD format.\n                          \n    Returns:\n        Dict[str, Union[str, int]]: A dictionary with keys 'vehicle_id', 'miles_driven' and 'date_driven', \n                                     and their corresponding values.\n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "track_miles_driven",
            "description": "Tracks the miles driven for a specific vehicle and date, useful for tax purposes.",
            "parameters": {
                "type": "object",
                "properties": {
                    "vehicle_id": {
                        "type": "string",
                        "description": "The identifier of the vehicle."
                    },
                    "start_mileage": {
                        "type": "integer",
                        "description": "The mileage at the start of the tour."
                    },
                    "end_mileage": {
                        "type": "integer",
                        "description": "The mileage at the end of the tour."
                    },
                    "date_driven": {
                        "type": "string",
                        "description": "The date when the mileage was recorded in YYYY-MM-DD format."
                    }
                },
                "required": [
                    "vehicle_id",
                    "start_mileage",
                    "end_mileage",
                    "date_driven"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "vehicle_id": {
                        "type": "string",
                        "description": "The identifier of the vehicle."
                    },
                    "miles_driven": {
                        "type": "integer",
                        "description": "The number of miles driven."
                    },
                    "date_driven": {
                        "type": "string",
                        "description": "The date when the mileage was recorded in YYYY-MM-DD format."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'track_miles_driven', 'description': 'Tracks the miles driven for a specific vehicle and date, useful for tax purposes.', 'parameters': {'type': 'object', 'properties': {'vehicle_id': {'type': 'string', 'description': 'The identifier of the vehicle.'}, 'start_mileage': {'type': 'integer', 'description': 'The mileage at the start of the tour.'}, 'end_mileage': {'type': 'integer', 'description': 'The mileage at the end of the tour.'}, 'date_driven': {'type': 'string', 'description': 'The date when the mileage was recorded in YYYY-MM-DD format.'}}, 'required': ['vehicle_id', 'start_mileage', 'end_mileage', 'date_driven']}, 'returns': {'type': 'object', 'properties': {'vehicle_id': {'type': 'string', 'description': 'The identifier of the vehicle.'}, 'miles_driven': {'type': 'integer', 'description': 'The number of miles driven.'}, 'date_driven': {'type': 'string', 'description': 'The date when the mileage was recorded in YYYY-MM-DD format.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you track my vehicle's mileage for tax purposes?"
            },
            {
                "role": "assistant",
                "text": "Of course, I can assist with that. Could you please share your vehicle ID, the start and end mileages, and the date you're referencing? Please use the format YYYY-MM-DD for the date."
            },
            {
                "role": "user",
                "text": "Sure, the vehicle ID is 'VHL1234'. The start mileage was 15000, the end mileage was 15200, and the date was '2022-01-01'."
            },
            {
                "role": "assistant",
                "text": "Great, I'm now tracking the miles driven for your specified vehicle and date."
            }
        ],
        "function_call": {
            "function_name": "track_miles_driven",
            "parameters": {
                "vehicle_id": "VHL1234",
                "start_mileage": 15000,
                "end_mileage": 15200,
                "date_driven": "2022-01-01"
            }
        }
    }
}
