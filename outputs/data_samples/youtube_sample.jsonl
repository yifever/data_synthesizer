{
    "function_id": "youtube-1",
    "task": "Upload a video file as a video to a YouTube channel.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Upload a video file as a video to a YouTube channel."
    },
    "snippet": "def upload_video(\n    video_file: str,\n    title: str,\n    description: str,\n    tags: List[str],\n    category_id: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Uploads a video file to a YouTube channel and returns video id.\n\n    Parameters:\n        video_file (str): The path to the video file to upload.\n        title (str): The title of the video.\n        description (str): A brief description of the video.\n        tags (List[str]): A list of tags associated with the video.\n        category_id (str): The ID of the video's category.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'video_id' as a key and the uploaded video's id as value.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def upload_video(\n    video_file: str,\n    title: str,\n    description: str,\n    tags: List[str],\n    category_id: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Uploads a video file to a YouTube channel and returns video id.\n\n    Parameters:\n        video_file (str): The path to the video file to upload.\n        title (str): The title of the video.\n        description (str): A brief description of the video.\n        tags (List[str]): A list of tags associated with the video.\n        category_id (str): The ID of the video's category.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'video_id' as a key and the uploaded video's id as value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "upload_video",
            "description": "Uploads a video file to a YouTube channel and returns video id.",
            "parameters": {
                "type": "object",
                "properties": {
                    "video_file": {
                        "type": "string",
                        "description": "The path to the video file to upload."
                    },
                    "title": {
                        "type": "string",
                        "description": "The title of the video."
                    },
                    "description": {
                        "type": "string",
                        "description": "A brief description of the video."
                    },
                    "tags": {
                        "type": "array",
                        "description": "A list of tags associated with the video.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "category_id": {
                        "type": "string",
                        "description": "The ID of the video's category."
                    }
                },
                "required": [
                    "video_file",
                    "title",
                    "description",
                    "tags",
                    "category_id"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "video_id": {
                        "type": "string",
                        "description": "The id of the uploaded video."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'upload_video', 'description': 'Uploads a video file to a YouTube channel and returns video id.', 'parameters': {'type': 'object', 'properties': {'video_file': {'type': 'string', 'description': 'The path to the video file to upload.'}, 'title': {'type': 'string', 'description': 'The title of the video.'}, 'description': {'type': 'string', 'description': 'A brief description of the video.'}, 'tags': {'type': 'array', 'description': 'A list of tags associated with the video.', 'items': {'type': 'string'}}, 'category_id': {'type': 'string', 'description': \"The ID of the video's category.\"}}, 'required': ['video_file', 'title', 'description', 'tags', 'category_id']}, 'returns': {'type': 'object', 'properties': {'video_id': {'type': 'string', 'description': 'The id of the uploaded video.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you upload this video to my YouTube channel?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Can you provide me the path to the video file?"
            },
            {
                "role": "user",
                "text": "Yes, the file is located at '/User/John/myvideo.mp4'."
            },
            {
                "role": "assistant",
                "text": "Great. Can you also give me the title, a brief description, the category ID and some tags for the video?"
            },
            {
                "role": "user",
                "text": "Sure. The title is 'My summer vacation', description is 'This is a video of my summer vacation in Spain.', category ID is '22', and you can use the tags 'vacation', 'summer', 'Spain'."
            },
            {
                "role": "assistant",
                "text": "Okay, I have all the details needed. I'll upload the video now."
            }
        ],
        "function_call": {
            "function_name": "upload_video",
            "parameters": {
                "video_file": "/User/John/myvideo.mp4",
                "title": "My summer vacation",
                "description": "This is a video of my summer vacation in Spain.",
                "tags": [
                    "vacation",
                    "summer",
                    "Spain"
                ],
                "category_id": "22"
            }
        }
    }
}
{
    "function_id": "youtube-2",
    "task": "Delete a specific video from a channel.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Delete a specific video from a channel."
    },
    "snippet": "def delete_video(channel_id: str, video_id: str) -> str:\n    \"\"\"\n    Deletes a specific video from a specific channel.\n\n    Parameters:\n        channel_id (str): The id of the channel.\n        video_id (str): The id of the video to be deleted.\n\n    Returns:\n        str: A string message indicating the result of the deletion.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def delete_video(channel_id: str, video_id: str) -> str:\n    \"\"\"\n    Deletes a specific video from a specific channel.\n\n    Parameters:\n        channel_id (str): The id of the channel.\n        video_id (str): The id of the video to be deleted.\n\n    Returns:\n        str: A string message indicating the result of the deletion.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "delete_video",
            "description": "Deletes a specific video from a specific channel.",
            "parameters": {
                "type": "object",
                "properties": {
                    "channel_id": {
                        "type": "string",
                        "description": "The id of the channel."
                    },
                    "video_id": {
                        "type": "string",
                        "description": "The id of the video to be deleted."
                    }
                },
                "required": [
                    "channel_id",
                    "video_id"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "A string message indicating the result of the deletion."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'delete_video', 'description': 'Deletes a specific video from a specific channel.', 'parameters': {'type': 'object', 'properties': {'channel_id': {'type': 'string', 'description': 'The id of the channel.'}, 'video_id': {'type': 'string', 'description': 'The id of the video to be deleted.'}}, 'required': ['channel_id', 'video_id']}, 'returns': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'A string message indicating the result of the deletion.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you delete a video from my channel?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Can you please share the channel_id and the video_id that needs to be deleted?"
            },
            {
                "role": "user",
                "text": "Sure, my channel_id is '12345' and video_id is '67890'."
            },
            {
                "role": "assistant",
                "text": "All set. I'm deleting the video from your channel now."
            }
        ],
        "function_call": {
            "function_name": "delete_video",
            "parameters": {
                "channel_id": "12345",
                "video_id": "67890"
            }
        }
    }
}
{
    "function_id": "youtube-3",
    "task": "Edit video details such as title, description, and tags.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Edit video details such as title, description, and tags."
    },
    "snippet": "```python\ndef edit_video_details(\n    video_id: str,\n    new_title: str,\n    new_description: str,\n    new_tags: List[str]\n) -> None:\n    \"\"\"\n    Edits an existing video's details including title, description, and tags.\n    \n    Parameters:\n        video_id (str): The ID of the video to edit.\n        new_title(str): The new title for the video.\n        new_description(str): The new description for the video.\n        new_tags (List[str]): A list of new tags for the video.\n        \n    Returns:\n        None\n    \"\"\"\n```",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "```python\ndef edit_video_details(\n    video_id: str,\n    new_title: str,\n    new_description: str,\n    new_tags: List[str]\n) -> None:\n    \"\"\"\n    Edits an existing video's details including title, description, and tags.\n    \n    Parameters:\n        video_id (str): The ID of the video to edit.\n        new_title(str): The new title for the video.\n        new_description(str): The new description for the video.\n        new_tags (List[str]): A list of new tags for the video.\n        \n    Returns:\n        None\n    \"\"\"\n```",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "edit_video_details",
            "description": "Edits an existing video's details including title, description, and tags.",
            "parameters": {
                "type": "object",
                "properties": {
                    "video_id": {
                        "type": "string",
                        "description": "The ID of the video to edit."
                    },
                    "new_title": {
                        "type": "string",
                        "description": "The new title for the video."
                    },
                    "new_description": {
                        "type": "string",
                        "description": "The new description for the video."
                    },
                    "new_tags": {
                        "type": "array",
                        "description": "A list of new tags for the video.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "video_id",
                    "new_title",
                    "new_description",
                    "new_tags"
                ]
            },
            "returns": {
                "type": "null",
                "description": "The function returns no value."
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'edit_video_details', 'description': \"Edits an existing video's details including title, description, and tags.\", 'parameters': {'type': 'object', 'properties': {'video_id': {'type': 'string', 'description': 'The ID of the video to edit.'}, 'new_title': {'type': 'string', 'description': 'The new title for the video.'}, 'new_description': {'type': 'string', 'description': 'The new description for the video.'}, 'new_tags': {'type': 'array', 'description': 'A list of new tags for the video.', 'items': {'type': 'string'}}}, 'required': ['video_id', 'new_title', 'new_description', 'new_tags']}, 'returns': {'type': 'null', 'description': 'The function returns no value.'}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you help me change some things in my video?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Can I have the video's ID and the new title, description, and tags you'd like to use?"
            },
            {
                "role": "user",
                "text": "The video ID is '123456'. The new title should be 'Epic Adventure', the new description 'Join me on an epic adventure through the wild', and for tags use 'adventure', 'wilderness', and 'journey'."
            },
            {
                "role": "assistant",
                "text": "Thank you, I'm updating your video details now."
            }
        ],
        "function_call": {
            "function_name": "edit_video_details",
            "parameters": {
                "video_id": "123456",
                "new_title": "Epic Adventure",
                "new_description": "Join me on an epic adventure through the wild",
                "new_tags": [
                    "adventure",
                    "wilderness",
                    "journey"
                ]
            }
        }
    }
}
{
    "function_id": "youtube-5",
    "task": "Generate new playlists for categorizing videos.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Generate new playlists for categorizing videos."
    },
    "snippet": "def generate_playlists(\n    video_categories: List[str],\n    video_details: List[Dict[str, str]]\n) -> Dict[str, List[str]]:\n    \"\"\"\n    Generates playlists for categorizing videos.\n    \n    Parameters:\n        video_categories (List[str]): A list of video categories to create playlists for.\n        video_details (List[Dict[str, str]]): A list of dictionaries each containing video details.\n                                               Each dictionary should have 'video_id' and 'category' keys.\n                                                  \n    Returns:\n        Dict[str, List[str]]: A dictionary with each category as a key and the associated video_ids as a value.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def generate_playlists(\n    video_categories: List[str],\n    video_details: List[Dict[str, str]]\n) -> Dict[str, List[str]]:\n    \"\"\"\n    Generates playlists for categorizing videos.\n    \n    Parameters:\n        video_categories (List[str]): A list of video categories to create playlists for.\n        video_details (List[Dict[str, str]]): A list of dictionaries each containing video details.\n                                               Each dictionary should have 'video_id' and 'category' keys.\n                                                  \n    Returns:\n        Dict[str, List[str]]: A dictionary with each category as a key and the associated video_ids as a value.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "generate_playlists",
            "description": "Generates playlists for categorizing videos.",
            "parameters": {
                "type": "object",
                "properties": {
                    "video_categories": {
                        "type": "array",
                        "description": "A list of video categories to create playlists for.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "video_details": {
                        "type": "array",
                        "description": "A list of dictionaries each containing video details. Each dictionary should have 'video_id' and 'category' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "video_id": {
                                    "type": "string"
                                },
                                "category": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "video_id",
                                "category"
                            ]
                        }
                    }
                },
                "required": [
                    "video_categories",
                    "video_details"
                ]
            },
            "returns": {
                "type": "object",
                "description": "A dictionary with each category as a key and the associated video_ids as a value.",
                "properties": {
                    "playlists": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'generate_playlists', 'description': 'Generates playlists for categorizing videos.', 'parameters': {'type': 'object', 'properties': {'video_categories': {'type': 'array', 'description': 'A list of video categories to create playlists for.', 'items': {'type': 'string'}}, 'video_details': {'type': 'array', 'description': \"A list of dictionaries each containing video details. Each dictionary should have 'video_id' and 'category' keys.\", 'items': {'type': 'object', 'properties': {'video_id': {'type': 'string'}, 'category': {'type': 'string'}}, 'required': ['video_id', 'category']}}}, 'required': ['video_categories', 'video_details']}, 'returns': {'type': 'object', 'description': 'A dictionary with each category as a key and the associated video_ids as a value.', 'properties': {'playlists': {'type': 'object', 'additionalProperties': {'type': 'array', 'items': {'type': 'string'}}}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you generate playlists based on my video categories?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. May I know what your video categories are?"
            },
            {
                "role": "user",
                "text": "Yes, my video categories are 'Comedy', 'Education' and 'Documentaries'."
            },
            {
                "role": "assistant",
                "text": "OK. Now, could you provide me with the details of your videos? I need 'video_id' and 'category' for each video."
            },
            {
                "role": "user",
                "text": "Sure, here they are. Video 1 is in 'Comedy' category with id '1234'. Video 2 is in 'Education' category with id '5678'. Video 3 is in 'Documentaries' category with id '91011'."
            },
            {
                "role": "assistant",
                "text": "Great, I'm generating your playlists now."
            }
        ],
        "function_call": {
            "function_name": "generate_playlists",
            "parameters": {
                "video_categories": [
                    "Comedy",
                    "Education",
                    "Documentaries"
                ],
                "video_details": [
                    {
                        "video_id": "1234",
                        "category": "Comedy"
                    },
                    {
                        "video_id": "5678",
                        "category": "Education"
                    },
                    {
                        "video_id": "91011",
                        "category": "Documentaries"
                    }
                ]
            }
        }
    }
}
{
    "function_id": "youtube-6",
    "task": "Insert specific videos into an existing playlist.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Insert specific videos into an existing playlist."
    },
    "snippet": "def insert_videos_into_playlist(\n    playlist_id: str,\n    video_ids: List[str],\n) -> str:\n    \"\"\"\n    Inserts specific videos into an existing playlist.\n    \n    Parameters:\n        playlist_id (str): The ID of the playlist to which videos should be inserted.\n        video_ids (List[str]): List of IDs of the videos to be inserted.\n\n    Returns:\n        str: A confirmation message that videos have been successfully inserted.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def insert_videos_into_playlist(\n    playlist_id: str,\n    video_ids: List[str],\n) -> str:\n    \"\"\"\n    Inserts specific videos into an existing playlist.\n    \n    Parameters:\n        playlist_id (str): The ID of the playlist to which videos should be inserted.\n        video_ids (List[str]): List of IDs of the videos to be inserted.\n\n    Returns:\n        str: A confirmation message that videos have been successfully inserted.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "insert_videos_into_playlist",
            "description": "Inserts specific videos into an existing playlist.",
            "parameters": {
                "type": "object",
                "properties": {
                    "playlist_id": {
                        "type": "string",
                        "description": "The ID of the playlist to which videos should be inserted."
                    },
                    "video_ids": {
                        "type": "array",
                        "description": "List of IDs of the videos to be inserted.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "playlist_id",
                    "video_ids"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "confirmation_message": {
                        "type": "string",
                        "description": "A confirmation message that videos have been successfully inserted."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'insert_videos_into_playlist', 'description': 'Inserts specific videos into an existing playlist.', 'parameters': {'type': 'object', 'properties': {'playlist_id': {'type': 'string', 'description': 'The ID of the playlist to which videos should be inserted.'}, 'video_ids': {'type': 'array', 'description': 'List of IDs of the videos to be inserted.', 'items': {'type': 'string'}}}, 'required': ['playlist_id', 'video_ids']}, 'returns': {'type': 'object', 'properties': {'confirmation_message': {'type': 'string', 'description': 'A confirmation message that videos have been successfully inserted.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you insert some videos into my existing playlist?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. May I know your playlist ID and the IDs of the videos you want to insert?"
            },
            {
                "role": "user",
                "text": "Yes, my playlist ID is '4987'. And the videos IDs are '1234', '5678', and '9012'."
            },
            {
                "role": "assistant",
                "text": "Great, I'm adding those videos to your playlist now."
            }
        ],
        "function_call": {
            "function_name": "insert_videos_into_playlist",
            "parameters": {
                "playlist_id": "4987",
                "video_ids": [
                    "1234",
                    "5678",
                    "9012"
                ]
            }
        }
    }
}
{
    "function_id": "youtube-7",
    "task": "Delete videos from a playlist.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Delete videos from a playlist."
    },
    "snippet": "def delete_videos_from_playlist(\n    playlist_id: str,\n    video_ids: List[str],\n) -> str:\n    \"\"\"\n    Deletes videos from a specific playlist.\n    \n    Parameters:\n        playlist_id (str): The id of the playlist from which videos need to be deleted.\n        video_ids (List[str]): A list of ids of videos to be deleted from the playlist.\n                                          \n    Returns:\n        str: A message indicating whether the deletion was successful or not.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def delete_videos_from_playlist(\n    playlist_id: str,\n    video_ids: List[str],\n) -> str:\n    \"\"\"\n    Deletes videos from a specific playlist.\n    \n    Parameters:\n        playlist_id (str): The id of the playlist from which videos need to be deleted.\n        video_ids (List[str]): A list of ids of videos to be deleted from the playlist.\n                                          \n    Returns:\n        str: A message indicating whether the deletion was successful or not.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "delete_videos_from_playlist",
            "description": "Deletes videos from a specific playlist.",
            "parameters": {
                "type": "object",
                "properties": {
                    "playlist_id": {
                        "type": "string",
                        "description": "The id of the playlist from which videos need to be deleted."
                    },
                    "video_ids": {
                        "type": "array",
                        "`description": "A list of ids of videos to be deleted from the playlist.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "playlist_id",
                    "video_ids"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "A message indicating whether the deletion was successful or not."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'delete_videos_from_playlist', 'description': 'Deletes videos from a specific playlist.', 'parameters': {'type': 'object', 'properties': {'playlist_id': {'type': 'string', 'description': 'The id of the playlist from which videos need to be deleted.'}, 'video_ids': {'type': 'array', '`description': 'A list of ids of videos to be deleted from the playlist.', 'items': {'type': 'string'}}}, 'required': ['playlist_id', 'video_ids']}, 'returns': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'A message indicating whether the deletion was successful or not.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you delete some videos from my playlist?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Can you please provide me the id of the playlist and also the ids of the videos that you want to delete?"
            },
            {
                "role": "user",
                "text": "Yes, my playlist id is '12345' and the video ids are '67890' and '23456'."
            },
            {
                "role": "assistant",
                "text": "Alright, I'm deleting the requested videos from your playlist now."
            }
        ],
        "function_call": {
            "function_name": "delete_videos_from_playlist",
            "parameters": {
                "playlist_id": "12345",
                "video_ids": [
                    "67890",
                    "23456"
                ]
            }
        }
    }
}
{
    "function_id": "youtube-9",
    "task": "Access analytics such as views, watch time, and subscriber count for specific videos.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Access analytics such as views, watch time, and subscriber count for specific videos."
    },
    "snippet": "def get_video_analytics(\n    video_id: str\n) -> Dict[str, Union[int, float]]:\n    \"\"\"\n    Accesses and returns video analytics such as views, watch time, and subscriber count for specific videos.\n\n    Parameters:\n        video_id (str): The unique identifier for the video.\n\n    Returns:\n        Dict[str, Union[int, float]]: A dictionary with keys as 'views', 'watch_time' and 'subscriber_count'.\n                                       The corresponding values represent the number of views, total watch time in hours, \n                                       and subscriber count respectively.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def get_video_analytics(\n    video_id: str\n) -> Dict[str, Union[int, float]]:\n    \"\"\"\n    Accesses and returns video analytics such as views, watch time, and subscriber count for specific videos.\n\n    Parameters:\n        video_id (str): The unique identifier for the video.\n\n    Returns:\n        Dict[str, Union[int, float]]: A dictionary with keys as 'views', 'watch_time' and 'subscriber_count'.\n                                       The corresponding values represent the number of views, total watch time in hours, \n                                       and subscriber count respectively.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "get_video_analytics",
            "description": "Accesses and returns video analytics such as views, watch time, and subscriber count for specific videos.",
            "parameters": {
                "type": "object",
                "properties": {
                    "video_id": {
                        "type": "string",
                        "description": "The unique identifier for the video."
                    }
                },
                "required": [
                    "video_id"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "views": {
                        "type": "integer or float",
                        "description": "The number of views."
                    },
                    "watch_time": {
                        "type": "integer or float",
                        "description": "Total watch time in hours."
                    },
                    "subscriber_count": {
                        "type": "integer or float",
                        "description": "Subscriber count."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'get_video_analytics', 'description': 'Accesses and returns video analytics such as views, watch time, and subscriber count for specific videos.', 'parameters': {'type': 'object', 'properties': {'video_id': {'type': 'string', 'description': 'The unique identifier for the video.'}}, 'required': ['video_id']}, 'returns': {'type': 'object', 'properties': {'views': {'type': 'integer or float', 'description': 'The number of views.'}, 'watch_time': {'type': 'integer or float', 'description': 'Total watch time in hours.'}, 'subscriber_count': {'type': 'integer or float', 'description': 'Subscriber count.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you show me the analytics for a specific video?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. May I know the video ID?"
            },
            {
                "role": "user",
                "text": "Yes, the video ID is 'abc123'."
            },
            {
                "role": "assistant",
                "text": "Great, I am getting the analytics for your video now."
            }
        ],
        "function_call": {
            "function_name": "get_video_analytics",
            "parameters": {
                "video_id": "abc123"
            }
        }
    }
}
{
    "function_id": "youtube-10",
    "task": "Acquire broader analytics for the entire channel.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Acquire broader analytics for the entire channel."
    },
    "snippet": "def acquire_broader_analytics_for_channel() -> Dict[str, Any]:\n    \"\"\"\n    Acquire broader analytics for the entire channel.\n\n    This function should be implemented to gather and analyze data across your channel.\n    It could include aspects such as viewer count, engagement rates, viewer demographics, etc.\n    Depending on your needs, you may need to interface with APIs or databases.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the analytics data for the channel.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def acquire_broader_analytics_for_channel() -> Dict[str, Any]:\n    \"\"\"\n    Acquire broader analytics for the entire channel.\n\n    This function should be implemented to gather and analyze data across your channel.\n    It could include aspects such as viewer count, engagement rates, viewer demographics, etc.\n    Depending on your needs, you may need to interface with APIs or databases.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the analytics data for the channel.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "acquire_broader_analytics_for_channel",
            "description": "Acquire broader analytics for the entire channel. This function should be implemented to gather and analyze data across your channel. It could include aspects such as viewer count, engagement rates, viewer demographics, etc. Depending on your needs, you may need to interface with APIs or databases.",
            "parameters": {},
            "returns": {
                "type": "object",
                "properties": {
                    "Dict[str, Any]": {
                        "type": "dictionary",
                        "description": "A dictionary containing the analytics data for the channel."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'acquire_broader_analytics_for_channel', 'description': 'Acquire broader analytics for the entire channel. This function should be implemented to gather and analyze data across your channel. It could include aspects such as viewer count, engagement rates, viewer demographics, etc. Depending on your needs, you may need to interface with APIs or databases.', 'parameters': {}, 'returns': {'type': 'object', 'properties': {'Dict[str, Any]': {'type': 'dictionary', 'description': 'A dictionary containing the analytics data for the channel.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you gather analytics data for my entire channel?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Gathering data now."
            }
        ],
        "function_call": {
            "function_name": "acquire_broader_analytics_for_channel",
            "parameters": {}
        }
    }
}
{
    "function_id": "youtube-11",
    "task": "Understand user engagement by capturing data on likes, dislikes, and comments.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Understand user engagement by capturing data on likes, dislikes, and comments."
    },
    "snippet": "def capture_user_engagement(\n    user_id: str,\n    likes: int,\n    dislikes: int,\n    comments: List[str],\n) -> Dict[str, Union[int, List[str]]]:\n    \"\"\"\n    Understand user engagement by capturing data on likes, dislikes, and comments.\n\n    Parameters:\n        user_id (str): The ID of the user.\n        likes (int): The number of likes from the user.\n        dislikes (int): The number of dislikes from the user.\n        comments (List[str]): A list of comments from the user.\n\n    Returns:\n        Dict[str, Union[int, List[str]]]: A dictionary containing likes, dislikes and comments data of the user.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def capture_user_engagement(\n    user_id: str,\n    likes: int,\n    dislikes: int,\n    comments: List[str],\n) -> Dict[str, Union[int, List[str]]]:\n    \"\"\"\n    Understand user engagement by capturing data on likes, dislikes, and comments.\n\n    Parameters:\n        user_id (str): The ID of the user.\n        likes (int): The number of likes from the user.\n        dislikes (int): The number of dislikes from the user.\n        comments (List[str]): A list of comments from the user.\n\n    Returns:\n        Dict[str, Union[int, List[str]]]: A dictionary containing likes, dislikes and comments data of the user.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "capture_user_engagement",
            "description": "Understand user engagement by capturing data on likes, dislikes, and comments.",
            "parameters": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "string",
                        "description": "The ID of the user."
                    },
                    "likes": {
                        "type": "integer",
                        "description": "The number of likes from the user."
                    },
                    "dislikes": {
                        "type": "integer",
                        "description": "The number of dislikes from the user."
                    },
                    "comments": {
                        "type": "array",
                        "description": "A list of comments from the user.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "user_id",
                    "likes",
                    "dislikes",
                    "comments"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "engagement": {
                        "type": "object",
                        "description": "A dictionary containing likes, dislikes and comments data of the user.",
                        "properties": {
                            "likes": {
                                "type": "integer"
                            },
                            "dislikes": {
                                "type": "integer"
                            },
                            "comments": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "required": [
                            "likes",
                            "dislikes",
                            "comments"
                        ]
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'capture_user_engagement', 'description': 'Understand user engagement by capturing data on likes, dislikes, and comments.', 'parameters': {'type': 'object', 'properties': {'user_id': {'type': 'string', 'description': 'The ID of the user.'}, 'likes': {'type': 'integer', 'description': 'The number of likes from the user.'}, 'dislikes': {'type': 'integer', 'description': 'The number of dislikes from the user.'}, 'comments': {'type': 'array', 'description': 'A list of comments from the user.', 'items': {'type': 'string'}}}, 'required': ['user_id', 'likes', 'dislikes', 'comments']}, 'returns': {'type': 'object', 'properties': {'engagement': {'type': 'object', 'description': 'A dictionary containing likes, dislikes and comments data of the user.', 'properties': {'likes': {'type': 'integer'}, 'dislikes': {'type': 'integer'}, 'comments': {'type': 'array', 'items': {'type': 'string'}}}, 'required': ['likes', 'dislikes', 'comments']}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Could you help me understand my engagement on my posts?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Could you please provide your user ID?"
            },
            {
                "role": "user",
                "text": "Sure, my user ID is '12345'."
            },
            {
                "role": "assistant",
                "text": "Alright, can you also tell me the number of likes and dislikes you received?"
            },
            {
                "role": "user",
                "text": "I have received 53 likes and 7 dislikes."
            },
            {
                "role": "assistant",
                "text": "Noted. Could you also provide the comments you received?"
            },
            {
                "role": "user",
                "text": "Yes, I received comments like 'Awesome Post!', 'Great work' and 'Keep it up'."
            },
            {
                "role": "assistant",
                "text": "Great, I'm compiling your engagement data now."
            }
        ],
        "function_call": {
            "function_name": "capture_user_engagement",
            "parameters": {
                "user_id": "12345",
                "likes": 53,
                "dislikes": 7,
                "comments": [
                    "Awesome Post!",
                    "Great work",
                    "Keep it up"
                ]
            }
        }
    }
}
{
    "function_id": "youtube-12",
    "task": "Automatically post preset comments or updates in the comment section of a video.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Automatically post preset comments or updates in the comment section of a video."
    },
    "snippet": "def post_preset_comments(\n    video_id: str,\n    comments: List[str],\n) -> None:\n    \"\"\"\n    Automatically posts preset comments or updates in the comment section of a video.\n\n    Parameters:\n        video_id (str): The ID of the video to comment on.\n        comments (List[str]): A list of comments to be posted on the video.\n\n    Returns:\n        None\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def post_preset_comments(\n    video_id: str,\n    comments: List[str],\n) -> None:\n    \"\"\"\n    Automatically posts preset comments or updates in the comment section of a video.\n\n    Parameters:\n        video_id (str): The ID of the video to comment on.\n        comments (List[str]): A list of comments to be posted on the video.\n\n    Returns:\n        None\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "post_preset_comments",
            "description": "Automatically posts preset comments or updates in the comment section of a video.",
            "parameters": {
                "type": "object",
                "properties": {
                    "video_id": {
                        "type": "string",
                        "description": "The ID of the video to comment on."
                    },
                    "comments": {
                        "type": "array",
                        "description": "A list of comments to be posted on the video.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "video_id",
                    "comments"
                ]
            },
            "returns": {
                "type": "null",
                "description": "No value is returned."
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'post_preset_comments', 'description': 'Automatically posts preset comments or updates in the comment section of a video.', 'parameters': {'type': 'object', 'properties': {'video_id': {'type': 'string', 'description': 'The ID of the video to comment on.'}, 'comments': {'type': 'array', 'description': 'A list of comments to be posted on the video.', 'items': {'type': 'string'}}}, 'required': ['video_id', 'comments']}, 'returns': {'type': 'null', 'description': 'No value is returned.'}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you post some comments on a video for me?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can help with that. Can you please provide the video ID and the comments that you want to post?"
            },
            {
                "role": "user",
                "text": "Yes, the video ID is 'abc123'. And the comments are 'Great video!', 'Really enjoyed this!' and 'Keep it up!'"
            },
            {
                "role": "assistant",
                "text": "Alright, I'll proceed to post these comments on the video with the ID 'abc123'."
            }
        ],
        "function_call": {
            "function_name": "post_preset_comments",
            "parameters": {
                "video_id": "abc123",
                "comments": [
                    "Great video!",
                    "Really enjoyed this!",
                    "Keep it up!"
                ]
            }
        }
    }
}
{
    "function_id": "youtube-15",
    "task": "Control the ad settings for specific videos.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Control the ad settings for specific videos."
    },
    "snippet": "def control_ad_settings(\n    video_id: str,\n    new_ad_settings: Dict[str, Union[bool, str, int]],\n) -> Dict[str, str]:\n    \"\"\"\n    Controls the ad settings for specific videos.\n\n    Parameters:\n        video_id (str): The unique identifier of the video.\n        new_ad_settings (Dict[str, Union[bool, str, int]]): A dictionary containing new ad settings. \n                                                             The acceptable keys are 'enabled' (bool), \n                                                             'ad_type' (str) and 'duration' (int).\n\n    Returns:\n        Dict[str, str]: A dictionary with 'message' as a key and the status of the operation as a value.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def control_ad_settings(\n    video_id: str,\n    new_ad_settings: Dict[str, Union[bool, str, int]],\n) -> Dict[str, str]:\n    \"\"\"\n    Controls the ad settings for specific videos.\n\n    Parameters:\n        video_id (str): The unique identifier of the video.\n        new_ad_settings (Dict[str, Union[bool, str, int]]): A dictionary containing new ad settings. \n                                                             The acceptable keys are 'enabled' (bool), \n                                                             'ad_type' (str) and 'duration' (int).\n\n    Returns:\n        Dict[str, str]: A dictionary with 'message' as a key and the status of the operation as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "control_ad_settings",
            "description": "Controls the ad settings for specific videos.",
            "parameters": {
                "type": "object",
                "properties": {
                    "video_id": {
                        "type": "string",
                        "description": "The unique identifier of the video."
                    },
                    "new_ad_settings": {
                        "type": "object",
                        "description": "A dictionary containing new ad settings. The acceptable keys are 'enabled' (bool), 'ad_type' (str) and 'duration' (int).",
                        "properties": {
                            "enabled": {
                                "type": "boolean"
                            },
                            "ad_type": {
                                "type": "string"
                            },
                            "duration": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "enabled",
                            "ad_type",
                            "duration"
                        ]
                    }
                },
                "required": [
                    "video_id",
                    "new_ad_settings"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "The status of the operation."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'control_ad_settings', 'description': 'Controls the ad settings for specific videos.', 'parameters': {'type': 'object', 'properties': {'video_id': {'type': 'string', 'description': 'The unique identifier of the video.'}, 'new_ad_settings': {'type': 'object', 'description': \"A dictionary containing new ad settings. The acceptable keys are 'enabled' (bool), 'ad_type' (str) and 'duration' (int).\", 'properties': {'enabled': {'type': 'boolean'}, 'ad_type': {'type': 'string'}, 'duration': {'type': 'integer'}}, 'required': ['enabled', 'ad_type', 'duration']}}, 'required': ['video_id', 'new_ad_settings']}, 'returns': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'The status of the operation.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, Can you update the ad settings for my video?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Can I have the video ID and the new ad settings that you would like to apply? I will need to know if the ad is enabled, the type of ad and its duration."
            },
            {
                "role": "user",
                "text": "Yes, the video ID is '9823'. I would like to enable the ad, set the ad type to 'banner' and the duration to 30."
            },
            {
                "role": "assistant",
                "text": "Great, I'm updating the ad settings for your video now."
            }
        ],
        "function_call": {
            "function_name": "control_ad_settings",
            "parameters": {
                "video_id": "9823",
                "new_ad_setting": {
                    "enabled": true,
                    "ad_type": "banner",
                    "duration": 30
                }
            }
        }
    }
}
{
    "function_id": "youtube-16",
    "task": "Fetch details about earnings, including estimated revenue and ad performance.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Fetch details about earnings, including estimated revenue and ad performance."
    },
    "snippet": "def fetch_earnings_details(\n    user_id: str,\n    start_date: str,\n    end_date: str,\n) -> Dict[str, Any]:\n    \"\"\"\n    Fetches and returns details about the user's earnings, including estimated revenue and ad performance.\n\n    Parameters:\n        user_id (str): The ID of the user.\n        start_date (str): The start date for the earnings report in YYYY-MM-DD format.\n        end_date (str): The end date for the earnings report in YYYY-MM-DD format. \n\n    Returns:\n        Dict[str, Any]: A dictionary with details about the user's earnings, including keys for 'estimated_revenue' and 'ad_performance'. The exact structure of 'ad_performance' is not specified.\n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def fetch_earnings_details(\n    user_id: str,\n    start_date: str,\n    end_date: str,\n) -> Dict[str, Any]:\n    \"\"\"\n    Fetches and returns details about the user's earnings, including estimated revenue and ad performance.\n\n    Parameters:\n        user_id (str): The ID of the user.\n        start_date (str): The start date for the earnings report in YYYY-MM-DD format.\n        end_date (str): The end date for the earnings report in YYYY-MM-DD format. \n\n    Returns:\n        Dict[str, Any]: A dictionary with details about the user's earnings, including keys for 'estimated_revenue' and 'ad_performance'. The exact structure of 'ad_performance' is not specified.\n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "fetch_earnings_details",
            "description": "Fetches and returns details about the user's earnings, including estimated revenue and ad performance.",
            "parameters": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "string",
                        "description": "The ID of the user."
                    },
                    "start_date": {
                        "type": "string",
                        "description": "The start date for the earnings report in YYYY-MM-DD format."
                    },
                    "end_date": {
                        "type": "string",
                        "description": "The end date for the earnings report in YYYY-MM-DD format."
                    }
                },
                "required": [
                    "user_id",
                    "start_date",
                    "end_date"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "estimated_revenue": {
                        "type": "any",
                        "description": "An estimate of the user's earnings."
                    },
                    "ad_performance": {
                        "type": "any",
                        "description": "Performance of the user's ads. The exact structure is not specified."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'fetch_earnings_details', 'description': \"Fetches and returns details about the user's earnings, including estimated revenue and ad performance.\", 'parameters': {'type': 'object', 'properties': {'user_id': {'type': 'string', 'description': 'The ID of the user.'}, 'start_date': {'type': 'string', 'description': 'The start date for the earnings report in YYYY-MM-DD format.'}, 'end_date': {'type': 'string', 'description': 'The end date for the earnings report in YYYY-MM-DD format.'}}, 'required': ['user_id', 'start_date', 'end_date']}, 'returns': {'type': 'object', 'properties': {'estimated_revenue': {'type': 'any', 'description': \"An estimate of the user's earnings.\"}, 'ad_performance': {'type': 'any', 'description': \"Performance of the user's ads. The exact structure is not specified.\"}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you provide me details about my earnings?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can help with that. May I know your user ID and the specific start and end dates in YYYY-MM-DD format for the earnings report you want to check?"
            },
            {
                "role": "user",
                "text": "Sure, my user ID is '24680' and I'd like to check my earnings from '2021-01-01' to '2021-12-31'."
            },
            {
                "role": "assistant",
                "text": "Alright, I'm fetching your earnings details now."
            }
        ],
        "function_call": {
            "function_name": "fetch_earnings_details",
            "parameters": {
                "user_id": "24680",
                "start_date": "2021-01-01",
                "end_date": "2021-12-31"
            }
        }
    }
}
{
    "function_id": "youtube-18",
    "task": "Automatically upload caption files to videos.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Automatically upload caption files to videos."
    },
    "snippet": "```python\ndef upload_caption_to_video(\n    video_id: str,\n    caption_file_path: str,\n    language: str,\n    is_default: bool,\n) -> str:\n    \"\"\"\n    Uploads a caption file to a video and returns the ID of the uploaded caption.\n\n    Parameters:\n        video_id (str): The ID of the video.\n        caption_file_path (str): The path to the caption file.\n        language (str): The language of the caption.\n        is_default (bool): A flag indicating whether this caption should be the default.\n\n    Returns:\n        str: The ID of the uploaded caption.\n    \"\"\"\n```\nPlease note that the actual implementation might depend on the specific infrastructure or system used to manage videos and caption files. For instance, if videos are hosted on YouTube, then YouTube Data API would likely be used. Similarly, if videos are stored on a private server, the upload process, validation and error handling would need to be configured according to that server's specifications.",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "```python\ndef upload_caption_to_video(\n    video_id: str,\n    caption_file_path: str,\n    language: str,\n    is_default: bool,\n) -> str:\n    \"\"\"\n    Uploads a caption file to a video and returns the ID of the uploaded caption.\n\n    Parameters:\n        video_id (str): The ID of the video.\n        caption_file_path (str): The path to the caption file.\n        language (str): The language of the caption.\n        is_default (bool): A flag indicating whether this caption should be the default.\n\n    Returns:\n        str: The ID of the uploaded caption.\n    \"\"\"\n```\nPlease note that the actual implementation might depend on the specific infrastructure or system used to manage videos and caption files. For instance, if videos are hosted on YouTube, then YouTube Data API would likely be used. Similarly, if videos are stored on a private server, the upload process, validation and error handling would need to be configured according to that server's specifications.",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "upload_caption_to_video",
            "description": "Uploads a caption file to a video and returns the ID of the uploaded caption.",
            "parameters": {
                "type": "object",
                "properties": {
                    "video_id": {
                        "type": "string",
                        "description": "The ID of the video."
                    },
                    "caption_file_path": {
                        "type": "string",
                        "description": "The path to the caption file."
                    },
                    "language": {
                        "type": "string",
                        "description": "The language of the caption."
                    },
                    "is_default": {
                        "type": "boolean",
                        "description": "A flag indicating whether this caption should be the default."
                    }
                },
                "required": [
                    "video_id",
                    "caption_file_path",
                    "language",
                    "is_default"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "caption_id": {
                        "type": "string",
                        "description": "The ID of the uploaded caption."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'upload_caption_to_video', 'description': 'Uploads a caption file to a video and returns the ID of the uploaded caption.', 'parameters': {'type': 'object', 'properties': {'video_id': {'type': 'string', 'description': 'The ID of the video.'}, 'caption_file_path': {'type': 'string', 'description': 'The path to the caption file.'}, 'language': {'type': 'string', 'description': 'The language of the caption.'}, 'is_default': {'type': 'boolean', 'description': 'A flag indicating whether this caption should be the default.'}}, 'required': ['video_id', 'caption_file_path', 'language', 'is_default']}, 'returns': {'type': 'object', 'properties': {'caption_id': {'type': 'string', 'description': 'The ID of the uploaded caption.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you upload a caption to my video?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Can I have the video ID, caption file path, language of the caption and whether this caption should be the default one?"
            },
            {
                "role": "user",
                "text": "The video id is '192837', the path to the caption file is '/user/captions/caption.txt', the language is 'English' and yes, this caption should be set as the default one."
            },
            {
                "role": "assistant",
                "text": "Great, I am uploading the captions to your video now."
            }
        ],
        "function_call": {
            "function_name": "upload_caption_to_video",
            "parameters": {
                "video_id": "192837",
                "caption_file_path": "/user/captions/caption.txt",
                "language": "English",
                "is_default": true
            }
        }
    }
}
{
    "function_id": "youtube-19",
    "task": "Replace or update existing captions.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Replace or update existing captions."
    },
    "snippet": "def update_captions(\n    captions: Dict[str, str],\n    updates: Dict[str, str],\n) -> Dict[str, str]:\n    \"\"\"\n    Replaces or updates existing image captions based on the updates provided.\n\n    Parameters:\n        captions (Dict[str, str]): A dictionary where the key is the image name and the value is its caption.\n        updates (Dict[str, str]): A dictionary of updates where the key is the image name and \n                                  the value is the updated caption.\n\n    Returns:\n        Dict[str, str]: The updated captions dictionary. \n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def update_captions(\n    captions: Dict[str, str],\n    updates: Dict[str, str],\n) -> Dict[str, str]:\n    \"\"\"\n    Replaces or updates existing image captions based on the updates provided.\n\n    Parameters:\n        captions (Dict[str, str]): A dictionary where the key is the image name and the value is its caption.\n        updates (Dict[str, str]): A dictionary of updates where the key is the image name and \n                                  the value is the updated caption.\n\n    Returns:\n        Dict[str, str]: The updated captions dictionary. \n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "update_captions",
            "description": "Replaces or updates existing image captions based on the updates provided.",
            "parameters": {
                "type": "object",
                "properties": {
                    "captions": {
                        "type": "object",
                        "description": "A dictionary where the key is the image name and the value is its caption."
                    },
                    "updates": {
                        "type": "object",
                        "description": "A dictionary of updates where the key is the image name and the value is the updated caption."
                    }
                },
                "required": [
                    "captions",
                    "updates"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "updated_captions": {
                        "type": "object",
                        "description": "The updated captions dictionary."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'update_captions', 'description': 'Replaces or updates existing image captions based on the updates provided.', 'parameters': {'type': 'object', 'properties': {'captions': {'type': 'object', 'description': 'A dictionary where the key is the image name and the value is its caption.'}, 'updates': {'type': 'object', 'description': 'A dictionary of updates where the key is the image name and the value is the updated caption.'}}, 'required': ['captions', 'updates']}, 'returns': {'type': 'object', 'properties': {'updated_captions': {'type': 'object', 'description': 'The updated captions dictionary.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, I'd like to update some image captions. Can you help me do it?"
            },
            {
                "role": "assistant",
                "text": "Absolutely, I can do that. Could you please specify the existing image captions that you want to update?"
            },
            {
                "role": "user",
                "text": "Sure, here they are. This is a dictionary with image names and their respective captions: {'Image1': 'Caption1', 'Image2': 'Caption2'}"
            },
            {
                "role": "assistant",
                "text": "Great, now please provide me with the updated captions for these images."
            },
            {
                "role": "user",
                "text": "Yes, here is the dictionary of updates: {'Image1': 'Updated Caption1', 'Image2': 'Updated Caption2'}"
            },
            {
                "role": "assistant",
                "text": "Super. I'm updating your image captions now."
            }
        ],
        "function_call": {
            "function_name": "update_captions",
            "parameters": {
                "captions": {
                    "Image1": "Caption1",
                    "Image2": "Caption2"
                },
                "updates": {
                    "Image1": "Updated Caption1",
                    "Image2": "Updated Caption2"
                }
            }
        }
    }
}
{
    "function_id": "youtube-20",
    "task": "Remove captions from a specific video.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Remove captions from a specific video."
    },
    "snippet": "def remove_captions(\n    video_file_path: str,\n    output_file_path: str,\n) -> bool:\n    \"\"\"\n    Removes captions from a specific video and creates a new, caption-free version of the video.\n\n    Parameters:\n        video_file_path (str): The file path of the video from which captions should be removed.\n        output_file_path (str): The file path where the new, caption-free version of the video will be saved.\n        \n    Returns:\n        bool: True if the process was successful, False otherwise.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def remove_captions(\n    video_file_path: str,\n    output_file_path: str,\n) -> bool:\n    \"\"\"\n    Removes captions from a specific video and creates a new, caption-free version of the video.\n\n    Parameters:\n        video_file_path (str): The file path of the video from which captions should be removed.\n        output_file_path (str): The file path where the new, caption-free version of the video will be saved.\n        \n    Returns:\n        bool: True if the process was successful, False otherwise.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "remove_captions",
            "description": "Removes captions from a specific video and creates a new, caption-free version of the video.",
            "parameters": {
                "type": "object",
                "properties": {
                    "video_file_path": {
                        "type": "string",
                        "description": "The file path of the video from which captions should be removed."
                    },
                    "output_file_path": {
                        "type": "string",
                        "description": "The file path where the new, caption-free version of the video will be saved."
                    }
                },
                "required": [
                    "video_file_path",
                    "output_file_path"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "Success": {
                        "type": "boolean",
                        "description": "True if the process was successful, False otherwise."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'remove_captions', 'description': 'Removes captions from a specific video and creates a new, caption-free version of the video.', 'parameters': {'type': 'object', 'properties': {'video_file_path': {'type': 'string', 'description': 'The file path of the video from which captions should be removed.'}, 'output_file_path': {'type': 'string', 'description': 'The file path where the new, caption-free version of the video will be saved.'}}, 'required': ['video_file_path', 'output_file_path']}, 'returns': {'type': 'object', 'properties': {'Success': {'type': 'boolean', 'description': 'True if the process was successful, False otherwise.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you remove captions from my video?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Can you please provide me the file path of the video?"
            },
            {
                "role": "user",
                "text": "Yes, the file path of the video is './myVideos/test_video.mp4'."
            },
            {
                "role": "assistant",
                "text": "Great, now could you specify the file path where you want to save the new, caption-free version of the video?"
            },
            {
                "role": "user",
                "text": "Yes, save it as './myVideos/test_video_no_caption.mp4'."
            },
            {
                "role": "assistant",
                "text": "Awesome, I'm removing the captions from your video now."
            }
        ],
        "function_call": {
            "function_name": "remove_captions",
            "parameters": {
                "video_file_path": "./myVideos/test_video.mp4",
                "output_file_path": "./myVideos/test_video_no_caption.mp4"
            }
        }
    }
}
{
    "function_id": "youtube-22",
    "task": "Retrieve a specific video using its unique ID.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Retrieve a specific video using its unique ID."
    },
    "snippet": "def get_video_by_id(\n    video_id: str,\n) -> Dict[str, Any]:\n    \"\"\"\n    Retrieves a specific video using its unique ID.\n    \n    Parameters:\n        video_id (str): The unique ID of the video to retrieve.\n                                          \n    Returns:\n        Dict[str, Any]: A dictionary containing details of the video if found.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def get_video_by_id(\n    video_id: str,\n) -> Dict[str, Any]:\n    \"\"\"\n    Retrieves a specific video using its unique ID.\n    \n    Parameters:\n        video_id (str): The unique ID of the video to retrieve.\n                                          \n    Returns:\n        Dict[str, Any]: A dictionary containing details of the video if found.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "get_video_by_id",
            "description": "Retrieves a specific video using its unique ID.",
            "parameters": {
                "type": "object",
                "properties": {
                    "video_id": {
                        "type": "string",
                        "description": "The unique ID of the video to retrieve."
                    }
                },
                "required": [
                    "video_id"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "Dict[str, Any]": {
                        "type": "object",
                        "description": "A dictionary containing details of the video if found."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'get_video_by_id', 'description': 'Retrieves a specific video using its unique ID.', 'parameters': {'type': 'object', 'properties': {'video_id': {'type': 'string', 'description': 'The unique ID of the video to retrieve.'}}, 'required': ['video_id']}, 'returns': {'type': 'object', 'properties': {'Dict[str, Any]': {'type': 'object', 'description': 'A dictionary containing details of the video if found.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you find a specific video for me?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Could you please provide me with the unique ID of the video you're looking for?"
            },
            {
                "role": "user",
                "text": "Yes, the video id is 'ABC123'."
            },
            {
                "role": "assistant",
                "text": "Great, I'm retrieving the video with ID 'ABC123' now."
            }
        ],
        "function_call": {
            "function_name": "get_video_by_id",
            "parameters": {
                "video_id": "ABC123"
            }
        }
    }
}
{
    "function_id": "youtube-23",
    "task": "Obtain a list of currently trending videos in a specific region or category.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Obtain a list of currently trending videos in a specific region or category."
    },
    "snippet": "def get_trending_videos(\n    region_code: str,\n    category_id: str,\n    max_results: int\n) -> List[Dict[str, Any]]:\n    \"\"\"\n    Fetches a list of currently trending videos in a specific region or category from YouTube.\n    \n    Parameters:\n        region_code (str): The region for which to fetch trending videos.\n        category_id (str): The id of the category for which to fetch trending videos.\n        max_results (int): The maximum number of results to return.\n                          \n    Returns:\n        List[Dict[str, Any]]: A list of dictionaries each representing a trending video. Each dictionary \n                               contains details like video id, title, description, etc.\n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def get_trending_videos(\n    region_code: str,\n    category_id: str,\n    max_results: int\n) -> List[Dict[str, Any]]:\n    \"\"\"\n    Fetches a list of currently trending videos in a specific region or category from YouTube.\n    \n    Parameters:\n        region_code (str): The region for which to fetch trending videos.\n        category_id (str): The id of the category for which to fetch trending videos.\n        max_results (int): The maximum number of results to return.\n                          \n    Returns:\n        List[Dict[str, Any]]: A list of dictionaries each representing a trending video. Each dictionary \n                               contains details like video id, title, description, etc.\n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "get_trending_videos",
            "description": "Fetches a list of currently trending videos in a specific region or category from YouTube.",
            "parameters": {
                "type": "object",
                "properties": {
                    "region_code": {
                        "type": "string",
                        "description": "The region for which to fetch trending videos."
                    },
                    "category_id": {
                        "type": "string",
                        "description": "The id of the category for which to fetch trending videos."
                    },
                    "max_results": {
                        "type": "integer",
                        "description": "The maximum number of results to return."
                    }
                },
                "required": [
                    "region_code",
                    "category_id",
                    "max_results"
                ]
            },
            "returns": {
                "type": "array",
                "description": "A list of dictionaries each representing a trending video.",
                "items": {
                    "type": "object",
                    "properties": {
                        "video_id": {
                            "type": "string"
                        },
                        "title": {
                            "type": "string"
                        },
                        "description": {
                            "type": "string"
                        },
                        "etc": {
                            "type": "any"
                        }
                    },
                    "required": [
                        "video_id",
                        "title",
                        "description",
                        "etc"
                    ]
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'get_trending_videos', 'description': 'Fetches a list of currently trending videos in a specific region or category from YouTube.', 'parameters': {'type': 'object', 'properties': {'region_code': {'type': 'string', 'description': 'The region for which to fetch trending videos.'}, 'category_id': {'type': 'string', 'description': 'The id of the category for which to fetch trending videos.'}, 'max_results': {'type': 'integer', 'description': 'The maximum number of results to return.'}}, 'required': ['region_code', 'category_id', 'max_results']}, 'returns': {'type': 'array', 'description': 'A list of dictionaries each representing a trending video.', 'items': {'type': 'object', 'properties': {'video_id': {'type': 'string'}, 'title': {'type': 'string'}, 'description': {'type': 'string'}, 'etc': {'type': 'any'}}, 'required': ['video_id', 'title', 'description', 'etc']}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you show me the trending videos only from my region and category ?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Could you please tell me your region code and your favorite category?"
            },
            {
                "role": "user",
                "text": "Yes, my region code is 'US' and my favorite category id is '10'. Also, can you limit the results to top 5?"
            },
            {
                "role": "assistant",
                "text": "Alright, I'll fetch the top five trending videos from your region and favorite category."
            }
        ],
        "function_call": {
            "function_name": "get_trending_videos",
            "parameters": {
                "region_code": "US",
                "category_id": "10",
                "max_results": 5
            }
        }
    }
}
{
    "function_id": "youtube-24",
    "task": "Set up a future live stream event.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Set up a future live stream event."
    },
    "snippet": "def setup_live_stream(\n    event_title: str,\n    start_time: str,\n    end_time: str,\n    stream_url: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Sets up a future live stream event and returns the details of the event.\n\n    Parameters:\n        event_title (str): The title of the live stream event.\n        start_time (str): The start time of the event in YYYY-MM-DD HH:MM:SS format.\n        end_time (str): The end time of the event in YYYY-MM-DD HH:MM:SS format.\n        stream_url (str): The URL of the live stream.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'event_title', 'start_time', 'end_time', and 'stream_url' as keys\n                        and the corresponding details as values.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def setup_live_stream(\n    event_title: str,\n    start_time: str,\n    end_time: str,\n    stream_url: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Sets up a future live stream event and returns the details of the event.\n\n    Parameters:\n        event_title (str): The title of the live stream event.\n        start_time (str): The start time of the event in YYYY-MM-DD HH:MM:SS format.\n        end_time (str): The end time of the event in YYYY-MM-DD HH:MM:SS format.\n        stream_url (str): The URL of the live stream.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'event_title', 'start_time', 'end_time', and 'stream_url' as keys\n                        and the corresponding details as values.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "setup_live_stream",
            "description": "Sets up a future live stream event and returns the details of the event.",
            "parameters": {
                "type": "object",
                "properties": {
                    "event_title": {
                        "type": "string",
                        "description": "The title of the live stream event."
                    },
                    "start_time": {
                        "type": "string",
                        "description": "The start time of the event in YYYY-MM-DD HH:MM:SS format."
                    },
                    "end_time": {
                        "type": "string",
                        "description": "The end time of the event in YYYY-MM-DD HH:MM:SS format."
                    },
                    "stream_url": {
                        "type": "string",
                        "description": "The URL of the live stream."
                    }
                },
                "required": [
                    "event_title",
                    "start_time",
                    "end_time",
                    "stream_url"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "event_title": {
                        "type": "string",
                        "description": "The title of the event."
                    },
                    "start_time": {
                        "type": "string",
                        "description": "The start-time of the event."
                    },
                    "end_time": {
                        "type": "string",
                        "description": "The end-time of the event."
                    },
                    "stream_url": {
                        "type": "string",
                        "description": "The URL of the live stream."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'setup_live_stream', 'description': 'Sets up a future live stream event and returns the details of the event.', 'parameters': {'type': 'object', 'properties': {'event_title': {'type': 'string', 'description': 'The title of the live stream event.'}, 'start_time': {'type': 'string', 'description': 'The start time of the event in YYYY-MM-DD HH:MM:SS format.'}, 'end_time': {'type': 'string', 'description': 'The end time of the event in YYYY-MM-DD HH:MM:SS format.'}, 'stream_url': {'type': 'string', 'description': 'The URL of the live stream.'}}, 'required': ['event_title', 'start_time', 'end_time', 'stream_url']}, 'returns': {'type': 'object', 'properties': {'event_title': {'type': 'string', 'description': 'The title of the event.'}, 'start_time': {'type': 'string', 'description': 'The start-time of the event.'}, 'end_time': {'type': 'string', 'description': 'The end-time of the event.'}, 'stream_url': {'type': 'string', 'description': 'The URL of the live stream.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you help me set up a new live stream?"
            },
            {
                "role": "assistant",
                "text": "Of course, I can help you with that. Can you please tell me the title of the event?"
            },
            {
                "role": "user",
                "text": "The event title is 'Virtual Tech Conference'."
            },
            {
                "role": "assistant",
                "text": "Great, and what's the start and end time for this event? Please use the format 'YYYY-MM-DD HH:MM:SS'."
            },
            {
                "role": "user",
                "text": "The start time is '2022-06-15 10:00:00' and it will end at '2022-06-15 18:00:00'."
            },
            {
                "role": "assistant",
                "text": "Perfect, and finally, could you provide the URL where this live stream will be hosted?"
            },
            {
                "role": "user",
                "text": "The stream will be live at 'https://www.livestream.com/virtualtechconference'."
            },
            {
                "role": "assistant",
                "text": "Excellent, I'm setting up your event now."
            }
        ],
        "function_call": {
            "function_name": "setup_live_stream",
            "parameters": {
                "event_title": "Virtual Tech Conference",
                "start_time": "2022-06-15 10:00:00",
                "end_time": "2022-06-15 18:00:00",
                "stream_url": "https://www.livestream.com/virtualtechconference"
            }
        }
    }
}
{
    "function_id": "youtube-25",
    "task": "Initiate or end a live stream.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Initiate or end a live stream."
    },
    "snippet": "def manage_live_stream(\n    action: str,\n    stream_id: str,\n    stream_key: str\n) -> Dict[str, str]:\n    \"\"\"\n    Initiates or ends a live stream.\n    \n    Parameters:\n        action (str): The action to be performed: Either 'start' or 'stop'.\n        stream_id (str): The identifier of the stream.\n        stream_key (str): The key of the stream. \n\n    Returns:\n        Dict[str, str]: A dictionary with 'message' as a key and the response message as a value.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def manage_live_stream(\n    action: str,\n    stream_id: str,\n    stream_key: str\n) -> Dict[str, str]:\n    \"\"\"\n    Initiates or ends a live stream.\n    \n    Parameters:\n        action (str): The action to be performed: Either 'start' or 'stop'.\n        stream_id (str): The identifier of the stream.\n        stream_key (str): The key of the stream. \n\n    Returns:\n        Dict[str, str]: A dictionary with 'message' as a key and the response message as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "manage_live_stream",
            "description": "Initiates or ends a live stream.",
            "parameters": {
                "type": "object",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "The action to be performed: Either 'start' or 'stop'."
                    },
                    "stream_id": {
                        "type": "string",
                        "description": "The identifier of the stream."
                    },
                    "stream_key": {
                        "type": "string",
                        "description": "The key of the stream."
                    }
                },
                "required": [
                    "action",
                    "stream_id",
                    "stream_key"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "A dictionary with 'message' as a key and the response message as a value."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'manage_live_stream', 'description': 'Initiates or ends a live stream.', 'parameters': {'type': 'object', 'properties': {'action': {'type': 'string', 'description': \"The action to be performed: Either 'start' or 'stop'.\"}, 'stream_id': {'type': 'string', 'description': 'The identifier of the stream.'}, 'stream_key': {'type': 'string', 'description': 'The key of the stream.'}}, 'required': ['action', 'stream_id', 'stream_key']}, 'returns': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': \"A dictionary with 'message' as a key and the response message as a value.\"}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you start my live stream?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Could you give me the ID and the key of the stream you want to start?"
            },
            {
                "role": "user",
                "text": "Yes, my stream ID is 'abc123' and the key is 'def456'."
            },
            {
                "role": "assistant",
                "text": "Great, I'm initiating your live stream now."
            }
        ],
        "function_call": {
            "function_name": "manage_live_stream",
            "parameters": {
                "action": "start",
                "stream_id": "abc123",
                "stream_key": "def456"
            }
        }
    }
}
{
    "function_id": "youtube-26",
    "task": "Automatically post messages, moderate comments, or collect metrics from a live chat during a live stream.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Automatically post messages, moderate comments, or collect metrics from a live chat during a live stream."
    },
    "snippet": "def monitor_live_stream(\n    stream_id: str,\n    message: str,\n    moderate_comments: bool,\n    collect_metrics: bool,\n) -> Dict[str, Any]:\n    \"\"\"\n    Posts messages, moderates comments, and collects metrics from a live chat during a live stream.\n    \n    Parameters:\n        stream_id (str): The ID of the live stream.\n        message (str): The message to post in the live chat.\n        moderate_comments (bool): A flag indicating whether to moderate comments.\n            If True, inappropriate comments will be moderated.\n        collect_metrics (bool): A flag indicating whether to collect metrics.\n            If True, metrics like viewer count, like count, etc. will be collected.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the results of all the performed actions.\n            The dictionary may have keys like 'message_status', 'moderated_comments', 'metrics' etc, \n            based on operations performed in actual code implementation.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def monitor_live_stream(\n    stream_id: str,\n    message: str,\n    moderate_comments: bool,\n    collect_metrics: bool,\n) -> Dict[str, Any]:\n    \"\"\"\n    Posts messages, moderates comments, and collects metrics from a live chat during a live stream.\n    \n    Parameters:\n        stream_id (str): The ID of the live stream.\n        message (str): The message to post in the live chat.\n        moderate_comments (bool): A flag indicating whether to moderate comments.\n            If True, inappropriate comments will be moderated.\n        collect_metrics (bool): A flag indicating whether to collect metrics.\n            If True, metrics like viewer count, like count, etc. will be collected.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the results of all the performed actions.\n            The dictionary may have keys like 'message_status', 'moderated_comments', 'metrics' etc, \n            based on operations performed in actual code implementation.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "monitor_live_stream",
            "description": "Posts messages, moderates comments, and collects metrics from a live chat during a live stream.",
            "parameters": {
                "type": "object",
                "properties": {
                    "stream_id": {
                        "type": "string",
                        "description": "The ID of the live stream."
                    },
                    "message": {
                        "type": "string",
                        "description": "The message to post in the live chat."
                    },
                    "moderate_comments": {
                        "type": "boolean",
                        "description": "A flag indicating whether to moderate comments. If True, inappropriate comments will be moderated."
                    },
                    "collect_metrics": {
                        "type": "boolean",
                        "description": "A flag indicating whether to collect metrics. If True, metrics like viewer count, like count, etc. will be collected."
                    }
                },
                "required": [
                    "stream_id",
                    "message",
                    "moderate_comments",
                    "collect_metrics"
                ]
            },
            "returns": {
                "type": "object",
                "description": "A dictionary containing the results of all the performed actions. The dictionary may have keys like 'message_status', 'moderated_comments', 'metrics' etc, based on operations performed in actual code implementation.",
                "properties": {
                    "message_status": {
                        "type": "string"
                    },
                    "moderated_comments": {
                        "type": "array"
                    },
                    "metrics": {
                        "type": "object"
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'monitor_live_stream', 'description': 'Posts messages, moderates comments, and collects metrics from a live chat during a live stream.', 'parameters': {'type': 'object', 'properties': {'stream_id': {'type': 'string', 'description': 'The ID of the live stream.'}, 'message': {'type': 'string', 'description': 'The message to post in the live chat.'}, 'moderate_comments': {'type': 'boolean', 'description': 'A flag indicating whether to moderate comments. If True, inappropriate comments will be moderated.'}, 'collect_metrics': {'type': 'boolean', 'description': 'A flag indicating whether to collect metrics. If True, metrics like viewer count, like count, etc. will be collected.'}}, 'required': ['stream_id', 'message', 'moderate_comments', 'collect_metrics']}, 'returns': {'type': 'object', 'description': \"A dictionary containing the results of all the performed actions. The dictionary may have keys like 'message_status', 'moderated_comments', 'metrics' etc, based on operations performed in actual code implementation.\", 'properties': {'message_status': {'type': 'string'}, 'moderated_comments': {'type': 'array'}, 'metrics': {'type': 'object'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, I have a live stream going on. Can you post a message in the live chat and moderate comments, also, please collect some metrics?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Could you please give me the ID of the live stream and the message you want me to post?"
            },
            {
                "role": "user",
                "text": "Yes, the live stream ID is 'ABC123' and post this message 'Welcome to our live stream'."
            },
            {
                "role": "assistant",
                "text": "Alright. I'm posting your message in the live chat, moderating comments and collecting metrics from your live stream now."
            }
        ],
        "function_call": {
            "function_name": "monitor_live_stream",
            "parameters": {
                "stream_id": "ABC123",
                "message": "Welcome to our live stream",
                "moderate_comments": true,
                "collect_metrics": true
            }
        }
    }
}
{
    "function_id": "youtube-27",
    "task": "Automate the process of subscribing to other YouTube channels.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Automate the process of subscribing to other YouTube channels."
    },
    "snippet": "def subscribe_to_channels(\n    channel_ids: List[str],\n    youtube_api_key: str\n) -> None:\n    \"\"\"\n    Subscribes to multiple YouTube channels using YouTube's API.\n\n    Parameters:\n        channel_ids (List[str]): A list of YouTube channel IDs to subscribe to.\n        youtube_api_key (str): Your YouTube API key.\n\n    Note:\n        This function should comply with the YouTube API's usage policies, including obtaining \n        user consent for any subscription actions.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def subscribe_to_channels(\n    channel_ids: List[str],\n    youtube_api_key: str\n) -> None:\n    \"\"\"\n    Subscribes to multiple YouTube channels using YouTube's API.\n\n    Parameters:\n        channel_ids (List[str]): A list of YouTube channel IDs to subscribe to.\n        youtube_api_key (str): Your YouTube API key.\n\n    Note:\n        This function should comply with the YouTube API's usage policies, including obtaining \n        user consent for any subscription actions.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "subscribe_to_channels",
            "description": "Subscribes to multiple YouTube channels using YouTube's API.",
            "parameters": {
                "type": "object",
                "properties": {
                    "channel_ids": {
                        "type": "array",
                        "description": "A list of YouTube channel IDs to subscribe to.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "youtube_api_key": {
                        "type": "string",
                        "description": "Your YouTube API key."
                    }
                },
                "required": [
                    "channel_ids",
                    "youtube_api_key"
                ]
            },
            "returns": {
                "type": "null",
                "description": "No return value."
            },
            "notes": "This function should comply with the YouTube API's usage policies, including obtaining user consent for any subscription actions."
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'subscribe_to_channels', 'description': \"Subscribes to multiple YouTube channels using YouTube's API.\", 'parameters': {'type': 'object', 'properties': {'channel_ids': {'type': 'array', 'description': 'A list of YouTube channel IDs to subscribe to.', 'items': {'type': 'string'}}, 'youtube_api_key': {'type': 'string', 'description': 'Your YouTube API key.'}}, 'required': ['channel_ids', 'youtube_api_key']}, 'returns': {'type': 'null', 'description': 'No return value.'}, 'notes': \"This function should comply with the YouTube API's usage policies, including obtaining user consent for any subscription actions.\"}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, I want to subscribe to some YouTube channels."
            },
            {
                "role": "assistant",
                "text": "Sure, I can help you with that. Could you please provide me the IDs of the channels that you want to subscribe to?"
            },
            {
                "role": "user",
                "text": "Sure, here they are: 'ABCD1234', 'EFGH5678', 'IJKL9101'."
            },
            {
                "role": "assistant",
                "text": "Great, and could you please provide your YouTube API Key?"
            },
            {
                "role": "user",
                "text": "Yes, my YouTube API Key is 'YTAPI123456'."
            },
            {
                "role": "assistant",
                "text": "Perfect, I'm subscribing you to these channels now."
            }
        ],
        "function_call": {
            "function_name": "subscribe_to_channels",
            "parameters": {
                "channel_ids": [
                    "ABCD1234",
                    "EFGH5678",
                    "IJKL9101"
                ],
                "youtube_api_key": "YTAPI123456"
            }
        }
    }
}
{
    "function_id": "youtube-28",
    "task": "Remove existing subscriptions.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Remove existing subscriptions."
    },
    "snippet": "def remove_subscriptions(subscriptions: List[str]) -> bool:\n    \"\"\"\n    Removes existing subscriptions.\n\n    Parameters:\n        subscriptions (List[str]): A list of subscriptions to be removed.\n\n    Returns:\n        bool: Returns True if successfully removed; False otherwise.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def remove_subscriptions(subscriptions: List[str]) -> bool:\n    \"\"\"\n    Removes existing subscriptions.\n\n    Parameters:\n        subscriptions (List[str]): A list of subscriptions to be removed.\n\n    Returns:\n        bool: Returns True if successfully removed; False otherwise.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "remove_subscriptions",
            "description": "Removes existing subscriptions.",
            "parameters": {
                "type": "object",
                "properties": {
                    "subscriptions": {
                        "type": "array",
                        "description": "A list of subscriptions to be removed.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "subscriptions"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "result": {
                        "type": "boolean",
                        "description": "Returns True if successfully removed; False otherwise."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'remove_subscriptions', 'description': 'Removes existing subscriptions.', 'parameters': {'type': 'object', 'properties': {'subscriptions': {'type': 'array', 'description': 'A list of subscriptions to be removed.', 'items': {'type': 'string'}}}, 'required': ['subscriptions']}, 'returns': {'type': 'object', 'properties': {'result': {'type': 'boolean', 'description': 'Returns True if successfully removed; False otherwise.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hi, can you remove some of my subscriptions?"
            },
            {
                "role": "assistant",
                "text": "Of course, I can help with that. Could you please provide me the list of subscriptions you want to remove?"
            },
            {
                "role": "user",
                "text": "Sure, I want to remove 'Economic Times', 'Sports Weekly', and 'Tech Daily'."
            },
            {
                "role": "assistant",
                "text": "Alright, I'm proceeding to remove 'Economic Times', 'Sports Weekly', and 'Tech Daily' from your subscriptions."
            }
        ],
        "function_call": {
            "function_name": "remove_subscriptions",
            "parameters": {
                "subscriptions": [
                    "Economic Times",
                    "Sports Weekly",
                    "Tech Daily"
                ]
            }
        }
    }
}
{
    "function_id": "youtube-29",
    "task": "Alert subscribers when new content is available or when a live stream is starting.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Alert subscribers when new content is available or when a live stream is starting."
    },
    "snippet": "Here is your Python function snippet:\n\n```python\nfrom typing import List\n\ndef alert_subscribers(\n    subscriber_list: List[str],\n    new_content: bool,\n    live_stream: bool,\n) -> None:\n    \"\"\"\n    Alerts subscribers when new content is available or a live stream is starting.\n\n    Parameters:\n        subscriber_list (List[str]): The list of subscribers' contact details.\n        new_content (bool): Flag indicating if there is new content available.\n        live_stream (bool): Flag indicating if a live stream is starting.\n\n    Returns:\n        None\n    \"\"\"\n```\nPlease remember that the actual implementation of the function--who and how the subscribers are alerted, the nature of the new content or live stream--is not defined in this snippet. This is a skeleton for you to fill in based on your specific needs and infrastructure.",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "Here is your Python function snippet:\n\n```python\nfrom typing import List\n\ndef alert_subscribers(\n    subscriber_list: List[str],\n    new_content: bool,\n    live_stream: bool,\n) -> None:\n    \"\"\"\n    Alerts subscribers when new content is available or a live stream is starting.\n\n    Parameters:\n        subscriber_list (List[str]): The list of subscribers' contact details.\n        new_content (bool): Flag indicating if there is new content available.\n        live_stream (bool): Flag indicating if a live stream is starting.\n\n    Returns:\n        None\n    \"\"\"\n```\nPlease remember that the actual implementation of the function--who and how the subscribers are alerted, the nature of the new content or live stream--is not defined in this snippet. This is a skeleton for you to fill in based on your specific needs and infrastructure.",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "alert_subscribers",
            "description": "Alerts subscribers when new content is available or a live stream is starting.",
            "parameters": {
                "type": "object",
                "properties": {
                    "subscriber_list": {
                        "type": "array",
                        "description": "The list of subscribers' contact details.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "new_content": {
                        "type": "boolean",
                        "description": "Flag indicating if there is new content available."
                    },
                    "live_stream": {
                        "type": "boolean",
                        "description": "Flag indicating if a live stream is starting."
                    }
                },
                "required": [
                    "subscriber_list",
                    "new_content",
                    "live_stream"
                ]
            },
            "returns": {
                "type": "null",
                "description": "None"
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'alert_subscribers', 'description': 'Alerts subscribers when new content is available or a live stream is starting.', 'parameters': {'type': 'object', 'properties': {'subscriber_list': {'type': 'array', 'description': \"The list of subscribers' contact details.\", 'items': {'type': 'string'}}, 'new_content': {'type': 'boolean', 'description': 'Flag indicating if there is new content available.'}, 'live_stream': {'type': 'boolean', 'description': 'Flag indicating if a live stream is starting.'}}, 'required': ['subscriber_list', 'new_content', 'live_stream']}, 'returns': {'type': 'null', 'description': 'None'}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you alert my subscribers about new content and an upcoming live stream?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. May I have the list of your subscribers' contact details?"
            },
            {
                "role": "user",
                "text": "Yes, here are the contact details of my subscribers ['subscriber1@gmail.com', 'subscriber2@gmail.com', 'subscriber3@gmail.com']."
            },
            {
                "role": "assistant",
                "text": "Great, I'm alerting your subscribers about the new content and the upcoming live stream now."
            }
        ],
        "function_call": {
            "function_name": "alert_subscribers",
            "parameters": {
                "subscriber_list": [
                    "subscriber1@gmail.com",
                    "subscriber2@gmail.com",
                    "subscriber3@gmail.com"
                ],
                "new_content": true,
                "live_stream": true
            }
        }
    }
}
