{
    "function_id": "shopify-1",
    "task": "Create a new product listing with details such as title, description, and price.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Create a new product listing with details such as title, description, and price."
    },
    "snippet": "def create_product_listing(\n    title: str,\n    description: str,\n    price: float\n) -> Dict[str, Union[str, float]]:\n    \"\"\"\n    Creates a new product listing with provided details such as title, description, and price.\n\n    Parameters:\n        title (str): The title of the product listing.\n        description (str): The description of the product.\n        price (float): The price of the product.\n        \n    Returns:\n        Dict[str, Union[str, float]]: A dictionary containing the product listing details. \n        The keys are 'title', 'description', and 'price'.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def create_product_listing(\n    title: str,\n    description: str,\n    price: float\n) -> Dict[str, Union[str, float]]:\n    \"\"\"\n    Creates a new product listing with provided details such as title, description, and price.\n\n    Parameters:\n        title (str): The title of the product listing.\n        description (str): The description of the product.\n        price (float): The price of the product.\n        \n    Returns:\n        Dict[str, Union[str, float]]: A dictionary containing the product listing details. \n        The keys are 'title', 'description', and 'price'.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "create_product_listing",
            "description": "Creates a new product listing with provided details such as title, description, and price.",
            "parameters": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "The title of the product listing."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the product."
                    },
                    "price": {
                        "type": "float",
                        "description": "The price of the product."
                    }
                },
                "required": [
                    "title",
                    "description",
                    "price"
                ]
            },
            "returns": {
                "type": "object",
                "description": "A dictionary containing the product listing details. The keys are 'title', 'description', and 'price'.",
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "price": {
                        "type": "float"
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'create_product_listing', 'description': 'Creates a new product listing with provided details such as title, description, and price.', 'parameters': {'type': 'object', 'properties': {'title': {'type': 'string', 'description': 'The title of the product listing.'}, 'description': {'type': 'string', 'description': 'The description of the product.'}, 'price': {'type': 'float', 'description': 'The price of the product.'}}, 'required': ['title', 'description', 'price']}, 'returns': {'type': 'object', 'description': \"A dictionary containing the product listing details. The keys are 'title', 'description', and 'price'.\", 'properties': {'title': {'type': 'string'}, 'description': {'type': 'string'}, 'price': {'type': 'float'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, I would like to create a new product listing."
            },
            {
                "role": "assistant",
                "text": "Sure, I can help with that. Can you please provide the title, description, and price of the product?"
            },
            {
                "role": "user",
                "text": "Yes, the title is 'Cool Sneakers', the description is 'Brand new stylish sneakers for summer', and the price is 55.99."
            },
            {
                "role": "assistant",
                "text": "Great, I'm creating your product listing now."
            }
        ],
        "function_call": {
            "function_name": "create_product_listing",
            "parameters": {
                "title": "Cool Sneakers",
                "description": "Brand new stylish sneakers for summer",
                "price": 55.99
            }
        }
    }
}
{
    "function_id": "shopify-3",
    "task": "Delete a product listing from the store.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Delete a product listing from the store."
    },
    "snippet": "def delete_product_listing(\n    product_id: int,\n    store_id: int\n) -> Dict[str, str]:\n    \"\"\"\n    Deletes a product listing from the store.\n    \n    Parameters:\n        product_id (int): The id of the product to be deleted.\n        store_id (int): The id of the store from which the product will be deleted.\n                                          \n    Returns:\n        Dict[str, str]: A dictionary containing a message about the status of the operation.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def delete_product_listing(\n    product_id: int,\n    store_id: int\n) -> Dict[str, str]:\n    \"\"\"\n    Deletes a product listing from the store.\n    \n    Parameters:\n        product_id (int): The id of the product to be deleted.\n        store_id (int): The id of the store from which the product will be deleted.\n                                          \n    Returns:\n        Dict[str, str]: A dictionary containing a message about the status of the operation.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "delete_product_listing",
            "description": "Deletes a product listing from the store.",
            "parameters": {
                "type": "object",
                "properties": {
                    "product_id": {
                        "type": "integer",
                        "description": "The id of the product to be deleted."
                    },
                    "store_id": {
                        "type": "integer",
                        "description": "The id of the store from which the product will be deleted."
                    }
                },
                "required": [
                    "product_id",
                    "store_id"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "A dictionary containing a message about the status of the operation."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'delete_product_listing', 'description': 'Deletes a product listing from the store.', 'parameters': {'type': 'object', 'properties': {'product_id': {'type': 'integer', 'description': 'The id of the product to be deleted.'}, 'store_id': {'type': 'integer', 'description': 'The id of the store from which the product will be deleted.'}}, 'required': ['product_id', 'store_id']}, 'returns': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'A dictionary containing a message about the status of the operation.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Can you delete a product listing from my store?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can help with that. Can you please provide the product id and the store id where this product is listed?"
            },
            {
                "role": "user",
                "text": "The product id is '12345' and the store id is '67890'."
            },
            {
                "role": "assistant",
                "text": "Okay. I'm deleting this product listing from your store."
            }
        ],
        "function_call": {
            "function_name": "delete_product_listing",
            "parameters": {
                "product_id": 12345,
                "store_id": 67890
            }
        }
    }
}
{
    "function_id": "shopify-6",
    "task": "Update the storefront theme settings.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Update the storefront theme settings."
    },
    "snippet": "def update_storefront_theme_settings(\n    theme: str,\n    color_scheme: str,\n    font: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Updates the storefront theme settings and returns the new settings.\n    \n    Parameters:\n        theme (str): The new theme name.\n        color_scheme(str): The new color scheme (e.g. 'light', 'dark', 'custom').\n        font (str): The new font name.\n                      \n    Returns:\n        Dict[str, str]: A dictionary with 'theme', 'color_scheme', and 'font' as keys and the new settings as values.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def update_storefront_theme_settings(\n    theme: str,\n    color_scheme: str,\n    font: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Updates the storefront theme settings and returns the new settings.\n    \n    Parameters:\n        theme (str): The new theme name.\n        color_scheme(str): The new color scheme (e.g. 'light', 'dark', 'custom').\n        font (str): The new font name.\n                      \n    Returns:\n        Dict[str, str]: A dictionary with 'theme', 'color_scheme', and 'font' as keys and the new settings as values.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "update_storefront_theme_settings",
            "description": "Updates the storefront theme settings and returns the new settings.",
            "parameters": {
                "type": "object",
                "properties": {
                    "theme": {
                        "type": "string",
                        "description": "The new theme name."
                    },
                    "color_scheme": {
                        "type": "string",
                        "description": "The new color scheme (e.g. 'light', 'dark', 'custom')."
                    },
                    "font": {
                        "type": "string",
                        "description": "The new font name."
                    }
                },
                "required": [
                    "theme",
                    "color_scheme",
                    "font"
                ]
            },
            "returns": {
                "type": "object",
                "description": "A dictionary with 'theme', 'color_scheme', and 'font' as keys and the new settings as values.",
                "properties": {
                    "theme": {
                        "type": "string",
                        "description": "The new active theme name."
                    },
                    "color_scheme": {
                        "type": "string",
                        "description": "The new active color scheme."
                    },
                    "font": {
                        "type": "string",
                        "description": "The new active font name."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'update_storefront_theme_settings', 'description': 'Updates the storefront theme settings and returns the new settings.', 'parameters': {'type': 'object', 'properties': {'theme': {'type': 'string', 'description': 'The new theme name.'}, 'color_scheme': {'type': 'string', 'description': \"The new color scheme (e.g. 'light', 'dark', 'custom').\"}, 'font': {'type': 'string', 'description': 'The new font name.'}}, 'required': ['theme', 'color_scheme', 'font']}, 'returns': {'type': 'object', 'description': \"A dictionary with 'theme', 'color_scheme', and 'font' as keys and the new settings as values.\", 'properties': {'theme': {'type': 'string', 'description': 'The new active theme name.'}, 'color_scheme': {'type': 'string', 'description': 'The new active color scheme.'}, 'font': {'type': 'string', 'description': 'The new active font name.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you change my storefront theme settings?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. What would you like to change them to?"
            },
            {
                "role": "user",
                "text": "I'd like the theme to be 'minimal', the color scheme to be 'dark', and the font to be 'Arial'."
            },
            {
                "role": "assistant",
                "text": "Great, I'm updating your storefront theme settings to 'minimal' theme, 'dark' color scheme, and 'Arial' font now."
            }
        ],
        "function_call": {
            "function_name": "update_storefront_theme_settings",
            "parameters": {
                "theme": "minimal",
                "color_scheme": "dark",
                "font": "Arial"
            }
        }
    }
}
{
    "function_id": "shopify-7",
    "task": "Process and fulfill orders, marking them as completed.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Process and fulfill orders, marking them as completed."
    },
    "snippet": "def process_and_fulfill_orders(\n    orders: List[Dict[str, Union[str, int, float]]]\n) -> List[Dict[str, Union[str, bool]]]:\n    \"\"\"\n    Processes an order list, fulfills them and marks them as completed.\n    \n    Parameters:\n        orders (List[Dict[str, Union[str, int, float]]]): A list of dictionary representing orders. \n                                                          Each dictionary should have 'order_id', 'product_id', \n                                                          'quantity', 'price' and 'customer_id' keys.\n\n    Returns:\n        List[Dict[str, Union[str, bool]]]: A list of dictionaries containing order details and a 'completed' status.\n                                           Each dictionary will have 'order_id', 'customer_id' and 'completed' keys. 'completed' is a bool showing the fulfillment status of an order.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def process_and_fulfill_orders(\n    orders: List[Dict[str, Union[str, int, float]]]\n) -> List[Dict[str, Union[str, bool]]]:\n    \"\"\"\n    Processes an order list, fulfills them and marks them as completed.\n    \n    Parameters:\n        orders (List[Dict[str, Union[str, int, float]]]): A list of dictionary representing orders. \n                                                          Each dictionary should have 'order_id', 'product_id', \n                                                          'quantity', 'price' and 'customer_id' keys.\n\n    Returns:\n        List[Dict[str, Union[str, bool]]]: A list of dictionaries containing order details and a 'completed' status.\n                                           Each dictionary will have 'order_id', 'customer_id' and 'completed' keys. 'completed' is a bool showing the fulfillment status of an order.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "process_and_fulfill_orders",
            "description": "Processes an order list, fulfills them and marks them as completed.",
            "parameters": {
                "type": "array",
                "items": {
                    "type": "object",
                    "description": "A list of dictionary representing orders.",
                    "properties": {
                        "order_id": {
                            "type": "string"
                        },
                        "product_id": {
                            "type": "string"
                        },
                        "quantity": {
                            "type": "integer"
                        },
                        "price": {
                            "type": "float"
                        },
                        "customer_id": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "order_id",
                        "product_id",
                        "quantity",
                        "price",
                        "customer_id"
                    ]
                }
            },
            "returns": {
                "type": "array",
                "description": "A list of dictionaries containing order details and a 'completed' status.",
                "items": {
                    "type": "object",
                    "properties": {
                        "order_id": {
                            "type": "string"
                        },
                        "customer_id": {
                            "type": "string"
                        },
                        "completed": {
                            "type": "boolean",
                            "description": "The fulfillment status of an order."
                        }
                    },
                    "required": [
                        "order_id",
                        "customer_id",
                        "completed"
                    ]
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'process_and_fulfill_orders', 'description': 'Processes an order list, fulfills them and marks them as completed.', 'parameters': {'type': 'array', 'items': {'type': 'object', 'description': 'A list of dictionary representing orders.', 'properties': {'order_id': {'type': 'string'}, 'product_id': {'type': 'string'}, 'quantity': {'type': 'integer'}, 'price': {'type': 'float'}, 'customer_id': {'type': 'string'}}, 'required': ['order_id', 'product_id', 'quantity', 'price', 'customer_id']}}, 'returns': {'type': 'array', 'description': \"A list of dictionaries containing order details and a 'completed' status.\", 'items': {'type': 'object', 'properties': {'order_id': {'type': 'string'}, 'customer_id': {'type': 'string'}, 'completed': {'type': 'boolean', 'description': 'The fulfillment status of an order.'}}, 'required': ['order_id', 'customer_id', 'completed']}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": "{\n    \"conversation\": \n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, I have some orders that need processing. Can you handle that?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. Could you please provide me with the details of the orders?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, here they are. [{'order_id': 'ord1', 'product_id':'prod1', 'quantity':2, 'price':20.5, 'customer_id':'cust1'}, {'order_id': 'ord2', 'product_id': 'prod2', 'quantity':1, 'price':15.0, 'customer_id':'cust2'}]\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm processing and fulfilling these orders now.\"\n    }\n]\n,\n    \"function_call\": \n{\n    \"function_name\": \"process_and_fulfill_orders\",\n    \"parameters\": {\n        \"type\": \"array\",\n        \"items\": [{'order_id': 'ord1', 'product_id':'prod1', 'quantity':2, 'price':20.5, 'customer_id':'cust1'}, \n                  {'order_id': 'ord2', 'product_id': 'prod2', 'quantity':1, 'price':15.0, 'customer_id':'cust2'}]\n    }\n}\n\n}"
}
{
    "function_id": "shopify-9",
    "task": "Create discount codes for sales and promotions.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Create discount codes for sales and promotions."
    },
    "snippet": "def generate_discount_codes(\n    num_codes: int,\n    discount_amount: float,\n    code_length: int,\n    code_prefix: str,\n) -> List[str]:\n    \"\"\"\n    Generate a specified number of unique discount codes for sales and promotions.\n\n    Parameters:\n        num_codes (int): The number of unique codes to generate.\n        discount_amount (float): The discount amount each code represents.\n        code_length (int): The length of the generated codes.\n        code_prefix (str): The string to prepend to each generated code.\n\n    Returns:\n        List[str]: A list of unique discount codes.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def generate_discount_codes(\n    num_codes: int,\n    discount_amount: float,\n    code_length: int,\n    code_prefix: str,\n) -> List[str]:\n    \"\"\"\n    Generate a specified number of unique discount codes for sales and promotions.\n\n    Parameters:\n        num_codes (int): The number of unique codes to generate.\n        discount_amount (float): The discount amount each code represents.\n        code_length (int): The length of the generated codes.\n        code_prefix (str): The string to prepend to each generated code.\n\n    Returns:\n        List[str]: A list of unique discount codes.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "generate_discount_codes",
            "description": "Generate a specified number of unique discount codes for sales and promotions.",
            "parameters": {
                "type": "object",
                "properties": {
                    "num_codes": {
                        "type": "integer",
                        "description": "The number of unique codes to generate."
                    },
                    "discount_amount": {
                        "type": "float",
                        "description": "The discount amount each code represents."
                    },
                    "code_length": {
                        "type": "integer",
                        "description": "The length of the generated codes."
                    },
                    "code_prefix": {
                        "type": "string",
                        "description": "The string to prepend to each generated code."
                    }
                },
                "required": [
                    "num_codes",
                    "discount_amount",
                    "code_length",
                    "code_prefix"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "List[str]": {
                        "type": "array",
                        "description": "A list of unique discount codes."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'generate_discount_codes', 'description': 'Generate a specified number of unique discount codes for sales and promotions.', 'parameters': {'type': 'object', 'properties': {'num_codes': {'type': 'integer', 'description': 'The number of unique codes to generate.'}, 'discount_amount': {'type': 'float', 'description': 'The discount amount each code represents.'}, 'code_length': {'type': 'integer', 'description': 'The length of the generated codes.'}, 'code_prefix': {'type': 'string', 'description': 'The string to prepend to each generated code.'}}, 'required': ['num_codes', 'discount_amount', 'code_length', 'code_prefix']}, 'returns': {'type': 'object', 'properties': {'List[str]': {'type': 'array', 'description': 'A list of unique discount codes.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hi, I need to create some discount codes for our upcoming sale."
            },
            {
                "role": "assistant",
                "text": "Sure, I can help with that. How many discount codes would you like to generate?"
            },
            {
                "role": "user",
                "text": "I need 500 codes."
            },
            {
                "role": "assistant",
                "text": "Great, and what discount amount should each code represent?"
            },
            {
                "role": "user",
                "text": "Each code should give a 20% discount."
            },
            {
                "role": "assistant",
                "text": "Understood. And how long do you want each code to be?"
            },
            {
                "role": "user",
                "text": "Let's make each code 8 characters long."
            },
            {
                "role": "assistant",
                "text": "Perfect. Finally, is there a specific string you would like to prepend to each generated code?"
            },
            {
                "role": "user",
                "text": "Yes, please prepend each code with 'SALE20'."
            },
            {
                "role": "assistant",
                "text": "Okay, I am now generating your discount codes."
            }
        ],
        "function_call": {
            "function_name": "generate_discount_codes",
            "parameters": {
                "num_codes": 500,
                "discount_amount": 20.0,
                "code_length": 8,
                "code_prefix": "SALE20"
            }
        }
    }
}
{
    "function_id": "shopify-10",
    "task": "Track and update the inventory levels of products.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Track and update the inventory levels of products."
    },
    "snippet": "def update_inventory(\n    product_id: str,\n    change_in_quantity: int,\n    inventory: Dict[str, int],\n) -> Dict[str, int]:\n    \"\"\"\n    Track and update the inventory levels of products.\n    \n    Parameters:\n        product_id (str): The unique identifier of the product whose inventory needs to be updated.\n        change_in_quantity (int): The change in quantity of the product. A positive value denotes addition and a negative value denotes subtraction.\n        inventory (Dict[str, int]): A dictionary representing the current state of the inventory. The keys are product IDs and the values are the current stock levels.\n                                 \n    Returns:\n        Dict[str, int]: A dictionary with updated inventory levels. The keys are product IDs and the values are the updated stock levels.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def update_inventory(\n    product_id: str,\n    change_in_quantity: int,\n    inventory: Dict[str, int],\n) -> Dict[str, int]:\n    \"\"\"\n    Track and update the inventory levels of products.\n    \n    Parameters:\n        product_id (str): The unique identifier of the product whose inventory needs to be updated.\n        change_in_quantity (int): The change in quantity of the product. A positive value denotes addition and a negative value denotes subtraction.\n        inventory (Dict[str, int]): A dictionary representing the current state of the inventory. The keys are product IDs and the values are the current stock levels.\n                                 \n    Returns:\n        Dict[str, int]: A dictionary with updated inventory levels. The keys are product IDs and the values are the updated stock levels.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "update_inventory",
            "description": "Track and update the inventory levels of products.",
            "parameters": {
                "type": "object",
                "properties": {
                    "product_id": {
                        "type": "string",
                        "description": "The unique identifier of the product whose inventory needs to be updated."
                    },
                    "change_in_quantity": {
                        "type": "integer",
                        "description": "The change in quantity of the product. A positive value denotes addition and a negative value denotes subtraction."
                    },
                    "inventory": {
                        "type": "object",
                        "description": "A dictionary representing the current state of the inventory. The keys are product IDs and the values are the current stock levels.",
                        "properties": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "product_id",
                    "change_in_quantity",
                    "inventory"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "inventory": {
                        "type": "object",
                        "description": "A dictionary with updated inventory levels. The keys are product IDs and the values are the updated stock levels."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'update_inventory', 'description': 'Track and update the inventory levels of products.', 'parameters': {'type': 'object', 'properties': {'product_id': {'type': 'string', 'description': 'The unique identifier of the product whose inventory needs to be updated.'}, 'change_in_quantity': {'type': 'integer', 'description': 'The change in quantity of the product. A positive value denotes addition and a negative value denotes subtraction.'}, 'inventory': {'type': 'object', 'description': 'A dictionary representing the current state of the inventory. The keys are product IDs and the values are the current stock levels.', 'properties': {'type': 'string'}}}, 'required': ['product_id', 'change_in_quantity', 'inventory']}, 'returns': {'type': 'object', 'properties': {'inventory': {'type': 'object', 'description': 'A dictionary with updated inventory levels. The keys are product IDs and the values are the updated stock levels.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, I need to update the inventory for one of our products."
            },
            {
                "role": "assistant",
                "text": "Of course, could you give me the product ID along with the changes in quantity?"
            },
            {
                "role": "user",
                "text": "Yes, the product ID is 'ABC123' and we just received 20 more units."
            },
            {
                "role": "assistant",
                "text": "Great, could you also provide the current state of the inventory?"
            },
            {
                "role": "user",
                "text": "Sure, here is the current inventory: {'ABC123': 80, 'XYZ456': 60, 'LMN789': 75}."
            },
            {
                "role": "assistant",
                "text": "Thanks, I'll now update the inventory for product 'ABC123'."
            }
        ],
        "function_call": {
            "function_name": "update_inventory",
            "parameters": {
                "product_id": "ABC123",
                "change_in_quantity": 20,
                "inventory": {
                    "ABC123": 80,
                    "XYZ456": 60,
                    "LMN789": 75
                }
            }
        }
    }
}
{
    "function_id": "shopify-13",
    "task": "View and analyze sales reports for performance insights.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "View and analyze sales reports for performance insights."
    },
    "snippet": "def analyze_sales_reports(\n    sales_data: pd.DataFrame\n) -> Dict[str, Any]:\n    \"\"\"\n    Analyzes the sales reports for performance insights and returns a dictionary of key performance indicators.\n    \n    Parameters:\n        sales_data (pd.DataFrame): A pandas DataFrame holding the sales data. It is expected to have\n                                   columns for 'product', 'quantity', 'revenue', and 'date'.\n                                  \n    Returns:\n        Dict[str, Any]: A dictionary containing key performance insights. This could include metrics \n                        like 'total_revenue', 'best_selling_product', 'worst_day_for_sales', etc.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def analyze_sales_reports(\n    sales_data: pd.DataFrame\n) -> Dict[str, Any]:\n    \"\"\"\n    Analyzes the sales reports for performance insights and returns a dictionary of key performance indicators.\n    \n    Parameters:\n        sales_data (pd.DataFrame): A pandas DataFrame holding the sales data. It is expected to have\n                                   columns for 'product', 'quantity', 'revenue', and 'date'.\n                                  \n    Returns:\n        Dict[str, Any]: A dictionary containing key performance insights. This could include metrics \n                        like 'total_revenue', 'best_selling_product', 'worst_day_for_sales', etc.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "analyze_sales_reports",
            "description": "Analyzes the sales reports for performance insights and returns a dictionary of key performance indicators.",
            "parameters": {
                "type": "object",
                "properties": {
                    "sales_data": {
                        "type": "pd.DataFrame",
                        "description": "A pandas DataFrame holding the sales data. It is expected to have columns for 'product', 'quantity', 'revenue', and 'date'."
                    }
                },
                "required": [
                    "sales_data"
                ]
            },
            "returns": {
                "type": "Dict[str, Any]",
                "description": "A dictionary containing key performance insights. This could include metrics like 'total_revenue', 'best_selling_product', 'worst_day_for_sales', etc."
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'analyze_sales_reports', 'description': 'Analyzes the sales reports for performance insights and returns a dictionary of key performance indicators.', 'parameters': {'type': 'object', 'properties': {'sales_data': {'type': 'pd.DataFrame', 'description': \"A pandas DataFrame holding the sales data. It is expected to have columns for 'product', 'quantity', 'revenue', and 'date'.\"}}, 'required': ['sales_data']}, 'returns': {'type': 'Dict[str, Any]', 'description': \"A dictionary containing key performance insights. This could include metrics like 'total_revenue', 'best_selling_product', 'worst_day_for_sales', etc.\"}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you analyze my sales reports for performance insights?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Could you provide me with the sales data that needs to be analyzed?"
            },
            {
                "role": "user",
                "text": "Yes, I have sales data in a pandas DataFrame format. It includes columns for 'product', 'quantity', 'revenue', and 'date'."
            },
            {
                "role": "assistant",
                "text": "Great, I'm analyzing your sales reports now."
            }
        ],
        "function_call": {
            "function_name": "analyze_sales_reports",
            "parameters": {
                "sales_data": "pd.DataFrame"
            }
        }
    }
}
{
    "function_id": "shopify-14",
    "task": "Automatically calculate taxes for different regions.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Automatically calculate taxes for different regions."
    },
    "snippet": "def calculate_taxes(\n    income: float,\n    region: str,\n) -> float:\n    \"\"\"\n    Calculates the appropriate taxes based on income and regional tax rates.\n    \n    Parameters:\n        income (float): The person's total income.\n        region (str): The region in which the person resides.\n                                          \n    Returns:\n        float: The calculated taxable amount.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def calculate_taxes(\n    income: float,\n    region: str,\n) -> float:\n    \"\"\"\n    Calculates the appropriate taxes based on income and regional tax rates.\n    \n    Parameters:\n        income (float): The person's total income.\n        region (str): The region in which the person resides.\n                                          \n    Returns:\n        float: The calculated taxable amount.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "calculate_taxes",
            "description": "Calculates the appropriate taxes based on income and regional tax rates.",
            "parameters": {
                "type": "object",
                "properties": {
                    "income": {
                        "type": "float",
                        "description": "The person's total income."
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the person resides."
                    }
                },
                "required": [
                    "income",
                    "region"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "taxable_amount": {
                        "type": "float",
                        "description": "The calculated taxable amount."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'calculate_taxes', 'description': 'Calculates the appropriate taxes based on income and regional tax rates.', 'parameters': {'type': 'object', 'properties': {'income': {'type': 'float', 'description': \"The person's total income.\"}, 'region': {'type': 'string', 'description': 'The region in which the person resides.'}}, 'required': ['income', 'region']}, 'returns': {'type': 'object', 'properties': {'taxable_amount': {'type': 'float', 'description': 'The calculated taxable amount.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hi, can you calculate my taxes?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. May I know your total income and the region you reside in?"
            },
            {
                "role": "user",
                "text": "Yes, my total income is '75000' and I reside in 'Region A'."
            },
            {
                "role": "assistant",
                "text": "Great, I'm calculating your taxes now based on your income and your region."
            }
        ],
        "function_call": {
            "function_name": "calculate_taxes",
            "parameters": {
                "income": 75000,
                "region": "Region A"
            }
        }
    }
}
{
    "function_id": "shopify-15",
    "task": "Manage and update store blog posts.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Manage and update store blog posts."
    },
    "snippet": "def manage_store_blog_posts(\n    post_id: str,\n    new_content: str,\n    action: str,\n    posts: Dict[str, str]\n) -> Dict[str, str]:\n    \"\"\"\n    Manages and updates the store blog posts.\n\n    Parameters:\n        post_id (str): The ID of the blog post to manage.\n        new_content (str): The new content to update the post with.\n        action (str): The action to take on the post ('update', 'delete').\n        posts (Dict[str, str]): A dictionary with the current blog posts.\n\n    Returns:\n        Dict[str, str]: A dictionary with the updated blog posts.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def manage_store_blog_posts(\n    post_id: str,\n    new_content: str,\n    action: str,\n    posts: Dict[str, str]\n) -> Dict[str, str]:\n    \"\"\"\n    Manages and updates the store blog posts.\n\n    Parameters:\n        post_id (str): The ID of the blog post to manage.\n        new_content (str): The new content to update the post with.\n        action (str): The action to take on the post ('update', 'delete').\n        posts (Dict[str, str]): A dictionary with the current blog posts.\n\n    Returns:\n        Dict[str, str]: A dictionary with the updated blog posts.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "manage_store_blog_posts",
            "description": "Manages and updates the store blog posts.",
            "parameters": {
                "type": "object",
                "properties": {
                    "post_id": {
                        "type": "string",
                        "description": "The ID of the blog post to manage."
                    },
                    "new_content": {
                        "type": "string",
                        "description": "The new content to update the post with."
                    },
                    "action": {
                        "type": "string",
                        "description": "The action to take on the post ('update', 'delete')."
                    },
                    "posts": {
                        "type": "object",
                        "description": "A dictionary with the current blog posts.",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "post_id",
                    "new_content",
                    "action",
                    "posts"
                ]
            },
            "returns": {
                "type": "object",
                "description": "A dictionary with the updated blog posts.",
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'manage_store_blog_posts', 'description': 'Manages and updates the store blog posts.', 'parameters': {'type': 'object', 'properties': {'post_id': {'type': 'string', 'description': 'The ID of the blog post to manage.'}, 'new_content': {'type': 'string', 'description': 'The new content to update the post with.'}, 'action': {'type': 'string', 'description': \"The action to take on the post ('update', 'delete').\"}, 'posts': {'type': 'object', 'description': 'A dictionary with the current blog posts.', 'properties': {'key': {'type': 'string'}, 'value': {'type': 'string'}}}}, 'required': ['post_id', 'new_content', 'action', 'posts']}, 'returns': {'type': 'object', 'description': 'A dictionary with the updated blog posts.', 'properties': {'key': {'type': 'string'}, 'value': {'type': 'string'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, I would like to update one of my blog posts on the store."
            },
            {
                "role": "assistant",
                "text": "Sure, I can assist you with that. May I have the ID of the blog post you want to manage?"
            },
            {
                "role": "user",
                "text": "Yes, the post ID is '12abcd'."
            },
            {
                "role": "assistant",
                "text": "Okay, do you have the new content for the post?"
            },
            {
                "role": "user",
                "text": "Yes, here's my new content for the post..."
            },
            {
                "role": "assistant",
                "text": "Great, and finally, can you confirm that you want to update this post?"
            },
            {
                "role": "user",
                "text": "Yes, update the post."
            },
            {
                "role": "assistant",
                "text": "Noted. I'm updating your blog post now."
            }
        ],
        "function_call": {
            "function_name": "manage_store_blog_posts",
            "parameters": {
                "post_id": "12abcd",
                "new_content": "User's new content...",
                "action": "update",
                "posts": {}
            }
        }
    }
}
{
    "function_id": "shopify-16",
    "task": "Add or update product reviews and ratings.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Add or update product reviews and ratings."
    },
    "snippet": "def update_product_reviews(\n    product_id: int,\n    review: str,\n    rating: int,\n) -> Dict[str, str]:\n    \"\"\"\n    Updates or adds a product review and rating.\n\n    Parameters:\n        product_id (int): The ID of the product to be reviewed.\n        review (str): The review text.\n        rating (int): The product rating out of 5.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key and the status of the update operation as a value. Possible values are 'success' or 'failure'.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def update_product_reviews(\n    product_id: int,\n    review: str,\n    rating: int,\n) -> Dict[str, str]:\n    \"\"\"\n    Updates or adds a product review and rating.\n\n    Parameters:\n        product_id (int): The ID of the product to be reviewed.\n        review (str): The review text.\n        rating (int): The product rating out of 5.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key and the status of the update operation as a value. Possible values are 'success' or 'failure'.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "update_product_reviews",
            "description": "Updates or adds a product review and rating.",
            "parameters": {
                "type": "object",
                "properties": {
                    "product_id": {
                        "type": "integer",
                        "description": "The ID of the product to be reviewed."
                    },
                    "review": {
                        "type": "string",
                        "description": "The review text."
                    },
                    "rating": {
                        "type": "integer",
                        "description": "The product rating out of 5."
                    }
                },
                "required": [
                    "product_id",
                    "review",
                    "rating"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "The status of the update operation. Possible values are 'success' or 'failure'."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'update_product_reviews', 'description': 'Updates or adds a product review and rating.', 'parameters': {'type': 'object', 'properties': {'product_id': {'type': 'integer', 'description': 'The ID of the product to be reviewed.'}, 'review': {'type': 'string', 'description': 'The review text.'}, 'rating': {'type': 'integer', 'description': 'The product rating out of 5.'}}, 'required': ['product_id', 'review', 'rating']}, 'returns': {'type': 'object', 'properties': {'status': {'type': 'string', 'description': \"The status of the update operation. Possible values are 'success' or 'failure'.\"}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you help me update a product review?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Can you please provide me with the product ID, the text of the review, and your rating out of 5?"
            },
            {
                "role": "user",
                "text": "Yes, the product ID is '12345', my review is 'Great product, would highly recommend!', and my rating is '5'."
            },
            {
                "role": "assistant",
                "text": "Great, I'm updating your product review now."
            }
        ],
        "function_call": {
            "function_name": "update_product_reviews",
            "parameters": {
                "product_id": 12345,
                "review": "Great product, would highly recommend!",
                "rating": 5
            }
        }
    }
}
{
    "function_id": "shopify-17",
    "task": "Manage the customer wishlist functionality.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Manage the customer wishlist functionality."
    },
    "snippet": "def manage_customer_wishlist(\n    customer_id: int,\n    action: str,\n    product_id: Optional[int] = None\n) -> Dict[str, Union[str, bool]] :\n    \"\"\"\n    Manages the customer wishlist functionality, allowing to add or remove items from the wishlist.\n\n    Parameters:\n        customer_id (int): The unique identifier of the customer.\n        action (str): The action to be performed. Should be either 'add' or 'remove'.\n        product_id (Optional[int]): The unique identifier of the product to add or remove.\n                                    Required if action is 'add' or 'remove'.\n\n    Returns:\n        Dict[str, Union[str, bool]]: A dictionary with keys 'message' and 'success'. 'message' contains\n                                      information about the execution and 'success' is a boolean indicating whether the\n                                      action was successful or not.\n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def manage_customer_wishlist(\n    customer_id: int,\n    action: str,\n    product_id: Optional[int] = None\n) -> Dict[str, Union[str, bool]] :\n    \"\"\"\n    Manages the customer wishlist functionality, allowing to add or remove items from the wishlist.\n\n    Parameters:\n        customer_id (int): The unique identifier of the customer.\n        action (str): The action to be performed. Should be either 'add' or 'remove'.\n        product_id (Optional[int]): The unique identifier of the product to add or remove.\n                                    Required if action is 'add' or 'remove'.\n\n    Returns:\n        Dict[str, Union[str, bool]]: A dictionary with keys 'message' and 'success'. 'message' contains\n                                      information about the execution and 'success' is a boolean indicating whether the\n                                      action was successful or not.\n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "manage_customer_wishlist",
            "description": "Manages the customer wishlist functionality, allowing to add or remove items from the wishlist.",
            "parameters": {
                "type": "object",
                "properties": {
                    "customer_id": {
                        "type": "integer",
                        "description": "The unique identifier of the customer."
                    },
                    "action": {
                        "type": "string",
                        "description": "The action to be performed. Should be either 'add' or 'remove'."
                    },
                    "product_id": {
                        "type": "integer",
                        "description": "The unique identifier of the product to add or remove. Required if action is 'add' or 'remove'."
                    }
                },
                "required": [
                    "customer_id",
                    "action"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "Information about the execution."
                    },
                    "success": {
                        "type": "boolean",
                        "description": "A boolean indicating whether the action was successful or not."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'manage_customer_wishlist', 'description': 'Manages the customer wishlist functionality, allowing to add or remove items from the wishlist.', 'parameters': {'type': 'object', 'properties': {'customer_id': {'type': 'integer', 'description': 'The unique identifier of the customer.'}, 'action': {'type': 'string', 'description': \"The action to be performed. Should be either 'add' or 'remove'.\"}, 'product_id': {'type': 'integer', 'description': \"The unique identifier of the product to add or remove. Required if action is 'add' or 'remove'.\"}}, 'required': ['customer_id', 'action']}, 'returns': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Information about the execution.'}, 'success': {'type': 'boolean', 'description': 'A boolean indicating whether the action was successful or not.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hi, can you add an item to my wishlist?"
            },
            {
                "role": "assistant",
                "text": "Absolutely, I am able to help with that. Can I have your customer ID please?"
            },
            {
                "role": "user",
                "text": "My customer ID is '9786'."
            },
            {
                "role": "assistant",
                "text": "Thank you. Could you also let me know the product ID that you would like to add to your wishlist?"
            },
            {
                "role": "user",
                "text": "Sure, the product ID is '4562'."
            },
            {
                "role": "assistant",
                "text": "Perfect, I'm adding the product to your wishlist now."
            }
        ],
        "function_call": {
            "function_name": "manage_customer_wishlist",
            "parameters": {
                "customer_id": 9786,
                "action": "add",
                "product_id": 4562
            }
        }
    }
}
{
    "function_id": "shopify-18",
    "task": "Set and manage staff roles and permissions.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Set and manage staff roles and permissions."
    },
    "snippet": "def manage_staff_roles(\n    staff_id: int,\n    new_role: str,\n    permissions: List[str],\n) -> Dict[str, str]:\n    \"\"\"\n    Sets and manages staff roles and permissions.\n    \n    Parameters:\n        staff_id (int): The identification number of the staff member.\n        new_role (str): The new role to be assigned to the staff member.\n        permissions (List[str]): A list of permissions to be granted with the new role.\n        \n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key, indicating whether the operation was successful or not, \n                        and 'message' as a key, providing further details on the operation's outcome.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def manage_staff_roles(\n    staff_id: int,\n    new_role: str,\n    permissions: List[str],\n) -> Dict[str, str]:\n    \"\"\"\n    Sets and manages staff roles and permissions.\n    \n    Parameters:\n        staff_id (int): The identification number of the staff member.\n        new_role (str): The new role to be assigned to the staff member.\n        permissions (List[str]): A list of permissions to be granted with the new role.\n        \n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key, indicating whether the operation was successful or not, \n                        and 'message' as a key, providing further details on the operation's outcome.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "manage_staff_roles",
            "description": "Sets and manages staff roles and permissions.",
            "parameters": {
                "type": "object",
                "properties": {
                    "staff_id": {
                        "type": "integer",
                        "description": "The identification number of the staff member."
                    },
                    "new_role": {
                        "type": "string",
                        "description": "The new role to be assigned to the staff member."
                    },
                    "permissions": {
                        "type": "array",
                        "description": "A list of permissions to be granted with the new role.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "staff_id",
                    "new_role",
                    "permissions"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Indicates whether the operation was successful or not."
                    },
                    "message": {
                        "type": "string",
                        "description": "Provides further details on the operation's outcome."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'manage_staff_roles', 'description': 'Sets and manages staff roles and permissions.', 'parameters': {'type': 'object', 'properties': {'staff_id': {'type': 'integer', 'description': 'The identification number of the staff member.'}, 'new_role': {'type': 'string', 'description': 'The new role to be assigned to the staff member.'}, 'permissions': {'type': 'array', 'description': 'A list of permissions to be granted with the new role.', 'items': {'type': 'string'}}}, 'required': ['staff_id', 'new_role', 'permissions']}, 'returns': {'type': 'object', 'properties': {'status': {'type': 'string', 'description': 'Indicates whether the operation was successful or not.'}, 'message': {'type': 'string', 'description': \"Provides further details on the operation's outcome.\"}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, I need to change a staff member's role and permissions."
            },
            {
                "role": "assistant",
                "text": "Sure, I can assist you with that. Could you please provide me with the staff ID?"
            },
            {
                "role": "user",
                "text": "Yes, the staff id is '2001'."
            },
            {
                "role": "assistant",
                "text": "Thank you. Now, could you please specify the new role you want to assign to this staff member?"
            },
            {
                "role": "user",
                "text": "The new role should be 'manager'."
            },
            {
                "role": "assistant",
                "text": "Got it. Lastly, could you give me the list of permissions you want to grant with this role?"
            },
            {
                "role": "user",
                "text": "The permissions should be 'read', 'write' and 'edit'."
            },
            {
                "role": "assistant",
                "text": "Alright, I'm changing the staff member's role to 'manager' and adding the specified permissions now."
            }
        ],
        "function_call": {
            "function_name": "manage_staff_roles",
            "parameters": {
                "staff_id": 2001,
                "new_role": "manager",
                "permissions": [
                    "read",
                    "write",
                    "edit"
                ]
            }
        }
    }
}
{
    "function_id": "shopify-19",
    "task": "Handle returns and refunds for orders.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Handle returns and refunds for orders."
    },
    "snippet": "def handle_returns_and_refunds(\n    order_id: str,\n    customer_id: str,\n    product_id: str,\n    refund_amount: float,\n) -> Dict[str, Any]:\n    \"\"\"\n    Handles returns and refunds for orders.\n    \n    Parameters:\n        order_id (str): The id of the order to be returned.\n        customer_id (str): The id of the customer making the return.\n        product_id (str): The id of the product being returned.\n        refund_amount (float): The amount to be refunded to the customer.\n\n    Returns:\n        Dict[str, Any]: A dictionary with the status and details of the return and refund \n                        request. This could contain keys like 'status', 'message', 'refund_amount',\n                        'order_id', 'customer_id', and 'product_id'.\n    \"\"\"\n    # Implementation goes here\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def handle_returns_and_refunds(\n    order_id: str,\n    customer_id: str,\n    product_id: str,\n    refund_amount: float,\n) -> Dict[str, Any]:\n    \"\"\"\n    Handles returns and refunds for orders.\n    \n    Parameters:\n        order_id (str): The id of the order to be returned.\n        customer_id (str): The id of the customer making the return.\n        product_id (str): The id of the product being returned.\n        refund_amount (float): The amount to be refunded to the customer.\n\n    Returns:\n        Dict[str, Any]: A dictionary with the status and details of the return and refund \n                        request. This could contain keys like 'status', 'message', 'refund_amount',\n                        'order_id', 'customer_id', and 'product_id'.\n    \"\"\"\n    # Implementation goes here\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "handle_returns_and_refunds",
            "description": "Handles returns and refunds for orders.",
            "parameters": {
                "type": "object",
                "properties": {
                    "order_id": {
                        "type": "string",
                        "description": "The id of the order to be returned."
                    },
                    "customer_id": {
                        "type": "string",
                        "description": "The id of the customer making the return."
                    },
                    "product_id": {
                        "type": "string",
                        "description": "The id of the product being returned."
                    },
                    "refund_amount": {
                        "type": "float",
                        "description": "The amount to be refunded to the customer."
                    }
                },
                "required": [
                    "order_id",
                    "customer_id",
                    "product_id",
                    "refund_amount"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "The status of the return and refund request."
                    },
                    "message": {
                        "type": "string",
                        "description": "Additional details about the return and refund request."
                    },
                    "refund_amount": {
                        "type": "float",
                        "description": "The actual amount refunded to the customer."
                    },
                    "order_id": {
                        "type": "string",
                        "description": "The id of the order that was returned."
                    },
                    "customer_id": {
                        "type": "string",
                        "description": "The id of the customer who made the return."
                    },
                    "product_id": {
                        "type": "string",
                        "description": "The id of the product that was returned."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'handle_returns_and_refunds', 'description': 'Handles returns and refunds for orders.', 'parameters': {'type': 'object', 'properties': {'order_id': {'type': 'string', 'description': 'The id of the order to be returned.'}, 'customer_id': {'type': 'string', 'description': 'The id of the customer making the return.'}, 'product_id': {'type': 'string', 'description': 'The id of the product being returned.'}, 'refund_amount': {'type': 'float', 'description': 'The amount to be refunded to the customer.'}}, 'required': ['order_id', 'customer_id', 'product_id', 'refund_amount']}, 'returns': {'type': 'object', 'properties': {'status': {'type': 'string', 'description': 'The status of the return and refund request.'}, 'message': {'type': 'string', 'description': 'Additional details about the return and refund request.'}, 'refund_amount': {'type': 'float', 'description': 'The actual amount refunded to the customer.'}, 'order_id': {'type': 'string', 'description': 'The id of the order that was returned.'}, 'customer_id': {'type': 'string', 'description': 'The id of the customer who made the return.'}, 'product_id': {'type': 'string', 'description': 'The id of the product that was returned.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, I want to return an order and get a refund."
            },
            {
                "role": "assistant",
                "text": "Sure, I can assist with that. Can you please provide the order ID?"
            },
            {
                "role": "user",
                "text": "Yes, the order ID is 'ORD123'."
            },
            {
                "role": "assistant",
                "text": "Alright, can I also have your customer ID and the product ID you want to return? And how much is the refund amount?"
            },
            {
                "role": "user",
                "text": "My customer ID is 'CUST456'. The product ID is 'PROD789' and the refund amount is $50."
            },
            {
                "role": "assistant",
                "text": "Got it. I'm processing your return and refund request now."
            }
        ],
        "function_call": {
            "function_name": "handle_returns_and_refunds",
            "parameters": {
                "order_id": "ORD123",
                "customer_id": "CUST456",
                "product_id": "PROD789",
                "refund_amount": 50.0
            }
        }
    }
}
{
    "function_id": "shopify-21",
    "task": "Schedule and manage flash sales or special events.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Schedule and manage flash sales or special events."
    },
    "snippet": "def schedule_flash_sale(\n    sale_start_time: str,\n    sale_end_time: str,\n    discount_percentage: float,\n    items_on_sale: List[Dict[str, str]],\n) -> Dict[str, str]:\n    \"\"\"\n    Schedule and manage flash sales or special events.\n\n    Parameters:\n        sale_start_time (str): The start time of the sale in the format 'YYYY-MM-DD HH:MM:SS'.\n        sale_end_time (str): The end time of the sale in the format 'YYYY-MM-DD HH:MM:SS'.\n        discount_percentage (float): The percentage of discount for the sale.\n        items_on_sale (List[Dict[str, str]]): A list of dictionaries where each dictionary represents an item on sale. \n                                               Each dictionary should have 'itemId' and 'itemName' keys.\n\n    Returns:\n        Dictionary with 'status' as a key and the status of the scheduling as a value.\n        Possible status: 'Sale scheduled', 'Failed to schedule sale.'\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def schedule_flash_sale(\n    sale_start_time: str,\n    sale_end_time: str,\n    discount_percentage: float,\n    items_on_sale: List[Dict[str, str]],\n) -> Dict[str, str]:\n    \"\"\"\n    Schedule and manage flash sales or special events.\n\n    Parameters:\n        sale_start_time (str): The start time of the sale in the format 'YYYY-MM-DD HH:MM:SS'.\n        sale_end_time (str): The end time of the sale in the format 'YYYY-MM-DD HH:MM:SS'.\n        discount_percentage (float): The percentage of discount for the sale.\n        items_on_sale (List[Dict[str, str]]): A list of dictionaries where each dictionary represents an item on sale. \n                                               Each dictionary should have 'itemId' and 'itemName' keys.\n\n    Returns:\n        Dictionary with 'status' as a key and the status of the scheduling as a value.\n        Possible status: 'Sale scheduled', 'Failed to schedule sale.'\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "schedule_flash_sale",
            "description": "Schedule and manage flash sales or special events.",
            "parameters": {
                "type": "object",
                "properties": {
                    "sale_start_time": {
                        "type": "string",
                        "description": "The start time of the sale in the format 'YYYY-MM-DD HH:MM:SS'."
                    },
                    "sale_end_time": {
                        "type": "string",
                        "description": "The end time of the sale in the format 'YYYY-MM-DD HH:MM:SS'."
                    },
                    "discount_percentage": {
                        "type": "float",
                        "description": "The percentage of discount for the sale."
                    },
                    "items_on_sale": {
                        "type": "array",
                        "description": "A list of dictionaries where each dictionary represents an item on sale. Each dictionary should have 'itemId' and 'itemName' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "itemId": {
                                    "type": "string"
                                },
                                "itemName": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "itemId",
                                "itemName"
                            ]
                        }
                    }
                },
                "required": [
                    "sale_start_time",
                    "sale_end_time",
                    "discount_percentage",
                    "items_on_sale"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "The status of the scheduling. Possible status: 'Sale scheduled', 'Failed to schedule sale.'"
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'schedule_flash_sale', 'description': 'Schedule and manage flash sales or special events.', 'parameters': {'type': 'object', 'properties': {'sale_start_time': {'type': 'string', 'description': \"The start time of the sale in the format 'YYYY-MM-DD HH:MM:SS'.\"}, 'sale_end_time': {'type': 'string', 'description': \"The end time of the sale in the format 'YYYY-MM-DD HH:MM:SS'.\"}, 'discount_percentage': {'type': 'float', 'description': 'The percentage of discount for the sale.'}, 'items_on_sale': {'type': 'array', 'description': \"A list of dictionaries where each dictionary represents an item on sale. Each dictionary should have 'itemId' and 'itemName' keys.\", 'items': {'type': 'object', 'properties': {'itemId': {'type': 'string'}, 'itemName': {'type': 'string'}}, 'required': ['itemId', 'itemName']}}}, 'required': ['sale_start_time', 'sale_end_time', 'discount_percentage', 'items_on_sale']}, 'returns': {'type': 'object', 'properties': {'status': {'type': 'string', 'description': \"The status of the scheduling. Possible status: 'Sale scheduled', 'Failed to schedule sale.'\"}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "I want to set up a flash sale. Can you assist?"
            },
            {
                "role": "assistant",
                "text": "Of course, I can help with that. May I know the start and end time of the sale, the discount percentage, and the items on sale?"
            },
            {
                "role": "user",
                "text": "The sale should start at '2022-12-01 08:00:00' and end at '2022-12-02 08:00:00'. The discount is 50 percent. For the items, the itemId 'A111' and itemName 'Winter Jacket', and itemId 'A112' and itemName 'Winter Boots'."
            },
            {
                "role": "assistant",
                "text": "Great, I'm scheduling your flash sale now."
            }
        ],
        "function_call": {
            "function_name": "schedule_flash_sale",
            "parameters": {
                "sale_start_time": "2022-12-01 08:00:00",
                "sale_end_time": "2022-12-02 08:00:00",
                "discount_percentage": 0.5,
                "items_on_sale": [
                    {
                        "itemId": "A111",
                        "itemName": "Winter Jacket"
                    },
                    {
                        "itemId": "A112",
                        "itemName": "Winter Boots"
                    }
                ]
            }
        }
    }
}
{
    "function_id": "shopify-23",
    "task": "Send automated emails for abandoned cart recovery.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Send automated emails for abandoned cart recovery."
    },
    "snippet": "def send_abandoned_cart_recovery_email(\n    customer_email: str,\n    abandoned_cart_details: Dict[str, Any],\n) -> None:\n    \"\"\"\n    Sends an automated email to customers who have abandoned their shopping carts.\n\n    Parameters:\n        customer_email (str): The email address of the customer.\n        abandoned_cart_details (Dict[str, Any]): A dictionary containing details of the abandoned cart.\n                                                  It may include 'cart_id', 'items', 'total_price', etc.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def send_abandoned_cart_recovery_email(\n    customer_email: str,\n    abandoned_cart_details: Dict[str, Any],\n) -> None:\n    \"\"\"\n    Sends an automated email to customers who have abandoned their shopping carts.\n\n    Parameters:\n        customer_email (str): The email address of the customer.\n        abandoned_cart_details (Dict[str, Any]): A dictionary containing details of the abandoned cart.\n                                                  It may include 'cart_id', 'items', 'total_price', etc.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "send_abandoned_cart_recovery_email",
            "description": "Sends an automated email to customers who have abandoned their shopping carts.",
            "parameters": {
                "type": "object",
                "properties": {
                    "customer_email": {
                        "type": "string",
                        "description": "The email address of the customer."
                    },
                    "abandoned_cart_details": {
                        "type": "object",
                        "description": "A dictionary containing details of the abandoned cart. It may include 'cart_id', 'items', 'total_price', etc.",
                        "properties": {
                            "cart_id": {
                                "type": "string"
                            },
                            "items": {
                                "type": "array"
                            },
                            "total_price": {
                                "type": "float"
                            }
                        }
                    }
                },
                "required": [
                    "customer_email",
                    "abandoned_cart_details"
                ]
            },
            "returns": {
                "type": "null",
                "description": "This function does not return any value."
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'send_abandoned_cart_recovery_email', 'description': 'Sends an automated email to customers who have abandoned their shopping carts.', 'parameters': {'type': 'object', 'properties': {'customer_email': {'type': 'string', 'description': 'The email address of the customer.'}, 'abandoned_cart_details': {'type': 'object', 'description': \"A dictionary containing details of the abandoned cart. It may include 'cart_id', 'items', 'total_price', etc.\", 'properties': {'cart_id': {'type': 'string'}, 'items': {'type': 'array'}, 'total_price': {'type': 'float'}}}}, 'required': ['customer_email', 'abandoned_cart_details']}, 'returns': {'type': 'null', 'description': 'This function does not return any value.'}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, I see that some customers have abandoned their carts. Can you send them a recovery email?"
            },
            {
                "role": "assistant",
                "text": "Certainly, I can do that. May I have the email address of the customer and the details of the abandoned cart?"
            },
            {
                "role": "user",
                "text": "Yes, the customer email is 'john_doe@email.com'. The cart id is 'CART123', it has 3 items and total price is 100.5 dollars."
            },
            {
                "role": "assistant",
                "text": "Great, I am sending the abandoned cart recovery email now."
            }
        ],
        "function_call": {
            "function_name": "send_abandoned_cart_recovery_email",
            "parameters": {
                "customer_email": "john_doe@email.com",
                "abandoned_cart_details": {
                    "cart_id": "CART123",
                    "items": [
                        "item1",
                        "item2",
                        "item3"
                    ],
                    "total_price": 100.5
                }
            }
        }
    }
}
{
    "function_id": "shopify-26",
    "task": "Run and manage affiliate programs.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Run and manage affiliate programs."
    },
    "snippet": "def manage_affiliate_program(\n    program_details: Dict[str, Union[str, int, float]],\n    affiliates: List[Dict[str, Any]],\n    transactions: List[Dict[str, Any]]\n) -> Dict[str, Any]:\n    \"\"\"\n    Runs and manages affiliate programs.\n\n    Parameters:\n        program_details (Dict[str, Union[str, int, float]]): A dictionary containing details about the program.\n                                                             Fields could include 'name', 'commission_rate', etc.\n        affiliates (List[Dict[str, Any]]): A list of dictionaries, where each dictionary represents an affiliate.\n                                            Each affiliate's dictionary should have details like 'id', 'name', etc.\n        transactions (List[Dict[str, Any]]): A list of dictionaries, where each dictionary represents a transaction.\n                                               Each transaction's dictionary should have details like 'affiliate_id', 'sale_amount', etc.\n\n    Returns:\n        Dict[str, Any]: A dictionary with summary information about the managed affiliate program.\n                         This could include total sales, total commission paid out, etc.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def manage_affiliate_program(\n    program_details: Dict[str, Union[str, int, float]],\n    affiliates: List[Dict[str, Any]],\n    transactions: List[Dict[str, Any]]\n) -> Dict[str, Any]:\n    \"\"\"\n    Runs and manages affiliate programs.\n\n    Parameters:\n        program_details (Dict[str, Union[str, int, float]]): A dictionary containing details about the program.\n                                                             Fields could include 'name', 'commission_rate', etc.\n        affiliates (List[Dict[str, Any]]): A list of dictionaries, where each dictionary represents an affiliate.\n                                            Each affiliate's dictionary should have details like 'id', 'name', etc.\n        transactions (List[Dict[str, Any]]): A list of dictionaries, where each dictionary represents a transaction.\n                                               Each transaction's dictionary should have details like 'affiliate_id', 'sale_amount', etc.\n\n    Returns:\n        Dict[str, Any]: A dictionary with summary information about the managed affiliate program.\n                         This could include total sales, total commission paid out, etc.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "manage_affiliate_program",
            "description": "Runs and manages affiliate programs.",
            "parameters": {
                "type": "object",
                "properties": {
                    "program_details": {
                        "type": "object",
                        "description": "A dictionary containing details about the program. Fields could include 'name', 'commission_rate', etc.",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "commission_rate": {
                                "type": [
                                    "integer",
                                    "float"
                                ]
                            }
                        }
                    },
                    "affiliates": {
                        "type": "array",
                        "description": "A list of dictionaries, where each dictionary represents an affiliate. Each affiliate's dictionary should have details like 'id', 'name', etc.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string"
                                },
                                "name": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "id",
                                "name"
                            ]
                        }
                    },
                    "transactions": {
                        "type": "array",
                        "description": "A list of dictionaries, where each dictionary represents a transaction. Each transaction's dictionary should have details like 'affiliate_id', 'sale_amount', etc.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "affiliate_id": {
                                    "type": "string"
                                },
                                "sale_amount": {
                                    "type": [
                                        "integer",
                                        "float"
                                    ]
                                }
                            },
                            "required": [
                                "affiliate_id",
                                "sale_amount"
                            ]
                        }
                    }
                },
                "required": [
                    "program_details",
                    "affiliates",
                    "transactions"
                ]
            },
            "returns": {
                "type": "object",
                "description": "A dictionary with summary information about the managed affiliate program. This could include total sales, total commission paid out, etc.",
                "properties": {
                    "total_sales": {
                        "type": [
                            "integer",
                            "float"
                        ]
                    },
                    "total_commission": {
                        "type": [
                            "integer",
                            "float"
                        ]
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'manage_affiliate_program', 'description': 'Runs and manages affiliate programs.', 'parameters': {'type': 'object', 'properties': {'program_details': {'type': 'object', 'description': \"A dictionary containing details about the program. Fields could include 'name', 'commission_rate', etc.\", 'properties': {'name': {'type': 'string'}, 'commission_rate': {'type': ['integer', 'float']}}}, 'affiliates': {'type': 'array', 'description': \"A list of dictionaries, where each dictionary represents an affiliate. Each affiliate's dictionary should have details like 'id', 'name', etc.\", 'items': {'type': 'object', 'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'required': ['id', 'name']}}, 'transactions': {'type': 'array', 'description': \"A list of dictionaries, where each dictionary represents a transaction. Each transaction's dictionary should have details like 'affiliate_id', 'sale_amount', etc.\", 'items': {'type': 'object', 'properties': {'affiliate_id': {'type': 'string'}, 'sale_amount': {'type': ['integer', 'float']}}, 'required': ['affiliate_id', 'sale_amount']}}}, 'required': ['program_details', 'affiliates', 'transactions']}, 'returns': {'type': 'object', 'description': 'A dictionary with summary information about the managed affiliate program. This could include total sales, total commission paid out, etc.', 'properties': {'total_sales': {'type': ['integer', 'float']}, 'total_commission': {'type': ['integer', 'float']}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you manage my affiliate program?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Could you please provide me with the details of your program?"
            },
            {
                "role": "user",
                "text": "Yes, my program name is 'Super Affiliates', and the commission rate is 10%"
            },
            {
                "role": "assistant",
                "text": "Great, and can you tell me about the affiliates?"
            },
            {
                "role": "user",
                "text": "Yes, I have two affiliates. The first one is John with ID '1234' and the second one is Maria with ID '5678'"
            },
            {
                "role": "assistant",
                "text": "Thanks for the information. Now, can you provide me with the details of the transactions?"
            },
            {
                "role": "user",
                "text": "Sure. John has made a sale of $500 and Maria has made a sale of $400."
            },
            {
                "role": "assistant",
                "text": "Great, I'm managing your affiliate program now."
            }
        ],
        "function_call": {
            "function_name": "manage_affiliate_program",
            "parameters": {
                "program_details": {
                    "name": "Super Affiliates",
                    "commission_rate": 10
                },
                "affiliates": [
                    {
                        "id": "1234",
                        "name": "John"
                    },
                    {
                        "id": "5678",
                        "name": "Maria"
                    }
                ],
                "transactions": [
                    {
                        "affiliate_id": "1234",
                        "sale_amount": 500
                    },
                    {
                        "affiliate_id": "5678",
                        "sale_amount": 400
                    }
                ]
            }
        }
    }
}
