{
    "function_id": "design-consultant-1",
    "task": "Create a new project outline or scope of work for a client.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Create a new project outline or scope of work for a client."
    },
    "snippet": "def create_project_outline(\n    client_name: str,\n    project_name: str,\n    project_description: str,\n    project_start_date: str,\n    project_end_date: str,\n    project_deliverables: List[str],\n    project_team: List[Dict[str, str]]\n) -> Dict[str, Any]:\n    \"\"\"\n    Creates a new project outline or scope of work for a client.\n\n    Parameters:\n        client_name (str): The name of the client.\n        project_name (str): The name of the project.\n        project_description (str): A brief description of the project.\n        project_start_date (str): The start date of the project in YYYY-MM-DD format.\n        project_end_date (str): The end date of the project in YYYY-MM-DD format.\n        project_deliverables (List[str]): A list of project deliverables.\n        project_team (List[Dict[str, str]]): A list of dictionaries containing project team member details.\n                                            Each dictionary should have 'name' and 'role' keys.\n\n    Returns:\n        Dict[str, Any]: A dictionary representing the project outline. It should contain keys such as 'client_name',\n        'project_name', 'project_description', 'project_start_date', 'project_end_date', 'project_deliverables', and \n        'project_team'.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def create_project_outline(\n    client_name: str,\n    project_name: str,\n    project_description: str,\n    project_start_date: str,\n    project_end_date: str,\n    project_deliverables: List[str],\n    project_team: List[Dict[str, str]]\n) -> Dict[str, Any]:\n    \"\"\"\n    Creates a new project outline or scope of work for a client.\n\n    Parameters:\n        client_name (str): The name of the client.\n        project_name (str): The name of the project.\n        project_description (str): A brief description of the project.\n        project_start_date (str): The start date of the project in YYYY-MM-DD format.\n        project_end_date (str): The end date of the project in YYYY-MM-DD format.\n        project_deliverables (List[str]): A list of project deliverables.\n        project_team (List[Dict[str, str]]): A list of dictionaries containing project team member details.\n                                            Each dictionary should have 'name' and 'role' keys.\n\n    Returns:\n        Dict[str, Any]: A dictionary representing the project outline. It should contain keys such as 'client_name',\n        'project_name', 'project_description', 'project_start_date', 'project_end_date', 'project_deliverables', and \n        'project_team'.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "create_project_outline",
            "description": "Creates a new project outline or scope of work for a client.",
            "parameters": {
                "type": "object",
                "properties": {
                    "client_name": {
                        "type": "string",
                        "description": "The name of the client."
                    },
                    "project_name": {
                        "type": "string",
                        "description": "The name of the project."
                    },
                    "project_description": {
                        "type": "string",
                        "description": "A brief description of the project."
                    },
                    "project_start_date": {
                        "type": "string",
                        "description": "The start date of the project in YYYY-MM-DD format."
                    },
                    "project_end_date": {
                        "type": "string",
                        "description": "The end date of the project in YYYY-MM-DD format."
                    },
                    "project_deliverables": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of project deliverables."
                    },
                    "project_team": {
                        "type": "array",
                        "description": "A list of dictionaries containing project team member details. Each dictionary should have 'name' and 'role' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "role": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "name",
                                "role"
                            ]
                        }
                    }
                },
                "required": [
                    "client_name",
                    "project_name",
                    "project_description",
                    "project_start_date",
                    "project_end_date",
                    "project_deliverables",
                    "project_team"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "client_name": {
                        "type": "string"
                    },
                    "project_name": {
                        "type": "string"
                    },
                    "project_description": {
                        "type": "string"
                    },
                    "project_start_date": {
                        "type": "string"
                    },
                    "project_end_date": {
                        "type": "string"
                    },
                    "project_deliverables": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "project_team": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "role": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "description": "A dictionary representing the project outline. It should contain keys such as 'client_name', 'project_name', 'project_description', 'project_start_date', 'project_end_date', 'project_deliverables', and 'project_team'."
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'create_project_outline', 'description': 'Creates a new project outline or scope of work for a client.', 'parameters': {'type': 'object', 'properties': {'client_name': {'type': 'string', 'description': 'The name of the client.'}, 'project_name': {'type': 'string', 'description': 'The name of the project.'}, 'project_description': {'type': 'string', 'description': 'A brief description of the project.'}, 'project_start_date': {'type': 'string', 'description': 'The start date of the project in YYYY-MM-DD format.'}, 'project_end_date': {'type': 'string', 'description': 'The end date of the project in YYYY-MM-DD format.'}, 'project_deliverables': {'type': 'array', 'items': {'type': 'string'}, 'description': 'A list of project deliverables.'}, 'project_team': {'type': 'array', 'description': \"A list of dictionaries containing project team member details. Each dictionary should have 'name' and 'role' keys.\", 'items': {'type': 'object', 'properties': {'name': {'type': 'string'}, 'role': {'type': 'string'}}, 'required': ['name', 'role']}}}, 'required': ['client_name', 'project_name', 'project_description', 'project_start_date', 'project_end_date', 'project_deliverables', 'project_team']}, 'returns': {'type': 'object', 'properties': {'client_name': {'type': 'string'}, 'project_name': {'type': 'string'}, 'project_description': {'type': 'string'}, 'project_start_date': {'type': 'string'}, 'project_end_date': {'type': 'string'}, 'project_deliverables': {'type': 'array', 'items': {'type': 'string'}}, 'project_team': {'type': 'array', 'items': {'type': 'object', 'properties': {'name': {'type': 'string'}, 'role': {'type': 'string'}}}}}, 'description': \"A dictionary representing the project outline. It should contain keys such as 'client_name', 'project_name', 'project_description', 'project_start_date', 'project_end_date', 'project_deliverables', and 'project_team'.\"}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, I need to create a project outline for a client, can you help me with that?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can help with that. Can you provide me some details about the project such as client's name, project's name, a brief description, start and end dates, deliverables and team members with their roles?"
            },
            {
                "role": "user",
                "text": "Yes, the client's name is 'ABC Corp.', project's name is 'XYZ Development', description is 'A software development project', start date is '2022-08-01', end date is '2023-07-31'. The deliverables are 'Software', 'Documentation', 'Training', and the team members are 'John-Doe, Developer', 'Jane-Doe, Tester', 'Jack-Doe, Project Manager'."
            },
            {
                "role": "assistant",
                "text": "Great, I'm creating the project outline now."
            }
        ],
        "function_call": {
            "function_name": "create_project_outline",
            "parameters": {
                "client_name": "ABC Corp.",
                "project_name": "XYZ Development",
                "project_description": "A software development project",
                "project_start_date": "2022-08-01",
                "project_end_date": "2023-07-31",
                "project_deliverables": [
                    "Software",
                    "Documentation",
                    "Training"
                ],
                "project_team": [
                    {
                        "name": "John-Doe",
                        "role": "Developer"
                    },
                    {
                        "name": "Jane-Doe",
                        "role": "Tester"
                    },
                    {
                        "name": "Jack-Doe",
                        "role": "Project Manager"
                    }
                ]
            }
        }
    }
}
{
    "function_id": "design-consultant-3",
    "task": "Schedule a client meeting or consultation.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Schedule a client meeting or consultation."
    },
    "snippet": "def schedule_meeting(\n    client_name: str,\n    meeting_time: str,\n    meeting_date: str,\n    meeting_type: str,\n) -> str:\n    \"\"\"\n    Schedules a client meeting or consultation and returns a confirmation message.\n\n    Parameters:\n        client_name (str): The name of the client.\n        meeting_time (str): The time of the meeting in HH:MM format.\n        meeting_date (str): The date of the meeting in YYYY-MM-DD format.\n        meeting_type (str): The type of the meeting: 'meeting' or 'consultation'.\n        \n    Returns:\n        str: A confirmation message with the scheduled meeting details.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def schedule_meeting(\n    client_name: str,\n    meeting_time: str,\n    meeting_date: str,\n    meeting_type: str,\n) -> str:\n    \"\"\"\n    Schedules a client meeting or consultation and returns a confirmation message.\n\n    Parameters:\n        client_name (str): The name of the client.\n        meeting_time (str): The time of the meeting in HH:MM format.\n        meeting_date (str): The date of the meeting in YYYY-MM-DD format.\n        meeting_type (str): The type of the meeting: 'meeting' or 'consultation'.\n        \n    Returns:\n        str: A confirmation message with the scheduled meeting details.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "schedule_meeting",
            "description": "Schedules a client meeting or consultation and returns a confirmation message.",
            "parameters": {
                "type": "object",
                "properties": {
                    "client_name": {
                        "type": "string",
                        "description": "The name of the client."
                    },
                    "meeting_time": {
                        "type": "string",
                        "description": "The time of the meeting in HH:MM format."
                    },
                    "meeting_date": {
                        "type": "string",
                        "description": "The date of the meeting in YYYY-MM-DD format."
                    },
                    "meeting_type": {
                        "type": "string",
                        "description": "The type of the meeting: 'meeting' or 'consultation'."
                    }
                },
                "required": [
                    "client_name",
                    "meeting_time",
                    "meeting_date",
                    "meeting_type"
                ]
            },
            "returns": {
                "type": "string",
                "description": "A confirmation message with the scheduled meeting details."
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'schedule_meeting', 'description': 'Schedules a client meeting or consultation and returns a confirmation message.', 'parameters': {'type': 'object', 'properties': {'client_name': {'type': 'string', 'description': 'The name of the client.'}, 'meeting_time': {'type': 'string', 'description': 'The time of the meeting in HH:MM format.'}, 'meeting_date': {'type': 'string', 'description': 'The date of the meeting in YYYY-MM-DD format.'}, 'meeting_type': {'type': 'string', 'description': \"The type of the meeting: 'meeting' or 'consultation'.\"}}, 'required': ['client_name', 'meeting_time', 'meeting_date', 'meeting_type']}, 'returns': {'type': 'string', 'description': 'A confirmation message with the scheduled meeting details.'}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, I need to schedule a meeting with one of the clients."
            },
            {
                "role": "assistant",
                "text": "Sure, could you please provide me with the client's name?"
            },
            {
                "role": "user",
                "text": "Yes, the client's name is 'John Doe'."
            },
            {
                "role": "assistant",
                "text": "Great, when do you want to schedule the meeting?"
            },
            {
                "role": "user",
                "text": "Schedule it for 2022-06-10 at 14:30."
            },
            {
                "role": "assistant",
                "text": "Alright. Is this a general meeting or a consultation?"
            },
            {
                "role": "user",
                "text": "It's a consultation."
            },
            {
                "role": "assistant",
                "text": "Perfect, I'm scheduling a consultation with John Doe on 2022-06-10 at 14:30 now."
            }
        ],
        "function_call": {
            "function_name": "schedule_meeting",
            "parameters": {
                "client_name": "John Doe",
                "meeting_time": "14:30",
                "meeting_date": "2022-06-10",
                "meeting_type": "consultation"
            }
        }
    }
}
{
    "function_id": "design-consultant-5",
    "task": "Track hours spent on each project for billing purposes.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Track hours spent on each project for billing purposes."
    },
    "snippet": "def track_project_hours(\n    project_name: str,\n    start_time: str,\n    end_time: str,\n) -> Dict[str, float]:\n    \"\"\"\n    Tracks the hours spent on a specific project and returns the total hours for billing purposes.\n    \n    Parameters:\n        project_name (str): The name of the project.\n        start_time (str): The starting time of the project in YYYY-MM-DD HH:MM:SS format.\n        end_time (str): The ending time of the project in YYYY-MM-DD HH:MM:SS format.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_hours' as a key and the total hours spent on the project as a value.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def track_project_hours(\n    project_name: str,\n    start_time: str,\n    end_time: str,\n) -> Dict[str, float]:\n    \"\"\"\n    Tracks the hours spent on a specific project and returns the total hours for billing purposes.\n    \n    Parameters:\n        project_name (str): The name of the project.\n        start_time (str): The starting time of the project in YYYY-MM-DD HH:MM:SS format.\n        end_time (str): The ending time of the project in YYYY-MM-DD HH:MM:SS format.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_hours' as a key and the total hours spent on the project as a value.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "track_project_hours",
            "description": "Tracks the hours spent on a specific project and returns the total hours for billing purposes.",
            "parameters": {
                "type": "object",
                "properties": {
                    "project_name": {
                        "type": "string",
                        "description": "The name of the project."
                    },
                    "start_time": {
                        "type": "string",
                        "description": "The starting time of the project in YYYY-MM-DD HH:MM:SS format."
                    },
                    "end_time": {
                        "type": "string",
                        "description": "The ending time of the project in YYYY-MM-DD HH:MM:SS format."
                    }
                },
                "required": [
                    "project_name",
                    "start_time",
                    "end_time"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "total_hours": {
                        "type": "float",
                        "description": "The total hours spent on the project."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'track_project_hours', 'description': 'Tracks the hours spent on a specific project and returns the total hours for billing purposes.', 'parameters': {'type': 'object', 'properties': {'project_name': {'type': 'string', 'description': 'The name of the project.'}, 'start_time': {'type': 'string', 'description': 'The starting time of the project in YYYY-MM-DD HH:MM:SS format.'}, 'end_time': {'type': 'string', 'description': 'The ending time of the project in YYYY-MM-DD HH:MM:SS format.'}}, 'required': ['project_name', 'start_time', 'end_time']}, 'returns': {'type': 'object', 'properties': {'total_hours': {'type': 'float', 'description': 'The total hours spent on the project.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you help me figure out the total hours I spent on the 'Alpha' project?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Do you remember the starting time of the project?"
            },
            {
                "role": "user",
                "text": "Yes, it was 2021-05-01 10:00:00."
            },
            {
                "role": "assistant",
                "text": "Alright, and when did the project end?"
            },
            {
                "role": "user",
                "text": "The project ended on 2021-06-01 10:00:00."
            },
            {
                "role": "assistant",
                "text": "Great, I'm calculating the total hours you spent on the 'Alpha' project now."
            }
        ],
        "function_call": {
            "function_name": "track_project_hours",
            "parameters": {
                "project_name": "Alpha",
                "start_time": "2021-05-01 10:00:00",
                "end_time": "2021-06-01 10:00:00"
            }
        }
    }
}
{
    "function_id": "design-consultant-6",
    "task": "Upload design drafts to a shared client folder.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Upload design drafts to a shared client folder."
    },
    "snippet": "def upload_design_drafts(\n    client_folder_path: str,\n    drafts_files: List[str],\n) -> None:\n    \"\"\"\n    Uploads design drafts to a shared client folder.\n\n    Parameters:\n        client_folder_path (str): The path to the shared client folder.\n        drafts_files (List[str]): A list of file paths to the design drafts.\n\n    Returns:\n        None\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def upload_design_drafts(\n    client_folder_path: str,\n    drafts_files: List[str],\n) -> None:\n    \"\"\"\n    Uploads design drafts to a shared client folder.\n\n    Parameters:\n        client_folder_path (str): The path to the shared client folder.\n        drafts_files (List[str]): A list of file paths to the design drafts.\n\n    Returns:\n        None\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "upload_design_drafts",
            "description": "Uploads design drafts to a shared client folder.",
            "parameters": {
                "type": "object",
                "properties": {
                    "client_folder_path": {
                        "type": "string",
                        "description": "The path to the shared client folder."
                    },
                    "drafts_files": {
                        "type": "array",
                        "description": "A list of file paths to the design drafts.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "client_folder_path",
                    "drafts_files"
                ]
            },
            "returns": {
                "type": "null",
                "description": "None"
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'upload_design_drafts', 'description': 'Uploads design drafts to a shared client folder.', 'parameters': {'type': 'object', 'properties': {'client_folder_path': {'type': 'string', 'description': 'The path to the shared client folder.'}, 'drafts_files': {'type': 'array', 'description': 'A list of file paths to the design drafts.', 'items': {'type': 'string'}}}, 'required': ['client_folder_path', 'drafts_files']}, 'returns': {'type': 'null', 'description': 'None'}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, I need to upload some design drafts to a client's shared folder."
            },
            {
                "role": "assistant",
                "text": "Sure, I can help with that. Could you please tell me the path to the shared client folder?"
            },
            {
                "role": "user",
                "text": "Yes, the path is '/clients/shared/design_drafts'."
            },
            {
                "role": "assistant",
                "text": "Thanks. Next, could you please provide the file paths to the design drafts you want to upload?"
            },
            {
                "role": "user",
                "text": "Sure, here they are: '/my_files/draft1.png', '/my_files/draft2.png' and '/my_files/draft3.png'."
            },
            {
                "role": "assistant",
                "text": "Great, I will upload these design drafts to the specified client's shared folder now."
            }
        ],
        "function_call": {
            "function_name": "upload_design_drafts",
            "parameters": {
                "client_folder_path": "/clients/shared/design_drafts",
                "drafts_files": [
                    "/my_files/draft1.png",
                    "/my_files/draft2.png",
                    "/my_files/draft3.png"
                ]
            }
        }
    }
}
{
    "function_id": "design-consultant-8",
    "task": "Post updates to a project management tool or dashboard.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Post updates to a project management tool or dashboard."
    },
    "snippet": "def post_project_updates(\n    project_id: str,\n    update: str,\n    timestamp: str,\n    user_id: str):\n    \"\"\"\n    Posts updates to a project management tool or dashboard.\n\n    Parameters:\n        project_id (str): The ID of the project to update.\n        update (str): The update or changes made to the project.\n        timestamp (str): The time the update was made in YYYY-MM-DD HH:MM:SS format.\n        user_id (str): The ID of the user who made the update.\n\n    Returns:\n        None\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def post_project_updates(\n    project_id: str,\n    update: str,\n    timestamp: str,\n    user_id: str):\n    \"\"\"\n    Posts updates to a project management tool or dashboard.\n\n    Parameters:\n        project_id (str): The ID of the project to update.\n        update (str): The update or changes made to the project.\n        timestamp (str): The time the update was made in YYYY-MM-DD HH:MM:SS format.\n        user_id (str): The ID of the user who made the update.\n\n    Returns:\n        None\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "post_project_updates",
            "description": "Posts updates to a project management tool or dashboard.",
            "parameters": {
                "type": "object",
                "properties": {
                    "project_id": {
                        "type": "string",
                        "description": "The ID of the project to update."
                    },
                    "update": {
                        "type": "string",
                        "description": "The update or changes made to the project."
                    },
                    "timestamp": {
                        "type": "string",
                        "description": "The time the update was made in YYYY-MM-DD HH:MM:SS format."
                    },
                    "user_id": {
                        "type": "string",
                        "description": "The ID of the user who made the update."
                    }
                },
                "required": [
                    "project_id",
                    "update",
                    "timestamp",
                    "user_id"
                ]
            },
            "returns": {
                "type": "object",
                "description": "None"
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'post_project_updates', 'description': 'Posts updates to a project management tool or dashboard.', 'parameters': {'type': 'object', 'properties': {'project_id': {'type': 'string', 'description': 'The ID of the project to update.'}, 'update': {'type': 'string', 'description': 'The update or changes made to the project.'}, 'timestamp': {'type': 'string', 'description': 'The time the update was made in YYYY-MM-DD HH:MM:SS format.'}, 'user_id': {'type': 'string', 'description': 'The ID of the user who made the update.'}}, 'required': ['project_id', 'update', 'timestamp', 'user_id']}, 'returns': {'type': 'object', 'description': 'None'}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Can you post an update on my project?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. May I know your project ID?"
            },
            {
                "role": "user",
                "text": "Yes, my project ID is '56789'."
            },
            {
                "role": "assistant",
                "text": "Thank you. What's the update that needs to be posted?"
            },
            {
                "role": "user",
                "text": "The design phase is completed."
            },
            {
                "role": "assistant",
                "text": "Got it. Could you provide the time of this update? Please provide it in the format YYYY-MM-DD HH:MM:SS."
            },
            {
                "role": "user",
                "text": "Sure, the time was '2022-02-10 11:30:00'."
            },
            {
                "role": "assistant",
                "text": "And finally, could you please provide your user ID?"
            },
            {
                "role": "user",
                "text": "Yes, my user ID is '12345'."
            },
            {
                "role": "assistant",
                "text": "Great, I'm posting the update to your project now."
            }
        ],
        "function_call": {
            "function_name": "post_project_updates",
            "parameters": {
                "project_id": "56789",
                "update": "The design phase is completed",
                "timestamp": "2022-02-10 11:30:00",
                "user_id": "12345"
            }
        }
    }
}
{
    "function_id": "design-consultant-9",
    "task": "Collect final approval from the client on design deliverables.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Collect final approval from the client on design deliverables."
    },
    "snippet": "def get_final_approval(\n    client_name: str,\n    design_deliverables: List[Dict[str, str]]\n) -> Dict[str, bool]:\n    \"\"\"\n    Collects final approval from the client on design deliverables.\n\n    Parameters:\n        client_name (str): The name of the client giving approval.\n        design_deliverables (List[Dict[str, str]]): A list of dictionaries containing design deliverable details.\n                                                    Each dictionary should have 'design_id' and 'design_name' keys.\n                                                    \n    Returns:\n        Dict[str, bool]: A dictionary with each 'design_id' as a key and the approval status as a boolean value.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def get_final_approval(\n    client_name: str,\n    design_deliverables: List[Dict[str, str]]\n) -> Dict[str, bool]:\n    \"\"\"\n    Collects final approval from the client on design deliverables.\n\n    Parameters:\n        client_name (str): The name of the client giving approval.\n        design_deliverables (List[Dict[str, str]]): A list of dictionaries containing design deliverable details.\n                                                    Each dictionary should have 'design_id' and 'design_name' keys.\n                                                    \n    Returns:\n        Dict[str, bool]: A dictionary with each 'design_id' as a key and the approval status as a boolean value.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "get_final_approval",
            "description": "Collects final approval from the client on design deliverables.",
            "parameters": {
                "type": "object",
                "properties": {
                    "client_name": {
                        "type": "string",
                        "description": "The name of the client giving approval."
                    },
                    "design_deliverables": {
                        "type": "array",
                        "description": "A list of dictionaries containing design deliverable details. Each dictionary should have 'design_id' and 'design_name' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "design_id": {
                                    "type": "string"
                                },
                                "design_name": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "design_id",
                                "design_name"
                            ]
                        }
                    }
                },
                "required": [
                    "client_name",
                    "design_deliverables"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "dict": {
                        "type": "object",
                        "description": "A dictionary with each 'design_id' as a key and the approval status as a boolean value."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'get_final_approval', 'description': 'Collects final approval from the client on design deliverables.', 'parameters': {'type': 'object', 'properties': {'client_name': {'type': 'string', 'description': 'The name of the client giving approval.'}, 'design_deliverables': {'type': 'array', 'description': \"A list of dictionaries containing design deliverable details. Each dictionary should have 'design_id' and 'design_name' keys.\", 'items': {'type': 'object', 'properties': {'design_id': {'type': 'string'}, 'design_name': {'type': 'string'}}, 'required': ['design_id', 'design_name']}}}, 'required': ['client_name', 'design_deliverables']}, 'returns': {'type': 'object', 'properties': {'dict': {'type': 'object', 'description': \"A dictionary with each 'design_id' as a key and the approval status as a boolean value.\"}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": "Here is how the conversation could be:\n\n{\n    \"conversation\": \n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you check if the client's final approval for our design deliverables has already been collected?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. Can you give me the name of the client?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, the client's name is 'John Doe'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Okay. Can I also get the details of the design deliverables you're referring to?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, here they are: [{'design_id': '123', 'design_name': 'Website'}, {'design_id': '456', 'design_name': 'Logo'}]\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Excellent, I'm checking the final approval status of your design deliverables from client 'John Doe' now.\"\n    }\n],\n        \"function_call\": \n{\n    \"function_name\": \"get_final_approval\",\n    \"parameters\": {\n        \"client_name\": \"John Doe\",\n        \"design_deliverables\": [{\"design_id\": \"123\", \"design_name\": \"Website\"}, {\"design_id\": \"456\", \"design_name\": \"Logo\"}]\n    }\n}\n\n}"
}
{
    "function_id": "design-consultant-10",
    "task": "Send a client satisfaction survey upon project completion.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Send a client satisfaction survey upon project completion."
    },
    "snippet": "def send_client_satisfaction_survey(\n    client_email: str,\n    project_name: str,\n) -> bool:\n    \"\"\"\n    Sends a client satisfaction survey upon project completion.\n\n    Parameters:\n        client_email (str): Email address of the recipient client.\n        project_name (str): Name of the completed project.\n\n    Returns:\n        bool: True if the survey was sent successfully, False otherwise.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def send_client_satisfaction_survey(\n    client_email: str,\n    project_name: str,\n) -> bool:\n    \"\"\"\n    Sends a client satisfaction survey upon project completion.\n\n    Parameters:\n        client_email (str): Email address of the recipient client.\n        project_name (str): Name of the completed project.\n\n    Returns:\n        bool: True if the survey was sent successfully, False otherwise.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "send_client_satisfaction_survey",
            "description": "Sends a client satisfaction survey upon project completion.",
            "parameters": {
                "type": "object",
                "properties": {
                    "client_email": {
                        "type": "string",
                        "description": "Email address of the recipient client."
                    },
                    "project_name": {
                        "type": "string",
                        "description": "Name of the completed project."
                    }
                },
                "required": [
                    "client_email",
                    "project_name"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "bool": {
                        "type": "boolean",
                        "description": "True if the survey was sent successfully, False otherwise."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'send_client_satisfaction_survey', 'description': 'Sends a client satisfaction survey upon project completion.', 'parameters': {'type': 'object', 'properties': {'client_email': {'type': 'string', 'description': 'Email address of the recipient client.'}, 'project_name': {'type': 'string', 'description': 'Name of the completed project.'}}, 'required': ['client_email', 'project_name']}, 'returns': {'type': 'object', 'properties': {'bool': {'type': 'boolean', 'description': 'True if the survey was sent successfully, False otherwise.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you send a satisfaction survey to my client?"
            },
            {
                "role": "assistant",
                "text": "Of course, I can do that. May I please have the client's email address and the name of the project that was completed?"
            },
            {
                "role": "user",
                "text": "Sure, the client's email is 'client@email.com' and the project we completed is 'New Website Design'."
            },
            {
                "role": "assistant",
                "text": "Perfect, I'm sending the client satisfaction survey for the 'New Website Design' project to 'client@email.com' now."
            }
        ],
        "function_call": {
            "function_name": "send_client_satisfaction_survey",
            "parameters": {
                "client_email": "client@email.com",
                "project_name": "New Website Design"
            }
        }
    }
}
{
    "function_id": "design-consultant-11",
    "task": "Request testimonials or referrals from satisfied clients.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Request testimonials or referrals from satisfied clients."
    },
    "snippet": "def request_testimonials(\n    clients: List[Dict[str, Union[str, int]]]\n) -> List[str]:\n    \"\"\"\n    Requests testimonials or referrals from satisfied clients.\n    \n    Parameters:\n        clients (List[Dict[str, Union[str, int]]]): A list of dictionaries containing client details. \n                                                    Each dictionary should have 'name' and 'email' keys.\n\n    Returns:\n        List[str]: A list containing the responses from the clients. Each entry in the list represents a client's response.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def request_testimonials(\n    clients: List[Dict[str, Union[str, int]]]\n) -> List[str]:\n    \"\"\"\n    Requests testimonials or referrals from satisfied clients.\n    \n    Parameters:\n        clients (List[Dict[str, Union[str, int]]]): A list of dictionaries containing client details. \n                                                    Each dictionary should have 'name' and 'email' keys.\n\n    Returns:\n        List[str]: A list containing the responses from the clients. Each entry in the list represents a client's response.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "request_testimonials",
            "description": "Requests testimonials or referrals from satisfied clients.",
            "parameters": {
                "type": "object",
                "properties": {
                    "clients": {
                        "type": "array",
                        "description": "A list of dictionaries containing client details. Each dictionary should have 'name' and 'email' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "email": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "name",
                                "email"
                            ]
                        }
                    }
                },
                "required": [
                    "clients"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "responses": {
                        "type": "array",
                        "description": "A list containing the responses from the clients. Each entry in the list represents a client's response.",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'request_testimonials', 'description': 'Requests testimonials or referrals from satisfied clients.', 'parameters': {'type': 'object', 'properties': {'clients': {'type': 'array', 'description': \"A list of dictionaries containing client details. Each dictionary should have 'name' and 'email' keys.\", 'items': {'type': 'object', 'properties': {'name': {'type': 'string'}, 'email': {'type': 'string'}}, 'required': ['name', 'email']}}}, 'required': ['clients']}, 'returns': {'type': 'object', 'properties': {'responses': {'type': 'array', 'description': \"A list containing the responses from the clients. Each entry in the list represents a client's response.\", 'items': {'type': 'string'}}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "I want to request testimonials from my clients. Can you help me with that?"
            },
            {
                "role": "assistant",
                "text": "Absolutely. Could you provide me with the list of clients you'd like for me to contact for you?"
            },
            {
                "role": "user",
                "text": "Certainly, here are the client details: [{name: 'John Doe', email: 'johndoe@example.com'}, {name: 'Jane Smith', email: 'janesmith@example.com'}]."
            },
            {
                "role": "assistant",
                "text": "Perfect. I'm sending the testimonial requests to your clients now."
            }
        ],
        "function_call": {
            "function_name": "request_testimonials",
            "parameters": {
                "clients": [
                    {
                        "name": "John Doe",
                        "email": "johndoe@example.com"
                    },
                    {
                        "name": "Jane Smith",
                        "email": "janesmith@example.com"
                    }
                ]
            }
        }
    }
}
{
    "function_id": "design-consultant-12",
    "task": "Purchase or renew software licenses for design tools.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Purchase or renew software licenses for design tools."
    },
    "snippet": "def renew_software_licenses(\n    software_names: List[str],\n    licenses_needed: int,\n    renew_dates: List[str],\n) -> Dict[str, str]:\n    \"\"\"\n    Purchases or renews software licenses for design tools.\n\n    Parameters:\n        software_names (List[str]): A list of the software for which licenses need to be purchased or renewed.\n        licenses_needed (int): The number of licenses to buy or renew for each software.\n        renew_dates (List[str]): A list of renewal dates in YYYY-MM-DD format.\n\n    Returns:\n        Dict[str, str]: A dictionary with each software's name as a key \n                        and the renewal status as a value.\n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def renew_software_licenses(\n    software_names: List[str],\n    licenses_needed: int,\n    renew_dates: List[str],\n) -> Dict[str, str]:\n    \"\"\"\n    Purchases or renews software licenses for design tools.\n\n    Parameters:\n        software_names (List[str]): A list of the software for which licenses need to be purchased or renewed.\n        licenses_needed (int): The number of licenses to buy or renew for each software.\n        renew_dates (List[str]): A list of renewal dates in YYYY-MM-DD format.\n\n    Returns:\n        Dict[str, str]: A dictionary with each software's name as a key \n                        and the renewal status as a value.\n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "renew_software_licenses",
            "description": "Purchases or renews software licenses for design tools.",
            "parameters": {
                "type": "object",
                "properties": {
                    "software_names": {
                        "type": "array",
                        "description": "A list of the software for which licenses need to be purchased or renewed.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "licenses_needed": {
                        "type": "integer",
                        "description": "The number of licenses to buy or renew for each software."
                    },
                    "renew_dates": {
                        "type": "array",
                        "description": "A list of renewal dates in YYYY-MM-DD format.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "software_names",
                    "licenses_needed",
                    "renew_dates"
                ]
            },
            "returns": {
                "type": "object",
                "description": "A dictionary with each software's name as a key and the renewal status as a value.",
                "properties": {
                    "type": "object",
                    "properties": {
                        "software_name": {
                            "type": "string"
                        },
                        "renewal_status": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "software_name",
                        "renewal_status"
                    ]
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'renew_software_licenses', 'description': 'Purchases or renews software licenses for design tools.', 'parameters': {'type': 'object', 'properties': {'software_names': {'type': 'array', 'description': 'A list of the software for which licenses need to be purchased or renewed.', 'items': {'type': 'string'}}, 'licenses_needed': {'type': 'integer', 'description': 'The number of licenses to buy or renew for each software.'}, 'renew_dates': {'type': 'array', 'description': 'A list of renewal dates in YYYY-MM-DD format.', 'items': {'type': 'string'}}}, 'required': ['software_names', 'licenses_needed', 'renew_dates']}, 'returns': {'type': 'object', 'description': \"A dictionary with each software's name as a key and the renewal status as a value.\", 'properties': {'type': 'object', 'properties': {'software_name': {'type': 'string'}, 'renewal_status': {'type': 'string'}}, 'required': ['software_name', 'renewal_status']}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, I need to renew some software licenses."
            },
            {
                "role": "assistant",
                "text": "Sure, I can assist you with that. Can you tell me which software licenses need to be renewed?"
            },
            {
                "role": "user",
                "text": "They are for Adobe Photoshop, Illustrator and InDesign."
            },
            {
                "role": "assistant",
                "text": "Got it. How many licenses do you need for each software?"
            },
            {
                "role": "user",
                "text": "I need 5 licenses for each one."
            },
            {
                "role": "assistant",
                "text": "Noted. Can you provide me with the renewal dates for these licenses?"
            },
            {
                "role": "user",
                "text": "Yes, they all need to be renewed by 2023-07-01."
            },
            {
                "role": "assistant",
                "text": "Great, I'm proceeding with the renewal of your software licenses now."
            }
        ],
        "function_call": {
            "function_name": "renew_software_licenses",
            "parameters": {
                "software_names": [
                    "Adobe Photoshop",
                    "Illustrator",
                    "InDesign"
                ],
                "licenses_needed": 5,
                "renew_dates": [
                    "2023-07-01",
                    "2023-07-01",
                    "2023-07-01"
                ]
            }
        }
    }
}
{
    "function_id": "design-consultant-14",
    "task": "Submit freelance tax forms or documentation.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Submit freelance tax forms or documentation."
    },
    "snippet": "```python\ndef submit_freelance_tax_forms(\n    freelancer_data: Dict[str, str],\n    tax_forms: List[Dict[str, str]],\n) -> str:\n    \"\"\"\n    Submits freelance tax forms or documentation and returns the submission status.\n\n    Parameters:\n        freelancer_data (Dict[str, str]): A dictionary containing freelancer details.\n                                          This dictionary should have 'freelancer_id' and 'freelancer_name' as keys.\n        tax_forms (List[Dict[str, str]]): A list of dictionaries containing the tax form details.\n                                          Each dictionary should have 'form_id', 'form_type', and 'form_data' keys.\n                                          \n    Returns:\n        str: A string indicating the submission status.\n    \"\"\"\n    pass\n```\nThis python function suggests the structure of a function to submit freelance tax forms. The actual implementation would depend on the specific way in which the forms need to be submitted: for instance, if they're being sent to a database, an API, or some other system, which is not specified in the prompt.",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "```python\ndef submit_freelance_tax_forms(\n    freelancer_data: Dict[str, str],\n    tax_forms: List[Dict[str, str]],\n) -> str:\n    \"\"\"\n    Submits freelance tax forms or documentation and returns the submission status.\n\n    Parameters:\n        freelancer_data (Dict[str, str]): A dictionary containing freelancer details.\n                                          This dictionary should have 'freelancer_id' and 'freelancer_name' as keys.\n        tax_forms (List[Dict[str, str]]): A list of dictionaries containing the tax form details.\n                                          Each dictionary should have 'form_id', 'form_type', and 'form_data' keys.\n                                          \n    Returns:\n        str: A string indicating the submission status.\n    \"\"\"\n    pass\n```\nThis python function suggests the structure of a function to submit freelance tax forms. The actual implementation would depend on the specific way in which the forms need to be submitted: for instance, if they're being sent to a database, an API, or some other system, which is not specified in the prompt.",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "submit_freelance_tax_forms",
            "description": "Submits freelance tax forms or documentation and returns the submission status.",
            "parameters": {
                "type": "object",
                "properties": {
                    "freelancer_data": {
                        "type": "object",
                        "description": "A dictionary containing freelancer details. This dictionary should have 'freelancer_id' and 'freelancer_name' as keys.",
                        "properties": {
                            "freelancer_id": {
                                "type": "string",
                                "description": "Freelancer's unique ID."
                            },
                            "freelancer_name": {
                                "type": "string",
                                "description": "Freelancer's name."
                            }
                        },
                        "required": [
                            "freelancer_id",
                            "freelancer_name"
                        ]
                    },
                    "tax_forms": {
                        "type": "array",
                        "description": "A list of dictionaries containing the tax form details. Each dictionary should have 'form_id', 'form_type', and 'form_data' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "form_id": {
                                    "type": "string",
                                    "description": "Form's unique ID."
                                },
                                "form_type": {
                                    "type": "string",
                                    "description": "Type of the tax form."
                                },
                                "form_data": {
                                    "type": "string",
                                    "description": "Data of the tax form."
                                }
                            },
                            "required": [
                                "form_id",
                                "form_type",
                                "form_data"
                            ]
                        }
                    }
                },
                "required": [
                    "freelancer_data",
                    "tax_forms"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "Status": {
                        "type": "string",
                        "description": "A string indicating the submission status."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'submit_freelance_tax_forms', 'description': 'Submits freelance tax forms or documentation and returns the submission status.', 'parameters': {'type': 'object', 'properties': {'freelancer_data': {'type': 'object', 'description': \"A dictionary containing freelancer details. This dictionary should have 'freelancer_id' and 'freelancer_name' as keys.\", 'properties': {'freelancer_id': {'type': 'string', 'description': \"Freelancer's unique ID.\"}, 'freelancer_name': {'type': 'string', 'description': \"Freelancer's name.\"}}, 'required': ['freelancer_id', 'freelancer_name']}, 'tax_forms': {'type': 'array', 'description': \"A list of dictionaries containing the tax form details. Each dictionary should have 'form_id', 'form_type', and 'form_data' keys.\", 'items': {'type': 'object', 'properties': {'form_id': {'type': 'string', 'description': \"Form's unique ID.\"}, 'form_type': {'type': 'string', 'description': 'Type of the tax form.'}, 'form_data': {'type': 'string', 'description': 'Data of the tax form.'}}, 'required': ['form_id', 'form_type', 'form_data']}}}, 'required': ['freelancer_data', 'tax_forms']}, 'returns': {'type': 'object', 'properties': {'Status': {'type': 'string', 'description': 'A string indicating the submission status.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, could you help me submit my freelance tax forms?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can assist with that. Could you please provide me with your freelancer ID and name?"
            },
            {
                "role": "user",
                "text": "My freelancer ID is '12345' and my name is 'John Doe'."
            },
            {
                "role": "assistant",
                "text": "Great! Now, could you please provide me with the details of the tax forms you need to submit? I need the form's unique ID, type, and its data contents."
            },
            {
                "role": "user",
                "text": "Okay, here they are. The first form's ID is 'form789', type is '1040', and the data is 'Data1'. The second form's ID is 'form987', type is 'Schedule C', and the data is 'Data2'."
            },
            {
                "role": "assistant",
                "text": "Thank you. I'm submitting your tax forms now."
            }
        ],
        "function_call": {
            "function_name": "submit_freelance_tax_forms",
            "parameters": {
                "freelancer_data": {
                    "freelancer_id": "12345",
                    "freelancer_name": "John Doe"
                },
                "tax_forms": [
                    {
                        "form_id": "form789",
                        "form_type": "1040",
                        "form_data": "Data1"
                    },
                    {
                        "form_id": "form987",
                        "form_type": "Schedule C",
                        "form_data": "Data2"
                    }
                ]
            }
        }
    }
}
{
    "function_id": "design-consultant-15",
    "task": "Update portfolio with new work samples.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Update portfolio with new work samples."
    },
    "snippet": "def update_portfolio(\n    portfolio: List[Dict[str, Union[str, bytes]]],\n    new_samples: List[Dict[str, Union[str, bytes]]]\n) -> List[Dict[str, Union[str, bytes]]]:\n    \"\"\"\n    Updates a portfolio with new work samples.\n\n    Parameters:\n        portfolio (List[Dict[str, Union[str, bytes]]]): The existing portfolio. Each dictionary\n                                                        represents a work sample, which could include\n                                                        'title', 'description' and 'file' keys.\n        new_samples (List[Dict[str, Union[str, bytes]]]): The new work samples to be added to the portfolio.\n                                                          Each dictionary should contain 'title',\n                                                          'description' and 'file' keys.\n        \n    Returns:\n        List[Dict[str, Union[str, bytes]]]: The updated portfolio now containing the new work samples.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def update_portfolio(\n    portfolio: List[Dict[str, Union[str, bytes]]],\n    new_samples: List[Dict[str, Union[str, bytes]]]\n) -> List[Dict[str, Union[str, bytes]]]:\n    \"\"\"\n    Updates a portfolio with new work samples.\n\n    Parameters:\n        portfolio (List[Dict[str, Union[str, bytes]]]): The existing portfolio. Each dictionary\n                                                        represents a work sample, which could include\n                                                        'title', 'description' and 'file' keys.\n        new_samples (List[Dict[str, Union[str, bytes]]]): The new work samples to be added to the portfolio.\n                                                          Each dictionary should contain 'title',\n                                                          'description' and 'file' keys.\n        \n    Returns:\n        List[Dict[str, Union[str, bytes]]]: The updated portfolio now containing the new work samples.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "update_portfolio",
            "description": "Updates a portfolio with new work samples.",
            "parameters": {
                "type": "object",
                "properties": {
                    "portfolio": {
                        "type": "array",
                        "description": "The existing portfolio. Each dictionary represents a work sample, which could include 'title', 'description' and 'file' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "title": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                },
                                "file": {
                                    "type": [
                                        "string",
                                        "byte"
                                    ]
                                }
                            },
                            "required": [
                                "title",
                                "description",
                                "file"
                            ]
                        }
                    },
                    "new_samples": {
                        "type": "array",
                        "description": "The new work samples to be added to the portfolio. Each dictionary should contain 'title', 'description' and 'file' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "title": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                },
                                "file": {
                                    "type": [
                                        "string",
                                        "byte"
                                    ]
                                }
                            },
                            "required": [
                                "title",
                                "description",
                                "file"
                            ]
                        }
                    }
                },
                "required": [
                    "portfolio",
                    "new_samples"
                ]
            },
            "returns": {
                "type": "array",
                "description": "The updated portfolio now containing the new work samples.",
                "items": {
                    "type": "object",
                    "properties": {
                        "title": {
                            "type": "string"
                        },
                        "description": {
                            "type": "string"
                        },
                        "file": {
                            "type": [
                                "string",
                                "byte"
                            ]
                        }
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'update_portfolio', 'description': 'Updates a portfolio with new work samples.', 'parameters': {'type': 'object', 'properties': {'portfolio': {'type': 'array', 'description': \"The existing portfolio. Each dictionary represents a work sample, which could include 'title', 'description' and 'file' keys.\", 'items': {'type': 'object', 'properties': {'title': {'type': 'string'}, 'description': {'type': 'string'}, 'file': {'type': ['string', 'byte']}}, 'required': ['title', 'description', 'file']}}, 'new_samples': {'type': 'array', 'description': \"The new work samples to be added to the portfolio. Each dictionary should contain 'title', 'description' and 'file' keys.\", 'items': {'type': 'object', 'properties': {'title': {'type': 'string'}, 'description': {'type': 'string'}, 'file': {'type': ['string', 'byte']}}, 'required': ['title', 'description', 'file']}}}, 'required': ['portfolio', 'new_samples']}, 'returns': {'type': 'array', 'description': 'The updated portfolio now containing the new work samples.', 'items': {'type': 'object', 'properties': {'title': {'type': 'string'}, 'description': {'type': 'string'}, 'file': {'type': ['string', 'byte']}}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": "{\n    \"conversation\": \n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, I've created some new work pieces that I'd like to add to my portfolio.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"I'd be happy to help with that. Can you provide me the details of your new work samples?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my new work samples include a painting titled 'Sunset', description 'A blend of warm colours depicting a sunset', and the file 'sunset.jpg'. There's another sketch titled 'Landscape', description 'A black and white sketch of a scenic landscape', and the file 'landscape.jpg'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Got it. Just to confirm, these samples will be added to your existing portfolio, correct?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, that's correct.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Perfect, I'll add these samples to your portfolio now.\"\n    }\n],\n    \"function_call\": \n{\n    \"function_name\": \"update_portfolio\",\n    \"parameters\": {\n        \"portfolio\": [{\"title\": \"example_title\", \"description\": \"example_description\", \"file\": \"example_file\"}],  // This is an example; *actual* existing portfolio is assumed here.\n        \"new_samples\": [{\"title\": \"Sunset\", \"description\": \"A blend of warm colours depicting a sunset\", \"file\": \"sunset.jpg\"}, {\"title\": \"Landscape\", \"description\": \"A black and white sketch of a scenic landscape\", \"file\": \"landscape.jpg\"}]\n    }\n}\n\n}"
}
{
    "function_id": "design-consultant-17",
    "task": "Register for professional development courses or webinars.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Register for professional development courses or webinars."
    },
    "snippet": "def register_for_courses(\n    participant_name: str,\n    courses: List[str],\n    preferred_date: str,\n    payment_details: Dict[str, Union[str, int]],\n) -> Dict[str, str]:\n    \"\"\"\n    Registers a participant for professional development courses or webinars, and returns registration details.\n    \n    Parameters:\n        participant_name (str): The name of the participant.\n        courses (List[str]): A list of courses or webinars to register for.\n        preferred_date (str): The preferred date for course/webinar in YYYY-MM-DD format.\n        payment_details (Dict[str, Union[str, int]]): A dictionary containing payment details.\n                                                      It must contain 'card_number', 'expiry_date', \n                                                      and 'CVV' keys. \n\n    Returns:\n        Dict[str, str]: A dictionary with 'registration_id' and 'confirmation_status' as keys and \n                        the related values as values.\n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def register_for_courses(\n    participant_name: str,\n    courses: List[str],\n    preferred_date: str,\n    payment_details: Dict[str, Union[str, int]],\n) -> Dict[str, str]:\n    \"\"\"\n    Registers a participant for professional development courses or webinars, and returns registration details.\n    \n    Parameters:\n        participant_name (str): The name of the participant.\n        courses (List[str]): A list of courses or webinars to register for.\n        preferred_date (str): The preferred date for course/webinar in YYYY-MM-DD format.\n        payment_details (Dict[str, Union[str, int]]): A dictionary containing payment details.\n                                                      It must contain 'card_number', 'expiry_date', \n                                                      and 'CVV' keys. \n\n    Returns:\n        Dict[str, str]: A dictionary with 'registration_id' and 'confirmation_status' as keys and \n                        the related values as values.\n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "register_for_courses",
            "description": "Registers a participant for professional development courses or webinars, and returns registration details.",
            "parameters": {
                "type": "object",
                "properties": {
                    "participant_name": {
                        "type": "string",
                        "description": "The name of the participant."
                    },
                    "courses": {
                        "type": "array",
                        "description": "A list of courses or webinars to register for.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "preferred_date": {
                        "type": "string",
                        "description": "The preferred date for course/webinar in YYYY-MM-DD format."
                    },
                    "payment_details": {
                        "type": "object",
                        "description": "A dictionary containing payment details. It must contain 'card_number', 'expiry_date', and 'CVV' keys.",
                        "properties": {
                            "card_number": {
                                "type": "string"
                            },
                            "expiry_date": {
                                "type": "string"
                            },
                            "CVV": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "card_number",
                            "expiry_date",
                            "CVV"
                        ]
                    }
                },
                "required": [
                    "participant_name",
                    "courses",
                    "preferred_date",
                    "payment_details"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "registration_id": {
                        "type": "string",
                        "description": "A unique identifier for the registration."
                    },
                    "confirmation_status": {
                        "type": "string",
                        "description": "The status of the registration confirmation."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'register_for_courses', 'description': 'Registers a participant for professional development courses or webinars, and returns registration details.', 'parameters': {'type': 'object', 'properties': {'participant_name': {'type': 'string', 'description': 'The name of the participant.'}, 'courses': {'type': 'array', 'description': 'A list of courses or webinars to register for.', 'items': {'type': 'string'}}, 'preferred_date': {'type': 'string', 'description': 'The preferred date for course/webinar in YYYY-MM-DD format.'}, 'payment_details': {'type': 'object', 'description': \"A dictionary containing payment details. It must contain 'card_number', 'expiry_date', and 'CVV' keys.\", 'properties': {'card_number': {'type': 'string'}, 'expiry_date': {'type': 'string'}, 'CVV': {'type': 'integer'}}, 'required': ['card_number', 'expiry_date', 'CVV']}}, 'required': ['participant_name', 'courses', 'preferred_date', 'payment_details']}, 'returns': {'type': 'object', 'properties': {'registration_id': {'type': 'string', 'description': 'A unique identifier for the registration.'}, 'confirmation_status': {'type': 'string', 'description': 'The status of the registration confirmation.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hi, I want to register for some professional development courses."
            },
            {
                "role": "assistant",
                "text": "Sure, I can help with that. Could you please provide your name?"
            },
            {
                "role": "user",
                "text": "My name is John Doe."
            },
            {
                "role": "assistant",
                "text": "Great, John. Which courses would you like to register for?"
            },
            {
                "role": "user",
                "text": "I would like to register for the Python for Beginners and Advanced Machine Learning courses."
            },
            {
                "role": "assistant",
                "text": "Okay, got it. And when would you like to take these courses?"
            },
            {
                "role": "user",
                "text": "I'm thinking about starting from next month, so the preferred date would be 2022-03-01."
            },
            {
                "role": "assistant",
                "text": "Perfect. Lastly, I need your card number, expiry date, and CVV for payment purposes."
            },
            {
                "role": "user",
                "text": "Sure, my card number is 1234567812345678, the expiry date is 06/24, and the CVV is 123."
            },
            {
                "role": "assistant",
                "text": "Thanks, John. I'll register you for the Python for Beginners and Advanced Machine Learning courses starting from 2022-03-01. I'll use the provided card details for payment."
            }
        ],
        "function_call": {
            "function_name": "register_for_courses",
            "parameters": {
                "participant_name": "John Doe",
                "courses": [
                    "Python for Beginners",
                    "Advanced Machine Learning"
                ],
                "preferred_date": "2022-03-01",
                "payment_details": {
                    "card_number": "1234567812345678",
                    "expiry_date": "06/24",
                    "CVV": 123
                }
            }
        }
    }
}
{
    "function_id": "design-consultant-18",
    "task": "Renew membership in professional design organizations.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Renew membership in professional design organizations."
    },
    "snippet": "def renew_membership(\n    member_id: str,\n    organization_name: str,\n    renewal_date: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Renews membership in professional design organizations and returns renewal status.\n    \n    Parameters:\n        member_id (str): The id of the member renewing their membership.\n        organization_name (str): The name of the professional design organization.\n        renewal_date (str): The date of renewal in YYYY-MM-DD format.                                          \n    \n    Returns:\n        Dict[str, str]: A dictionary with 'renewal_status' as a key and the status of the renewal as a value.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def renew_membership(\n    member_id: str,\n    organization_name: str,\n    renewal_date: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Renews membership in professional design organizations and returns renewal status.\n    \n    Parameters:\n        member_id (str): The id of the member renewing their membership.\n        organization_name (str): The name of the professional design organization.\n        renewal_date (str): The date of renewal in YYYY-MM-DD format.                                          \n    \n    Returns:\n        Dict[str, str]: A dictionary with 'renewal_status' as a key and the status of the renewal as a value.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "renew_membership",
            "description": "Renews membership in professional design organizations and returns renewal status.",
            "parameters": {
                "type": "object",
                "properties": {
                    "member_id": {
                        "type": "string",
                        "description": "The id of the member renewing their membership."
                    },
                    "organization_name": {
                        "type": "string",
                        "description": "The name of the professional design organization."
                    },
                    "renewal_date": {
                        "type": "string",
                        "description": "The date of renewal in YYYY-MM-DD format."
                    }
                },
                "required": [
                    "member_id",
                    "organization_name",
                    "renewal_date"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "renewal_status": {
                        "type": "string",
                        "description": "The status of the renewal"
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'renew_membership', 'description': 'Renews membership in professional design organizations and returns renewal status.', 'parameters': {'type': 'object', 'properties': {'member_id': {'type': 'string', 'description': 'The id of the member renewing their membership.'}, 'organization_name': {'type': 'string', 'description': 'The name of the professional design organization.'}, 'renewal_date': {'type': 'string', 'description': 'The date of renewal in YYYY-MM-DD format.'}}, 'required': ['member_id', 'organization_name', 'renewal_date']}, 'returns': {'type': 'object', 'properties': {'renewal_status': {'type': 'string', 'description': 'The status of the renewal'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hi, I need to renew my membership with the design organization."
            },
            {
                "role": "assistant",
                "text": "Sure, I can assist you with that. Can I have your member ID, please?"
            },
            {
                "role": "user",
                "text": "My member ID is '00256'."
            },
            {
                "role": "assistant",
                "text": "Great. Which professional design organization are you renewing your membership with?"
            },
            {
                "role": "user",
                "text": "I'm renewing my membership with 'Designers International'."
            },
            {
                "role": "assistant",
                "text": "And what's the renewal date in YYYY-MM-DD format?"
            },
            {
                "role": "user",
                "text": "The renewal date is '2022-05-30'."
            },
            {
                "role": "assistant",
                "text": "Perfect, I'm renewing your membership now."
            }
        ],
        "function_call": {
            "function_name": "renew_membership",
            "parameters": {
                "member_id": "00256",
                "organization_name": "Designers International",
                "renewal_date": "2022-05-30"
            }
        }
    }
}
{
    "function_id": "design-consultant-20",
    "task": "Review and update standard contract templates.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Review and update standard contract templates."
    },
    "snippet": "def update_contract_templates(\n    template_list: List[Dict[str, str]],\n    changes: Dict[str, str]\n) -> List[Dict[str, str]]:\n    \"\"\"\n    Reviews and updates standard contract templates.\n\n    Parameters:\n        template_list (List[Dict[str, str]]): A list of dictionaries containing contract templates.\n                                              Each dictionary should have 'name' and 'content' keys.\n\n        changes (Dict[str, str]): A dictionary containing the changes to be made.\n                                  Keys would be the 'name' of the contract and the values would be the updated 'content'.\n\n    Returns:\n        List[Dict[str, str]]: A list of dictionaries containing the updated contract templates.\n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def update_contract_templates(\n    template_list: List[Dict[str, str]],\n    changes: Dict[str, str]\n) -> List[Dict[str, str]]:\n    \"\"\"\n    Reviews and updates standard contract templates.\n\n    Parameters:\n        template_list (List[Dict[str, str]]): A list of dictionaries containing contract templates.\n                                              Each dictionary should have 'name' and 'content' keys.\n\n        changes (Dict[str, str]): A dictionary containing the changes to be made.\n                                  Keys would be the 'name' of the contract and the values would be the updated 'content'.\n\n    Returns:\n        List[Dict[str, str]]: A list of dictionaries containing the updated contract templates.\n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "update_contract_templates",
            "description": "Reviews and updates standard contract templates.",
            "parameters": {
                "type": "object",
                "properties": {
                    "template_list": {
                        "type": "array",
                        "description": "A list of dictionaries containing contract templates. Each dictionary should have 'name' and 'content' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "content": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "name",
                                "content"
                            ]
                        }
                    },
                    "changes": {
                        "type": "object",
                        "description": "A dictionary containing the changes to be made. Keys would be the 'name' of the contract and the values would be the updated 'content'.",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "content": {
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "template_list",
                    "changes"
                ]
            },
            "returns": {
                "type": "array",
                "description": "A list of dictionaries containing the updated contract templates.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "content": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "name",
                        "content"
                    ]
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'update_contract_templates', 'description': 'Reviews and updates standard contract templates.', 'parameters': {'type': 'object', 'properties': {'template_list': {'type': 'array', 'description': \"A list of dictionaries containing contract templates. Each dictionary should have 'name' and 'content' keys.\", 'items': {'type': 'object', 'properties': {'name': {'type': 'string'}, 'content': {'type': 'string'}}, 'required': ['name', 'content']}}, 'changes': {'type': 'object', 'description': \"A dictionary containing the changes to be made. Keys would be the 'name' of the contract and the values would be the updated 'content'.\", 'properties': {'name': {'type': 'string'}, 'content': {'type': 'string'}}}}, 'required': ['template_list', 'changes']}, 'returns': {'type': 'array', 'description': 'A list of dictionaries containing the updated contract templates.', 'items': {'type': 'object', 'properties': {'name': {'type': 'string'}, 'content': {'type': 'string'}}, 'required': ['name', 'content']}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hi, I need to update some contract templates."
            },
            {
                "role": "assistant",
                "text": "Sure, could you provide me with the list of contract templates that you want to update?"
            },
            {
                "role": "user",
                "text": "Yes, here they are."
            },
            {
                "role": "assistant",
                "text": "Great, could you also provide me with a dictionary containing the changes to be made?"
            },
            {
                "role": "user",
                "text": "Yes, here are the changes."
            },
            {
                "role": "assistant",
                "text": "Perfect, I'm updating the contract templates now."
            }
        ],
        "function_call": {
            "function_name": "update_contract_templates",
            "parameters": {
                "template_list": "Provided by the user",
                "changes": "Provided by the user"
            }
        }
    }
}
