{
    "function_id": "personal_assistant-5",
    "task": "Place an online order for groceries or other items.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Place an online order for groceries or other items."
    },
    "snippet": "def place_order(\n    customer_id: str,\n    items: List[Dict[str, Union[str, int]]],\n    delivery_address: str,\n    payment_method: str,\n) -> Dict[str, Union[str, float]]:\n    \"\"\"\n    Places an online order for groceries or other items and returns the order ID and total price.\n    \n    Parameters:\n        customer_id (str): The ID of the customer placing the order.\n        items (List[Dict[str, Union[str, int]]]): A list of dictionaries containing item details. \n                                                  Each dictionary should have 'item_id' and 'quantity' keys.\n        delivery_address (str): The address where the order needs to be delivered.\n        payment_method (str): The payment method chosen by the customer.\n                                          \n    Returns:\n        Dict[str, Union[str, float]]: A dictionary with 'order_id' and 'total_price' as keys. \n                                       'order_id' will be a string and 'total_price' will be a float.\n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def place_order(\n    customer_id: str,\n    items: List[Dict[str, Union[str, int]]],\n    delivery_address: str,\n    payment_method: str,\n) -> Dict[str, Union[str, float]]:\n    \"\"\"\n    Places an online order for groceries or other items and returns the order ID and total price.\n    \n    Parameters:\n        customer_id (str): The ID of the customer placing the order.\n        items (List[Dict[str, Union[str, int]]]): A list of dictionaries containing item details. \n                                                  Each dictionary should have 'item_id' and 'quantity' keys.\n        delivery_address (str): The address where the order needs to be delivered.\n        payment_method (str): The payment method chosen by the customer.\n                                          \n    Returns:\n        Dict[str, Union[str, float]]: A dictionary with 'order_id' and 'total_price' as keys. \n                                       'order_id' will be a string and 'total_price' will be a float.\n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "place_order",
            "description": "Places an online order for groceries or other items and returns the order ID and total price.",
            "parameters": {
                "type": "object",
                "properties": {
                    "customer_id": {
                        "type": "string",
                        "description": "The ID of the customer placing the order."
                    },
                    "items": {
                        "type": "array",
                        "description": "A list of dictionaries containing item details. Each dictionary should have 'item_id' and 'quantity' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "item_id": {
                                    "type": "string"
                                },
                                "quantity": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "item_id",
                                "quantity"
                            ]
                        }
                    },
                    "delivery_address": {
                        "type": "string",
                        "description": "The address where the order needs to be delivered."
                    },
                    "payment_method": {
                        "type": "string",
                        "description": "The payment method chosen by the customer."
                    }
                },
                "required": [
                    "customer_id",
                    "items",
                    "delivery_address",
                    "payment_method"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "order_id": {
                        "type": "string",
                        "description": "The id of the placed order."
                    },
                    "total_price": {
                        "type": "float",
                        "description": "The total price for the items ordered."
                    }
                },
                "required": [
                    "order_id",
                    "total_price"
                ]
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'place_order', 'description': 'Places an online order for groceries or other items and returns the order ID and total price.', 'parameters': {'type': 'object', 'properties': {'customer_id': {'type': 'string', 'description': 'The ID of the customer placing the order.'}, 'items': {'type': 'array', 'description': \"A list of dictionaries containing item details. Each dictionary should have 'item_id' and 'quantity' keys.\", 'items': {'type': 'object', 'properties': {'item_id': {'type': 'string'}, 'quantity': {'type': 'integer'}}, 'required': ['item_id', 'quantity']}}, 'delivery_address': {'type': 'string', 'description': 'The address where the order needs to be delivered.'}, 'payment_method': {'type': 'string', 'description': 'The payment method chosen by the customer.'}}, 'required': ['customer_id', 'items', 'delivery_address', 'payment_method']}, 'returns': {'type': 'object', 'properties': {'order_id': {'type': 'string', 'description': 'The id of the placed order.'}, 'total_price': {'type': 'float', 'description': 'The total price for the items ordered.'}}, 'required': ['order_id', 'total_price']}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "I need to place an order for groceries."
            },
            {
                "role": "assistant",
                "text": "Sure, I can help with that. Can you provide your customer ID?"
            },
            {
                "role": "user",
                "text": "My customer ID is '12345'."
            },
            {
                "role": "assistant",
                "text": "Perfect. Could you now specify the items you want to order and their respective quantity?"
            },
            {
                "role": "user",
                "text": "I'd like to order 2 of item 'A1' and 3 of item 'B2'."
            },
            {
                "role": "assistant",
                "text": "Got it. Can you please provide the address where you want your order to be delivered?"
            },
            {
                "role": "user",
                "text": "The delivery address is '123 Street, City, Country'."
            },
            {
                "role": "assistant",
                "text": "Excellent. Lastly, what payment method would you like to use?"
            },
            {
                "role": "user",
                "text": "I will pay using my credit card."
            },
            {
                "role": "assistant",
                "text": "Great, I'm placing your order now."
            }
        ],
        "function_call": {
            "function_name": "place_order",
            "parameters": {
                "customer_id": "12345",
                "items": [
                    {
                        "item_id": "A1",
                        "quantity": 2
                    },
                    {
                        "item_id": "B2",
                        "quantity": 3
                    }
                ],
                "delivery_address": "123 Street, City, Country",
                "payment_method": "credit card"
            }
        }
    }
}
{
    "function_id": "personal_assistant-8",
    "task": "Turn smart home devices on or off (e.g., lights, thermostat).",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Turn smart home devices on or off (e.g., lights, thermostat)."
    },
    "snippet": "def control_smart_home_device(\n    device_name: str,\n    action: str,\n) -> str:\n    \"\"\"\n    Controls a given smart home device (turns it on or off).\n    \n    Parameters:\n        device_name (str): The name of the device.\n        action (str): The action to perform on the device. Either 'on' or 'off'.\n                  \n    Returns:\n        str: A message stating the action performed on the device.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def control_smart_home_device(\n    device_name: str,\n    action: str,\n) -> str:\n    \"\"\"\n    Controls a given smart home device (turns it on or off).\n    \n    Parameters:\n        device_name (str): The name of the device.\n        action (str): The action to perform on the device. Either 'on' or 'off'.\n                  \n    Returns:\n        str: A message stating the action performed on the device.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "control_smart_home_device",
            "description": "Controls a given smart home device (turns it on or off).",
            "parameters": {
                "type": "object",
                "properties": {
                    "device_name": {
                        "type": "string",
                        "description": "The name of the device."
                    },
                    "action": {
                        "type": "string",
                        "description": "The action to perform on the device. Either 'on' or 'off'."
                    }
                },
                "required": [
                    "device_name",
                    "action"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "A message stating the action performed on the device."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'control_smart_home_device', 'description': 'Controls a given smart home device (turns it on or off).', 'parameters': {'type': 'object', 'properties': {'device_name': {'type': 'string', 'description': 'The name of the device.'}, 'action': {'type': 'string', 'description': \"The action to perform on the device. Either 'on' or 'off'.\"}}, 'required': ['device_name', 'action']}, 'returns': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'A message stating the action performed on the device.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you turn on the kitchen lights for me?"
            },
            {
                "role": "assistant",
                "text": "Sure. I'm turning on your kitchen lights now."
            }
        ],
        "function_call": {
            "function_name": "control_smart_home_device",
            "parameters": {
                "device_name": "kitchen lights",
                "action": "on"
            }
        }
    }
}
{
    "function_id": "personal_assistant-9",
    "task": "Make a phone call to a specific contact.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Make a phone call to a specific contact."
    },
    "snippet": "```python\ndef make_phone_call(contact_name: str) -> str:\n    \"\"\"\n    Makes a phone call to a specific contact.\n    \n    Parameters:\n        contact_name (str): The name of the contact to call.\n\n    Returns:\n        str: A status message indicating the success or failure of the phone call attempt.\n    \"\"\"\n```",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "```python\ndef make_phone_call(contact_name: str) -> str:\n    \"\"\"\n    Makes a phone call to a specific contact.\n    \n    Parameters:\n        contact_name (str): The name of the contact to call.\n\n    Returns:\n        str: A status message indicating the success or failure of the phone call attempt.\n    \"\"\"\n```",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "make_phone_call",
            "description": "Makes a phone call to a specific contact.",
            "parameters": {
                "type": "object",
                "properties": {
                    "contact_name": {
                        "type": "string",
                        "description": "The name of the contact to call."
                    }
                },
                "required": [
                    "contact_name"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "status_message": {
                        "type": "string",
                        "description": "A status message indicating the success or failure of the phone call attempt."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'make_phone_call', 'description': 'Makes a phone call to a specific contact.', 'parameters': {'type': 'object', 'properties': {'contact_name': {'type': 'string', 'description': 'The name of the contact to call.'}}, 'required': ['contact_name']}, 'returns': {'type': 'object', 'properties': {'status_message': {'type': 'string', 'description': 'A status message indicating the success or failure of the phone call attempt.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you make a call to John for me?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. I'm dialing John's number now."
            }
        ],
        "function_call": {
            "function_name": "make_phone_call",
            "parameters": {
                "contact_name": "John"
            }
        }
    }
}
{
    "function_id": "personal_assistant-10",
    "task": "Send a text message to a specific contact.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Send a text message to a specific contact."
    },
    "snippet": "def send_text(\n    contact: str,\n    message: str,\n) -> bool:\n    \"\"\"\n    Sends a text message to a specific contact and returns a boolean value indicating whether the message was successfully sent.\n    \n    Parameters:\n        contact (str): The contact to send the message to.\n        message (str): The message to be sent.\n                                          \n    Returns:\n        bool: True if the message was successfully sent, False otherwise.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def send_text(\n    contact: str,\n    message: str,\n) -> bool:\n    \"\"\"\n    Sends a text message to a specific contact and returns a boolean value indicating whether the message was successfully sent.\n    \n    Parameters:\n        contact (str): The contact to send the message to.\n        message (str): The message to be sent.\n                                          \n    Returns:\n        bool: True if the message was successfully sent, False otherwise.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "send_text",
            "description": "Sends a text message to a specific contact and returns a boolean value indicating whether the message was successfully sent.",
            "parameters": {
                "type": "object",
                "properties": {
                    "contact": {
                        "type": "string",
                        "description": "The contact to send the message to."
                    },
                    "message": {
                        "type": "string",
                        "description": "The message to be sent."
                    }
                },
                "required": [
                    "contact",
                    "message"
                ]
            },
            "returns": {
                "type": "boolean",
                "description": "True if the message was successfully sent, False otherwise."
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'send_text', 'description': 'Sends a text message to a specific contact and returns a boolean value indicating whether the message was successfully sent.', 'parameters': {'type': 'object', 'properties': {'contact': {'type': 'string', 'description': 'The contact to send the message to.'}, 'message': {'type': 'string', 'description': 'The message to be sent.'}}, 'required': ['contact', 'message']}, 'returns': {'type': 'boolean', 'description': 'True if the message was successfully sent, False otherwise.'}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you send a text message for me?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. May I have the contact and the message to be sent?"
            },
            {
                "role": "user",
                "text": "Yes, send the message 'Meeting at 10 AM' to John Doe."
            },
            {
                "role": "assistant",
                "text": "Sure, I'm sending your message to John Doe now."
            }
        ],
        "function_call": {
            "function_name": "send_text",
            "parameters": {
                "contact": "John Doe",
                "message": "Meeting at 10 AM"
            }
        }
    }
}
{
    "function_id": "personal_assistant-14",
    "task": "Convert currency, measurements, or other units.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Convert currency, measurements, or other units."
    },
    "snippet": "def convert_units(\n    value: float,\n    from_unit: str,\n    to_unit: str\n) -> float:\n    \"\"\"\n    Converts a given value from one unit to another.\n    \n    Parameters:\n        value (float): The value that needs to be converted.\n        from_unit (str): The unit of the input value.\n        to_unit (str): The desired unit for the output value.\n        \n    Returns:\n        float: The input value, converted to the desired unit.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def convert_units(\n    value: float,\n    from_unit: str,\n    to_unit: str\n) -> float:\n    \"\"\"\n    Converts a given value from one unit to another.\n    \n    Parameters:\n        value (float): The value that needs to be converted.\n        from_unit (str): The unit of the input value.\n        to_unit (str): The desired unit for the output value.\n        \n    Returns:\n        float: The input value, converted to the desired unit.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "convert_units",
            "description": "Converts a given value from one unit to another.",
            "parameters": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "float",
                        "description": "The value that needs to be converted."
                    },
                    "from_unit": {
                        "type": "string",
                        "description": "The unit of the input value."
                    },
                    "to_unit": {
                        "type": "string",
                        "description": "The desired unit for the output value."
                    }
                },
                "required": [
                    "value",
                    "from_unit",
                    "to_unit"
                ]
            },
            "returns": {
                "type": "float",
                "description": "The input value, converted to the desired unit."
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'convert_units', 'description': 'Converts a given value from one unit to another.', 'parameters': {'type': 'object', 'properties': {'value': {'type': 'float', 'description': 'The value that needs to be converted.'}, 'from_unit': {'type': 'string', 'description': 'The unit of the input value.'}, 'to_unit': {'type': 'string', 'description': 'The desired unit for the output value.'}}, 'required': ['value', 'from_unit', 'to_unit']}, 'returns': {'type': 'float', 'description': 'The input value, converted to the desired unit.'}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you convert a value for me?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. What's the value you want to convert and in which units?"
            },
            {
                "role": "user",
                "text": "I'd like to convert 100 Fahrenheit to Celsius."
            },
            {
                "role": "assistant",
                "text": "Alright, I'll convert 100 Fahrenheit to Celsius for you now."
            }
        ],
        "function_call": {
            "function_name": "convert_units",
            "parameters": {
                "value": 100.0,
                "from_unit": "Fahrenheit",
                "to_unit": "Celsius"
            }
        }
    }
}
{
    "function_id": "personal_assistant-15",
    "task": "Provide news headlines or updates.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Provide news headlines or updates."
    },
    "snippet": "def fetch_news_headlines(\n    category: str,\n    number_of_headlines: int,\n) -> List[str]:\n    \"\"\"\n    Fetches and returns a specific number of news headlines from a particular category.\n    \n    Parameters:\n        category (str): The category of news.\n        number_of_headlines (int): The number of headlines to fetch.\n\n    Returns:\n        List[str]: A list containing the news headlines.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def fetch_news_headlines(\n    category: str,\n    number_of_headlines: int,\n) -> List[str]:\n    \"\"\"\n    Fetches and returns a specific number of news headlines from a particular category.\n    \n    Parameters:\n        category (str): The category of news.\n        number_of_headlines (int): The number of headlines to fetch.\n\n    Returns:\n        List[str]: A list containing the news headlines.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "fetch_news_headlines",
            "description": "Fetches and returns a specific number of news headlines from a particular category.",
            "parameters": {
                "type": "object",
                "properties": {
                    "category": {
                        "type": "string",
                        "description": "The category of news."
                    },
                    "number_of_headlines": {
                        "type": "integer",
                        "description": "The number of headlines to fetch."
                    }
                },
                "required": [
                    "category",
                    "number_of_headlines"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "List[str]": {
                        "type": "array",
                        "description": "A list containing the news headlines.",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'fetch_news_headlines', 'description': 'Fetches and returns a specific number of news headlines from a particular category.', 'parameters': {'type': 'object', 'properties': {'category': {'type': 'string', 'description': 'The category of news.'}, 'number_of_headlines': {'type': 'integer', 'description': 'The number of headlines to fetch.'}}, 'required': ['category', 'number_of_headlines']}, 'returns': {'type': 'object', 'properties': {'List[str]': {'type': 'array', 'description': 'A list containing the news headlines.', 'items': {'type': 'string'}}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you fetch me the latest sports headlines?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. How many headlines would you like to see?"
            },
            {
                "role": "user",
                "text": "I would like to see 10 headlines."
            },
            {
                "role": "assistant",
                "text": "Great, I'm fetching your sports headlines now."
            }
        ],
        "function_call": {
            "function_name": "fetch_news_headlines",
            "parameters": {
                "category": "sports",
                "number_of_headlines": 10
            }
        }
    }
}
{
    "function_id": "personal_assistant-17",
    "task": "Stream a video from a specified service.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Stream a video from a specified service."
    },
    "snippet": "def stream_video(\n    service: str,\n    video_id: str\n) -> None:\n    \"\"\"\n    Stream a video from a specified service.\n\n    Parameters:\n        service (str): The name of the streaming service (e.g., 'YouTube', 'Netflix', etc.)\n        video_id (str): The unique id of the video to stream on the service.\n        \n    Returns: \n        None\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def stream_video(\n    service: str,\n    video_id: str\n) -> None:\n    \"\"\"\n    Stream a video from a specified service.\n\n    Parameters:\n        service (str): The name of the streaming service (e.g., 'YouTube', 'Netflix', etc.)\n        video_id (str): The unique id of the video to stream on the service.\n        \n    Returns: \n        None\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "stream_video",
            "description": "Stream a video from a specified service.",
            "parameters": {
                "type": "object",
                "properties": {
                    "service": {
                        "type": "string",
                        "description": "The name of the streaming service (e.g., 'YouTube', 'Netflix', etc.)"
                    },
                    "video_id": {
                        "type": "string",
                        "description": "The unique id of the video to stream on the service."
                    }
                },
                "required": [
                    "service",
                    "video_id"
                ]
            },
            "returns": {
                "type": "null",
                "description": "None"
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'stream_video', 'description': 'Stream a video from a specified service.', 'parameters': {'type': 'object', 'properties': {'service': {'type': 'string', 'description': \"The name of the streaming service (e.g., 'YouTube', 'Netflix', etc.)\"}, 'video_id': {'type': 'string', 'description': 'The unique id of the video to stream on the service.'}}, 'required': ['service', 'video_id']}, 'returns': {'type': 'null', 'description': 'None'}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you stream a video for me?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Can you please tell me the name of the streaming service and the unique id of the video?"
            },
            {
                "role": "user",
                "text": "Yes, I want to stream from Netflix and the video id is 'XYZ123'."
            },
            {
                "role": "assistant",
                "text": "Great, I'm streaming your video on Netflix now."
            }
        ],
        "function_call": {
            "function_name": "stream_video",
            "parameters": {
                "service": "Netflix",
                "video_id": "XYZ123"
            }
        }
    }
}
{
    "function_id": "personal_assistant-18",
    "task": "Take notes or transcribe spoken content.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Take notes or transcribe spoken content."
    },
    "snippet": "def transcribe_spoken_content(\n    audio_file: str,\n    language: str,\n    format: str\n) -> list:\n    \"\"\"\n    Transcribes spoken content from an audio file and returns the transcription.\n\n    Parameters:\n        audio_file (str): The location of the audio file to transcribe.\n        language (str): The language of the spoken content.\n        format (str): The format of the audio file (e.g. .wav, .mp3, etc.)\n\n    Returns:\n        list: A list of strings with each string representing a transcribed segment of the spoken content.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def transcribe_spoken_content(\n    audio_file: str,\n    language: str,\n    format: str\n) -> list:\n    \"\"\"\n    Transcribes spoken content from an audio file and returns the transcription.\n\n    Parameters:\n        audio_file (str): The location of the audio file to transcribe.\n        language (str): The language of the spoken content.\n        format (str): The format of the audio file (e.g. .wav, .mp3, etc.)\n\n    Returns:\n        list: A list of strings with each string representing a transcribed segment of the spoken content.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "transcribe_spoken_content",
            "description": "Transcribes spoken content from an audio file and returns the transcription.",
            "parameters": {
                "type": "object",
                "properties": {
                    "audio_file": {
                        "type": "string",
                        "description": "The location of the audio file to transcribe."
                    },
                    "language": {
                        "type": "string",
                        "description": "The language of the spoken content."
                    },
                    "format": {
                        "type": "string",
                        "description": "The format of the audio file (e.g. .wav, .mp3, etc.)"
                    }
                },
                "required": [
                    "audio_file",
                    "language",
                    "format"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "transcription": {
                        "type": "list",
                        "description": "A list of strings with each string representing a transcribed segment of the spoken content."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'transcribe_spoken_content', 'description': 'Transcribes spoken content from an audio file and returns the transcription.', 'parameters': {'type': 'object', 'properties': {'audio_file': {'type': 'string', 'description': 'The location of the audio file to transcribe.'}, 'language': {'type': 'string', 'description': 'The language of the spoken content.'}, 'format': {'type': 'string', 'description': 'The format of the audio file (e.g. .wav, .mp3, etc.)'}}, 'required': ['audio_file', 'language', 'format']}, 'returns': {'type': 'object', 'properties': {'transcription': {'type': 'list', 'description': 'A list of strings with each string representing a transcribed segment of the spoken content.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you transcribe this audio file for me?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Could you please provide me the location of the audio file?"
            },
            {
                "role": "user",
                "text": "Yes, the audio file is located at '/home/user123/music/sample.wav'."
            },
            {
                "role": "assistant",
                "text": "Understood. Can you tell me what language is spoken in the audio file and its format?"
            },
            {
                "role": "user",
                "text": "The language is English and the format is .wav."
            },
            {
                "role": "assistant",
                "text": "Thank you for the information. I'm going to transcribe the content of the audio file now."
            }
        ],
        "function_call": {
            "function_name": "transcribe_spoken_content",
            "parameters": {
                "audio_file": "/home/user123/music/sample.wav",
                "language": "English",
                "format": ".wav"
            }
        }
    }
}
{
    "function_id": "personal_assistant-19",
    "task": "Read aloud text from an article, book, or webpage.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Read aloud text from an article, book, or webpage."
    },
    "snippet": "def read_aloud(\n    text_source: str,\n    source_type: str\n) -> None:\n    \"\"\"\n    Reads aloud text from the provided source. \n    \n    Parameters:\n        text_source (str): The source of the text to be read. It could be a URL, a file path, or the actual text.\n        source_type (str): The type of the source. Possible values are 'URL', 'file', or 'text'.\n        \n    Returns:\n        None\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def read_aloud(\n    text_source: str,\n    source_type: str\n) -> None:\n    \"\"\"\n    Reads aloud text from the provided source. \n    \n    Parameters:\n        text_source (str): The source of the text to be read. It could be a URL, a file path, or the actual text.\n        source_type (str): The type of the source. Possible values are 'URL', 'file', or 'text'.\n        \n    Returns:\n        None\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "read_aloud",
            "description": "Reads aloud text from the provided source.",
            "parameters": {
                "type": "object",
                "properties": {
                    "text_source": {
                        "type": "string",
                        "description": "The source of the text to be read. It could be a URL, a file path, or the actual text."
                    },
                    "source_type": {
                        "type": "string",
                        "description": "The type of the source. Possible values are 'URL', 'file', or 'text'."
                    }
                },
                "required": [
                    "text_source",
                    "source_type"
                ]
            },
            "returns": {
                "type": "null",
                "description": "None"
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'read_aloud', 'description': 'Reads aloud text from the provided source.', 'parameters': {'type': 'object', 'properties': {'text_source': {'type': 'string', 'description': 'The source of the text to be read. It could be a URL, a file path, or the actual text.'}, 'source_type': {'type': 'string', 'description': \"The type of the source. Possible values are 'URL', 'file', or 'text'.\"}}, 'required': ['text_source', 'source_type']}, 'returns': {'type': 'null', 'description': 'None'}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you read aloud the text from this URL for me?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Can you provide the URL please?"
            },
            {
                "role": "user",
                "text": "Yes, the URL is 'https://www.example.com'."
            },
            {
                "role": "assistant",
                "text": "Okay, I'm reading aloud the text from your provided URL now."
            }
        ],
        "function_call": {
            "function_name": "read_aloud",
            "parameters": {
                "text_source": "https://www.example.com",
                "source_type": "URL"
            }
        }
    }
}
{
    "function_id": "personal_assistant-20",
    "task": "Provide recommendations for restaurants or entertainment.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Provide recommendations for restaurants or entertainment."
    },
    "snippet": "def provide_recommendations(\n    user_preferences: Dict[str, Union[str, List[str]]],\n    location: str,\n) -> List[Dict[str, Union[str, float]]]:\n    \"\"\"\n    Provide recommendations for restaurants or entertainment based on user preferences and location.\n    \n    Parameters:\n        user_preferences (Dict[str, Union[str, List[str]]]): A dictionary containing user preferences.\n                                                             This can include preferred cuisine types, budget,\n                                                             entertainment interests etc.\n        location (str): The location for which recommendations are to be provided.\n                        \n    Returns:\n        List[Dict[str, Union[str, float]]]: A List of dictionaries where each dictionary represents a\n                                            particular recommendation. Each dictionary can include details\n                                            like 'name', 'type' (restaurant or entertainment),\n                                            'rating', 'price' etc.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def provide_recommendations(\n    user_preferences: Dict[str, Union[str, List[str]]],\n    location: str,\n) -> List[Dict[str, Union[str, float]]]:\n    \"\"\"\n    Provide recommendations for restaurants or entertainment based on user preferences and location.\n    \n    Parameters:\n        user_preferences (Dict[str, Union[str, List[str]]]): A dictionary containing user preferences.\n                                                             This can include preferred cuisine types, budget,\n                                                             entertainment interests etc.\n        location (str): The location for which recommendations are to be provided.\n                        \n    Returns:\n        List[Dict[str, Union[str, float]]]: A List of dictionaries where each dictionary represents a\n                                            particular recommendation. Each dictionary can include details\n                                            like 'name', 'type' (restaurant or entertainment),\n                                            'rating', 'price' etc.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "provide_recommendations",
            "description": "Provide recommendations for restaurants or entertainment based on user preferences and location.",
            "parameters": {
                "type": "object",
                "properties": {
                    "user_preferences": {
                        "type": "object",
                        "description": "A dictionary containing user preferences. This can include preferred cuisine types, budget, entertainment interests etc.",
                        "properties": {
                            "type": "string or list of strings"
                        }
                    },
                    "location": {
                        "type": "string",
                        "description": "The location for which recommendations are to be provided."
                    }
                },
                "required": [
                    "user_preferences",
                    "location"
                ]
            },
            "returns": {
                "type": "array",
                "description": "A List of dictionaries where each dictionary represents a particular recommendation. Each dictionary can include details like 'name', 'type' (restaurant or entertainment), 'rating', 'price' etc.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "type": {
                            "type": "string",
                            "description": "Restaurant or entertainment"
                        },
                        "rating": {
                            "type": "float"
                        },
                        "price": {
                            "type": "float or string"
                        }
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'provide_recommendations', 'description': 'Provide recommendations for restaurants or entertainment based on user preferences and location.', 'parameters': {'type': 'object', 'properties': {'user_preferences': {'type': 'object', 'description': 'A dictionary containing user preferences. This can include preferred cuisine types, budget, entertainment interests etc.', 'properties': {'type': 'string or list of strings'}}, 'location': {'type': 'string', 'description': 'The location for which recommendations are to be provided.'}}, 'required': ['user_preferences', 'location']}, 'returns': {'type': 'array', 'description': \"A List of dictionaries where each dictionary represents a particular recommendation. Each dictionary can include details like 'name', 'type' (restaurant or entertainment), 'rating', 'price' etc.\", 'items': {'type': 'object', 'properties': {'name': {'type': 'string'}, 'type': {'type': 'string', 'description': 'Restaurant or entertainment'}, 'rating': {'type': 'float'}, 'price': {'type': 'float or string'}}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you recommend some good restaurants or entertainment in Boston?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Can you tell me your preferences? Like type of cuisine, budget, entertainment interests etc."
            },
            {
                "role": "user",
                "text": "I prefer Italian cuisine and my budget is moderate. As for entertainment, I enjoy live music."
            },
            {
                "role": "assistant",
                "text": "Great, I'm finding suitable recommendations for you now."
            }
        ],
        "function_call": {
            "function_name": "provide_recommendations",
            "parameters": {
                "user_preferences": {
                    "cuisine": "Italian",
                    "budget": "moderate",
                    "entertainment": "live music"
                },
                "location": "Boston"
            }
        }
    }
}
{
    "function_id": "personal_assistant-21",
    "task": "Manage and set alarms or timers.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Manage and set alarms or timers."
    },
    "snippet": "def manage_alarms(\n    action: str,\n    alarm_time: str = None,\n    timer_duration: int = None,\n) -> str:\n    \"\"\"\n    Manages and sets alarms or timers.\n\n    Parameters:\n        action (str): The action to be performed. Can be \"set_alarm\", \"set_timer\", \"remove_alarm\", or \"remove_timer\".\n        alarm_time (str, optional): The time to set the alarm in HH:MM format. Required if action is \"set_alarm\" or \"remove_alarm\".\n        timer_duration (int, optional): The duration of the timer in seconds. Required if action is \"set_timer\" or \"remove_timer\".\n\n    Returns:\n        str: A message indicating the result of the operation.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def manage_alarms(\n    action: str,\n    alarm_time: str = None,\n    timer_duration: int = None,\n) -> str:\n    \"\"\"\n    Manages and sets alarms or timers.\n\n    Parameters:\n        action (str): The action to be performed. Can be \"set_alarm\", \"set_timer\", \"remove_alarm\", or \"remove_timer\".\n        alarm_time (str, optional): The time to set the alarm in HH:MM format. Required if action is \"set_alarm\" or \"remove_alarm\".\n        timer_duration (int, optional): The duration of the timer in seconds. Required if action is \"set_timer\" or \"remove_timer\".\n\n    Returns:\n        str: A message indicating the result of the operation.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "manage_alarms",
            "description": "Manages and sets alarms or timers.",
            "parameters": {
                "type": "object",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "The action to be performed. Can be 'set_alarm', 'set_timer', 'remove_alarm', or 'remove_timer'."
                    },
                    "alarm_time": {
                        "type": "string",
                        "description": "The time to set the alarm in HH:MM format. Required if action is 'set_alarm' or 'remove_alarm'."
                    },
                    "timer_duration": {
                        "type": "integer",
                        "description": "The duration of the timer in seconds. Required if action is 'set_timer' or 'remove_timer'."
                    }
                },
                "required": [
                    "action"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "A message indicating the result of the operation."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'manage_alarms', 'description': 'Manages and sets alarms or timers.', 'parameters': {'type': 'object', 'properties': {'action': {'type': 'string', 'description': \"The action to be performed. Can be 'set_alarm', 'set_timer', 'remove_alarm', or 'remove_timer'.\"}, 'alarm_time': {'type': 'string', 'description': \"The time to set the alarm in HH:MM format. Required if action is 'set_alarm' or 'remove_alarm'.\"}, 'timer_duration': {'type': 'integer', 'description': \"The duration of the timer in seconds. Required if action is 'set_timer' or 'remove_timer'.\"}}, 'required': ['action']}, 'returns': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'A message indicating the result of the operation.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you set an alarm for me at 7:30 am?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Let me set the alarm for you."
            },
            {
                "role": "assistant",
                "text": "Alright, your alarm is set for 7:30 am."
            }
        ],
        "function_call": {
            "function_name": "manage_alarms",
            "parameters": {
                "action": "set_alarm",
                "alarm_time": "07:30"
            }
        }
    }
}
{
    "function_id": "personal_assistant-22",
    "task": "Track physical exercise and provide workout suggestions.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Track physical exercise and provide workout suggestions."
    },
    "snippet": "def track_exercise_and_suggest_workout(\n    user_exercises: List[Dict[str, Union[str, int]]],\n    user_goals: Dict[str, Union[str, int]]\n) -> Dict[str, str]:\n    \"\"\"\n    Tracks user's physical exercises and provides workout suggestions.\n    \n    Parameters:\n        user_exercises (List[Dict[str, Union[str, int]]]): A list of dictionaries containing details about the exercises performed by the user.\n                                                          Each dictionary should have 'exercise_name', 'duration_in_minutes', and 'intensity' keys.\n                                                          \n        user_goals (Dict[str, Union[str, int]]): A dictionary containing the user's fitness goals.\n                                                 This should have 'desired_weight', 'desired_endurance_level', and 'desired_strength_level' keys.\n                                                 \n    Returns:\n        Dict[str, str]: A dictionary with 'status_message' describing user's progress and 'suggested_workout' as keys. \n                        The 'suggested_workout' will recommend exercises based on the user's progress towards his/her fitness goals.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def track_exercise_and_suggest_workout(\n    user_exercises: List[Dict[str, Union[str, int]]],\n    user_goals: Dict[str, Union[str, int]]\n) -> Dict[str, str]:\n    \"\"\"\n    Tracks user's physical exercises and provides workout suggestions.\n    \n    Parameters:\n        user_exercises (List[Dict[str, Union[str, int]]]): A list of dictionaries containing details about the exercises performed by the user.\n                                                          Each dictionary should have 'exercise_name', 'duration_in_minutes', and 'intensity' keys.\n                                                          \n        user_goals (Dict[str, Union[str, int]]): A dictionary containing the user's fitness goals.\n                                                 This should have 'desired_weight', 'desired_endurance_level', and 'desired_strength_level' keys.\n                                                 \n    Returns:\n        Dict[str, str]: A dictionary with 'status_message' describing user's progress and 'suggested_workout' as keys. \n                        The 'suggested_workout' will recommend exercises based on the user's progress towards his/her fitness goals.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "track_exercise_and_suggest_workout",
            "description": "Tracks user's physical exercises and provides workout suggestions.",
            "parameters": {
                "type": "object",
                "properties": {
                    "user_exercises": {
                        "type": "array",
                        "description": "A list of dictionaries containing details about the exercises performed by the user. Each dictionary should have 'exercise_name', 'duration_in_minutes', and 'intensity' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "exercise_name": {
                                    "type": "string"
                                },
                                "duration_in_minutes": {
                                    "type": "integer"
                                },
                                "intensity": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exercise_name",
                                "duration_in_minutes",
                                "intensity"
                            ]
                        }
                    },
                    "user_goals": {
                        "type": "object",
                        "description": "A dictionary containing the user's fitness goals. This should have 'desired_weight', 'desired_endurance_level', and 'desired_strength_level' keys.",
                        "properties": {
                            "desired_weight": {
                                "type": "integer"
                            },
                            "desired_endurance_level": {
                                "type": "string"
                            },
                            "desired_strength_level": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "desired_weight",
                            "desired_endurance_level",
                            "desired_strength_level"
                        ]
                    }
                },
                "required": [
                    "user_exercises",
                    "user_goals"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "status_message": {
                        "type": "string",
                        "description": "Describing user's progress."
                    },
                    "suggested_workout": {
                        "type": "string",
                        "description": "Recommends exercises based on the user's progress towards his/her fitness goals."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'track_exercise_and_suggest_workout', 'description': \"Tracks user's physical exercises and provides workout suggestions.\", 'parameters': {'type': 'object', 'properties': {'user_exercises': {'type': 'array', 'description': \"A list of dictionaries containing details about the exercises performed by the user. Each dictionary should have 'exercise_name', 'duration_in_minutes', and 'intensity' keys.\", 'items': {'type': 'object', 'properties': {'exercise_name': {'type': 'string'}, 'duration_in_minutes': {'type': 'integer'}, 'intensity': {'type': 'string'}}, 'required': ['exercise_name', 'duration_in_minutes', 'intensity']}}, 'user_goals': {'type': 'object', 'description': \"A dictionary containing the user's fitness goals. This should have 'desired_weight', 'desired_endurance_level', and 'desired_strength_level' keys.\", 'properties': {'desired_weight': {'type': 'integer'}, 'desired_endurance_level': {'type': 'string'}, 'desired_strength_level': {'type': 'string'}}, 'required': ['desired_weight', 'desired_endurance_level', 'desired_strength_level']}}, 'required': ['user_exercises', 'user_goals']}, 'returns': {'type': 'object', 'properties': {'status_message': {'type': 'string', 'description': \"Describing user's progress.\"}, 'suggested_workout': {'type': 'string', 'description': \"Recommends exercises based on the user's progress towards his/her fitness goals.\"}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you help me track my exercises and suggest a workout?"
            },
            {
                "role": "assistant",
                "text": "Absolutely, I'd be happy to help. Could you let me know the exercises that you've been doing, how long you've been doing them and at what intensity?"
            },
            {
                "role": "user",
                "text": "Sure, I've been doing push-ups for 20 minutes at medium intensity, and I run for 30 minutes at high intensity."
            },
            {
                "role": "assistant",
                "text": "Great, and could you also tell me about your fitness goals? Specifically, your desired weight, endurance level, and strength level?"
            },
            {
                "role": "user",
                "text": "Yeah, I want to reach a weight of 185 pounds, with high endurance and medium strength level."
            },
            {
                "role": "assistant",
                "text": "Understood. Let me process that and suggest a workout for you."
            }
        ],
        "function_call": {
            "function_name": "track_exercise_and_suggest_workout",
            "parameters": {
                "user_exercises": [
                    {
                        "exercise_name": "push-ups",
                        "duration_in_minutes": 20,
                        "intensity": "medium"
                    },
                    {
                        "exercise_name": "run",
                        "duration_in_minutes": 30,
                        "intensity": "high"
                    }
                ],
                "user_goals": {
                    "desired_weight": 185,
                    "desired_endurance_level": "high",
                    "desired_strength_level": "medium"
                }
            }
        }
    }
}
{
    "function_id": "personal_assistant-24",
    "task": "Answer trivia questions or play interactive games.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Answer trivia questions or play interactive games."
    },
    "snippet": "def play_trivia_game(\n    trivia_questions: List[Dict[str, str]], \n    user_answers: List[str]\n) -> Dict[str, Any]:\n    \"\"\"\n    This function takes trivia questions and user answers, then returns the results.\n    \n    Parameters:\n        trivia_questions (List[Dict[str, str]]): A list of dictionaries containing trivia questions.\n                                                Each dictionary should have 'question' and 'correct_answer' keys.\n        user_answers (List[str]): A list of user's answers.\n\n    Returns:\n        Dict[str, Any]: A dictionary that includes 'total_questions', 'total_correct_answers', and 'correct_answers' as keys.\n    \"\"\"\n\ndef play_interactive_game(\n    game_logic: Callable, \n    user_inputs: List[Any]\n) -> Any:\n    \"\"\"\n    This function takes a game's logic function and a list of user inputs, then executes the game and returns the result.\n    \n    Parameters:\n        game_logic (Callable): A function object representing the game's logic. This function should take user inputs as arguments,\n                               and return the game's output based on those inputs.\n        user_inputs (List[Any]): A list of inputs from the user.\n\n    Returns:\n        Any: The result of the game. The type of this return value will depend on the implementation of the game_logic function.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def play_trivia_game(\n    trivia_questions: List[Dict[str, str]], \n    user_answers: List[str]\n) -> Dict[str, Any]:\n    \"\"\"\n    This function takes trivia questions and user answers, then returns the results.\n    \n    Parameters:\n        trivia_questions (List[Dict[str, str]]): A list of dictionaries containing trivia questions.\n                                                Each dictionary should have 'question' and 'correct_answer' keys.\n        user_answers (List[str]): A list of user's answers.\n\n    Returns:\n        Dict[str, Any]: A dictionary that includes 'total_questions', 'total_correct_answers', and 'correct_answers' as keys.\n    \"\"\"\n\ndef play_interactive_game(\n    game_logic: Callable, \n    user_inputs: List[Any]\n) -> Any:\n    \"\"\"\n    This function takes a game's logic function and a list of user inputs, then executes the game and returns the result.\n    \n    Parameters:\n        game_logic (Callable): A function object representing the game's logic. This function should take user inputs as arguments,\n                               and return the game's output based on those inputs.\n        user_inputs (List[Any]): A list of inputs from the user.\n\n    Returns:\n        Any: The result of the game. The type of this return value will depend on the implementation of the game_logic function.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "play_interactive_game",
            "description": "This function takes a game's logic function and a list of user inputs, then executes the game and returns the result.",
            "parameters": {
                "type": "object",
                "properties": {
                    "game_logic": {
                        "type": "callable",
                        "description": "A function object representing the game's logic. This function should take user inputs as arguments, and return the game's output based on those inputs."
                    },
                    "user_inputs": {
                        "type": "array",
                        "description": "A list of inputs from the user.",
                        "items": {
                            "type": "any"
                        }
                    }
                },
                "required": [
                    "game_logic",
                    "user_inputs"
                ]
            },
            "returns": {
                "type": "any",
                "description": "The result of the game. The type of this return value will depend on the implementation of the game_logic function."
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'play_interactive_game', 'description': \"This function takes a game's logic function and a list of user inputs, then executes the game and returns the result.\", 'parameters': {'type': 'object', 'properties': {'game_logic': {'type': 'callable', 'description': \"A function object representing the game's logic. This function should take user inputs as arguments, and return the game's output based on those inputs.\"}, 'user_inputs': {'type': 'array', 'description': 'A list of inputs from the user.', 'items': {'type': 'any'}}}, 'required': ['game_logic', 'user_inputs']}, 'returns': {'type': 'any', 'description': 'The result of the game. The type of this return value will depend on the implementation of the game_logic function.'}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": "Here is the conversation:\n\n    {\n        \"conversation\": \n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can we play an interactive game?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. Do you have a specific game in mind?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, I want to play 'Guess the Number'\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, let's start. Please input your guess.\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"I guess '7'.'\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Understood, let's see how it goes.\"\n    }\n]\n,\n        \"function_call\": \n{\n    \"function_name\": \"play_interactive_game\",\n    \"parameters\": {\n        \"game_logic\": \"Guess the Number\",\n        \"user_inputs\": [\"7\"]\n    }\n}\n\n    }"
}
{
    "function_id": "personal_assistant-25",
    "task": "Provide cooking recipes or instructions.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Provide cooking recipes or instructions."
    },
    "snippet": "def provide_recipe(\n    dish_name: str,\n    ingredients: List[Dict[str, Union[str, int]]],\n    instructions: List[str],\n) -> Dict[str, Union[str, List[str], List[Dict[str, Union[str, int]]]]]:\n    \"\"\"\n    Provides cooking recipes or instructions.\n    \n    Parameters:\n        dish_name (str): The name of the dish.\n        ingredients (List[Dict[str, Union[str, int]]]): A list of dictionaries containing ingredients details.\n                                                        Each dictionary should have 'ingredient' and 'quantity' keys.\n        instructions (List[str]): A list of strings containing step-by-step cooking instructions.\n                                          \n    Returns:\n        Dict[str, Union[str, List[str], List[Dict[str, Union[str, int]]]]]: A dictionary with 'dish_name', 'ingredients' \n                                                                             and 'instructions' as keys and corresponding details\n                                                                             as values.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def provide_recipe(\n    dish_name: str,\n    ingredients: List[Dict[str, Union[str, int]]],\n    instructions: List[str],\n) -> Dict[str, Union[str, List[str], List[Dict[str, Union[str, int]]]]]:\n    \"\"\"\n    Provides cooking recipes or instructions.\n    \n    Parameters:\n        dish_name (str): The name of the dish.\n        ingredients (List[Dict[str, Union[str, int]]]): A list of dictionaries containing ingredients details.\n                                                        Each dictionary should have 'ingredient' and 'quantity' keys.\n        instructions (List[str]): A list of strings containing step-by-step cooking instructions.\n                                          \n    Returns:\n        Dict[str, Union[str, List[str], List[Dict[str, Union[str, int]]]]]: A dictionary with 'dish_name', 'ingredients' \n                                                                             and 'instructions' as keys and corresponding details\n                                                                             as values.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "provide_recipe",
            "description": "Provides cooking recipes or instructions.",
            "parameters": {
                "type": "object",
                "properties": {
                    "dish_name": {
                        "type": "string",
                        "description": "The name of the dish."
                    },
                    "ingredients": {
                        "type": "array",
                        "description": "A list of dictionaries containing ingredients details. Each dictionary should have 'ingredient' and 'quantity' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "ingredient": {
                                    "type": "string"
                                },
                                "quantity": {
                                    "type": [
                                        "string",
                                        "integer"
                                    ]
                                }
                            },
                            "required": [
                                "ingredient",
                                "quantity"
                            ]
                        }
                    },
                    "instructions": {
                        "type": "array",
                        "description": "A list of strings containing step-by-step cooking instructions.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "dish_name",
                    "ingredients",
                    "instructions"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "dish_name": {
                        "type": "string",
                        "description": "The name of the dish."
                    },
                    "ingredients": {
                        "type": "array",
                        "description": "A list of dictionaries containing ingredients details.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "ingredient": {
                                    "type": "string"
                                },
                                "quantity": {
                                    "type": [
                                        "string",
                                        "integer"
                                    ]
                                }
                            }
                        }
                    },
                    "instructions": {
                        "type": "array",
                        "description": "A list of strings containing step-by-step cooking instructions.",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'provide_recipe', 'description': 'Provides cooking recipes or instructions.', 'parameters': {'type': 'object', 'properties': {'dish_name': {'type': 'string', 'description': 'The name of the dish.'}, 'ingredients': {'type': 'array', 'description': \"A list of dictionaries containing ingredients details. Each dictionary should have 'ingredient' and 'quantity' keys.\", 'items': {'type': 'object', 'properties': {'ingredient': {'type': 'string'}, 'quantity': {'type': ['string', 'integer']}}, 'required': ['ingredient', 'quantity']}}, 'instructions': {'type': 'array', 'description': 'A list of strings containing step-by-step cooking instructions.', 'items': {'type': 'string'}}}, 'required': ['dish_name', 'ingredients', 'instructions']}, 'returns': {'type': 'object', 'properties': {'dish_name': {'type': 'string', 'description': 'The name of the dish.'}, 'ingredients': {'type': 'array', 'description': 'A list of dictionaries containing ingredients details.', 'items': {'type': 'object', 'properties': {'ingredient': {'type': 'string'}, 'quantity': {'type': ['string', 'integer']}}}}, 'instructions': {'type': 'array', 'description': 'A list of strings containing step-by-step cooking instructions.', 'items': {'type': 'string'}}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, could you provide me a recipe for Spaghetti Bolognese?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Can you provide me with the ingredients you have?"
            },
            {
                "role": "user",
                "text": "I have spaghetti, ground beef, onions, garlic, canned tomatoes, olive oil, and various seasonings."
            },
            {
                "role": "assistant",
                "text": "Great. Do you have any specific cooking steps you want to follow?"
            },
            {
                "role": "user",
                "text": "No, I'll follow the standard instructions."
            },
            {
                "role": "assistant",
                "text": "Alright. I'm preparing the recipe for you now."
            }
        ],
        "function_call": {
            "function_name": "provide_recipe",
            "parameters": {
                "dish_name": "Spaghetti Bolognese",
                "ingredients": [
                    {
                        "ingredient": "spaghetti",
                        "quantity": "1 pack"
                    },
                    {
                        "ingredient": "ground beef",
                        "quantity": "500 grams"
                    },
                    {
                        "ingredient": "onions",
                        "quantity": "2"
                    },
                    {
                        "ingredient": "garlic",
                        "quantity": "3 cloves"
                    },
                    {
                        "ingredient": "canned tomatoes",
                        "quantity": "1 can"
                    },
                    {
                        "ingredient": "olive oil",
                        "quantity": "2 tablespoons"
                    },
                    {
                        "ingredient": "various seasonings",
                        "quantity": "to taste"
                    }
                ],
                "instructions": []
            }
        }
    }
}
