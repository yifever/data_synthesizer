{
    "function_id": "ai_research-2",
    "task": "Retrieve text from specified academic papers for analysis.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Retrieve text from specified academic papers for analysis."
    },
    "snippet": "def extract_text_from_papers(\n    paper_ids: List[str],\n    database_connection: any,\n) -> List[str]:\n    \"\"\"\n    Retrieves the text content from a list of specified academic papers from a given database.\n\n    Parameters:\n        paper_ids (List[str]): A list of unique identifiers for the academic papers.\n        database_connection (any): An active connection to the database where academic papers are stored.\n\n    Returns:\n        List[str]: A list of text contents for each academic paper.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def extract_text_from_papers(\n    paper_ids: List[str],\n    database_connection: any,\n) -> List[str]:\n    \"\"\"\n    Retrieves the text content from a list of specified academic papers from a given database.\n\n    Parameters:\n        paper_ids (List[str]): A list of unique identifiers for the academic papers.\n        database_connection (any): An active connection to the database where academic papers are stored.\n\n    Returns:\n        List[str]: A list of text contents for each academic paper.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "extract_text_from_papers",
            "description": "Retrieves the text content from a list of specified academic papers from a given database.",
            "parameters": {
                "type": "object",
                "properties": {
                    "paper_ids": {
                        "type": "array",
                        "description": "A list of unique identifiers for the academic papers.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "database_connection": {
                        "type": "any",
                        "description": "An active connection to the database where academic papers are stored."
                    }
                },
                "required": [
                    "paper_ids",
                    "database_connection"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "output_list": {
                        "type": "array",
                        "description": "A list of text contents for each academic paper.",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'extract_text_from_papers', 'description': 'Retrieves the text content from a list of specified academic papers from a given database.', 'parameters': {'type': 'object', 'properties': {'paper_ids': {'type': 'array', 'description': 'A list of unique identifiers for the academic papers.', 'items': {'type': 'string'}}, 'database_connection': {'type': 'any', 'description': 'An active connection to the database where academic papers are stored.'}}, 'required': ['paper_ids', 'database_connection']}, 'returns': {'type': 'object', 'properties': {'output_list': {'type': 'array', 'description': 'A list of text contents for each academic paper.', 'items': {'type': 'string'}}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you retrieve text content from some academic papers for me?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Could you please provide the unique identifiers for the academic papers you want?"
            },
            {
                "role": "user",
                "text": "Yes, the paper IDs are '001', '002' and '003'."
            },
            {
                "role": "assistant",
                "text": "Perfect! Let's establish a connection to the database where these papers are stored."
            }
        ],
        "function_call": {
            "function_name": "extract_text_from_papers",
            "parameters": {
                "paper_ids": [
                    "001",
                    "002",
                    "003"
                ],
                "database_connection": "Successfully Connected"
            }
        }
    }
}
{
    "function_id": "ai_research-3",
    "task": "Submit research papers or articles to preprint servers or journals.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Submit research papers or articles to preprint servers or journals."
    },
    "snippet": "def submit_paper(\n    author_details: Dict[str, str],\n    paper_details: Dict[str, str],\n    server_or_journal: str\n) -> str:\n    \"\"\"\n    Submits a research paper or article to a specific preprint server or journal.\n    \n    Parameters:\n        author_details (Dict[str, str]): A dictionary containing author details.\n                                         This includes keys such as 'name', 'affiliation', and 'email'.\n        paper_details (Dict[str, str]): A dictionary containing details about the paper or article.\n                                         This includes keys such as 'title', 'abstract', and 'keywords'.\n        server_or_journal (str): The name of the preprint server or journal to which the paper is to be submitted.\n        \n    Returns:\n         str: A confirmation message indicating the successful submission of the paper.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def submit_paper(\n    author_details: Dict[str, str],\n    paper_details: Dict[str, str],\n    server_or_journal: str\n) -> str:\n    \"\"\"\n    Submits a research paper or article to a specific preprint server or journal.\n    \n    Parameters:\n        author_details (Dict[str, str]): A dictionary containing author details.\n                                         This includes keys such as 'name', 'affiliation', and 'email'.\n        paper_details (Dict[str, str]): A dictionary containing details about the paper or article.\n                                         This includes keys such as 'title', 'abstract', and 'keywords'.\n        server_or_journal (str): The name of the preprint server or journal to which the paper is to be submitted.\n        \n    Returns:\n         str: A confirmation message indicating the successful submission of the paper.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "submit_paper",
            "description": "Submits a research paper or article to a specific preprint server or journal.",
            "parameters": {
                "type": "object",
                "properties": {
                    "author_details": {
                        "type": "object",
                        "description": "A dictionary containing author details. This includes keys such as 'name', 'affiliation', and 'email'.",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "affiliation": {
                                "type": "string"
                            },
                            "email": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "name",
                            "affiliation",
                            "email"
                        ]
                    },
                    "paper_details": {
                        "type": "object",
                        "description": "A dictionary containing details about the paper or article. This includes keys such as 'title', 'abstract', and 'keywords'.",
                        "properties": {
                            "title": {
                                "type": "string"
                            },
                            "abstract": {
                                "type": "string"
                            },
                            "keywords": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "title",
                            "abstract",
                            "keywords"
                        ]
                    },
                    "server_or_journal": {
                        "type": "string",
                        "description": "The name of the preprint server or journal to which the paper is to be submitted."
                    }
                },
                "required": [
                    "author_details",
                    "paper_details",
                    "server_or_journal"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "confirmation_message": {
                        "type": "string",
                        "description": "A confirmation message indicating the successful submission of the paper."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'submit_paper', 'description': 'Submits a research paper or article to a specific preprint server or journal.', 'parameters': {'type': 'object', 'properties': {'author_details': {'type': 'object', 'description': \"A dictionary containing author details. This includes keys such as 'name', 'affiliation', and 'email'.\", 'properties': {'name': {'type': 'string'}, 'affiliation': {'type': 'string'}, 'email': {'type': 'string'}}, 'required': ['name', 'affiliation', 'email']}, 'paper_details': {'type': 'object', 'description': \"A dictionary containing details about the paper or article. This includes keys such as 'title', 'abstract', and 'keywords'.\", 'properties': {'title': {'type': 'string'}, 'abstract': {'type': 'string'}, 'keywords': {'type': 'string'}}, 'required': ['title', 'abstract', 'keywords']}, 'server_or_journal': {'type': 'string', 'description': 'The name of the preprint server or journal to which the paper is to be submitted.'}}, 'required': ['author_details', 'paper_details', 'server_or_journal']}, 'returns': {'type': 'object', 'properties': {'confirmation_message': {'type': 'string', 'description': 'A confirmation message indicating the successful submission of the paper.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "I need to submit my research paper to a journal."
            },
            {
                "role": "assistant",
                "text": "Sure, I can assist with that. Could you provide me with your name, affiliation, and email?"
            },
            {
                "role": "user",
                "text": "My name is John Doe, I'm affiliated with MIT, and my email is johndoe@mit.edu."
            },
            {
                "role": "assistant",
                "text": "Perfect. Now, could you provide me with the details about your paper, such as the title, abstract, and keywords?"
            },
            {
                "role": "user",
                "text": "The title of my paper is 'Quantum Physics: An Overview'. The abstract deals with the basic principles of quantum physics and its interpretation. The keywords are: Quantum Physics, Principles, Interpretation."
            },
            {
                "role": "assistant",
                "text": "Got it. To which server or journal would you like to submit?"
            },
            {
                "role": "user",
                "text": "I want to submit it to 'Physics Today'."
            },
            {
                "role": "assistant",
                "text": "Alright, I am submitting your paper now."
            }
        ],
        "function_call": {
            "function_name": "submit_paper",
            "parameters": {
                "author_details": {
                    "name": "John Doe",
                    "affiliation": "MIT",
                    "email": "johndoe@mit.edu"
                },
                "paper_details": {
                    "title": "Quantum Physics: An Overview",
                    "abstract": "The abstract deals with the basic principles of quantum physics and its interpretation.",
                    "keywords": "Quantum Physics, Principles, Interpretation"
                },
                "server_or_journal": "Physics Today"
            }
        }
    }
}
{
    "function_id": "ai_research-6",
    "task": "Perform hyperparameter tuning for machine learning models.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Perform hyperparameter tuning for machine learning models."
    },
    "snippet": "def tune_hyperparameters(\n    model: any,\n    parameters: Dict[str, List[Any]],\n    scoring_metric: str,\n    x_data: np.ndarray,\n    y_data: np.ndarray,\n    cv: int\n) -> Dict[str, Any]:\n    \"\"\"\n    Performs hyperparameter tuning on a given machine learning model and returns the best parameters.\n    \n    Parameters:\n        model (any): The machine learning model to tune.\n        parameters (Dict[str, List[Any]]): A dictionary of parameters to tune. Key is the parameter name,\n                                           value is a list of values to test.\n        scoring_metric (str): The scoring metric to use in comparing models.\n        x_data (np.ndarray): The feature dataset.\n        y_data (np.ndarray): The label dataset.\n        cv (int): The number of cross-validation folds to use.\n    \n    Returns:\n        Dict[str, Any]: A dictionary with the optimal parameter values.\n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def tune_hyperparameters(\n    model: any,\n    parameters: Dict[str, List[Any]],\n    scoring_metric: str,\n    x_data: np.ndarray,\n    y_data: np.ndarray,\n    cv: int\n) -> Dict[str, Any]:\n    \"\"\"\n    Performs hyperparameter tuning on a given machine learning model and returns the best parameters.\n    \n    Parameters:\n        model (any): The machine learning model to tune.\n        parameters (Dict[str, List[Any]]): A dictionary of parameters to tune. Key is the parameter name,\n                                           value is a list of values to test.\n        scoring_metric (str): The scoring metric to use in comparing models.\n        x_data (np.ndarray): The feature dataset.\n        y_data (np.ndarray): The label dataset.\n        cv (int): The number of cross-validation folds to use.\n    \n    Returns:\n        Dict[str, Any]: A dictionary with the optimal parameter values.\n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "tune_hyperparameters",
            "description": "Performs hyperparameter tuning on a given machine learning model and returns the best parameters.",
            "parameters": {
                "type": "object",
                "properties": {
                    "model": {
                        "type": "any",
                        "description": "The machine learning model to tune."
                    },
                    "parameters": {
                        "type": "object",
                        "description": "A dictionary of parameters to tune. Key is the parameter name, value is a list of values to test.",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "any"
                            }
                        }
                    },
                    "scoring_metric": {
                        "type": "string",
                        "description": "The scoring metric to use in comparing models."
                    },
                    "x_data": {
                        "type": "np.ndarray",
                        "description": "The feature dataset."
                    },
                    "y_data": {
                        "type": "np.ndarray",
                        "description": "The label dataset."
                    },
                    "cv": {
                        "type": "integer",
                        "description": "The number of cross-validation folds to use."
                    }
                },
                "required": [
                    "model",
                    "parameters",
                    "scoring_metric",
                    "x_data",
                    "y_data",
                    "cv"
                ]
            },
            "returns": {
                "type": "object",
                "description": "A dictionary with the optimal parameter values.",
                "additionalProperties": {
                    "type": "any"
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'tune_hyperparameters', 'description': 'Performs hyperparameter tuning on a given machine learning model and returns the best parameters.', 'parameters': {'type': 'object', 'properties': {'model': {'type': 'any', 'description': 'The machine learning model to tune.'}, 'parameters': {'type': 'object', 'description': 'A dictionary of parameters to tune. Key is the parameter name, value is a list of values to test.', 'additionalProperties': {'type': 'array', 'items': {'type': 'any'}}}, 'scoring_metric': {'type': 'string', 'description': 'The scoring metric to use in comparing models.'}, 'x_data': {'type': 'np.ndarray', 'description': 'The feature dataset.'}, 'y_data': {'type': 'np.ndarray', 'description': 'The label dataset.'}, 'cv': {'type': 'integer', 'description': 'The number of cross-validation folds to use.'}}, 'required': ['model', 'parameters', 'scoring_metric', 'x_data', 'y_data', 'cv']}, 'returns': {'type': 'object', 'description': 'A dictionary with the optimal parameter values.', 'additionalProperties': {'type': 'any'}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, could you help tune up the hyperparameters for my machine learning model?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Could you please provide me with the model and the parameters to be tuned?"
            },
            {
                "role": "user",
                "text": "Yes, Here is my model and the parameters I want to optimize."
            },
            {
                "role": "assistant",
                "text": "Great, I also need the scoring metric to use in comparing models, your feature and label datasets, and the number of cross-validation folds to use."
            },
            {
                "role": "user",
                "text": "Sure, Here are the details you asked for."
            },
            {
                "role": "assistant",
                "text": "Got it, I will start tuning the hyperparameters now."
            }
        ],
        "function_call": {
            "function_name": "tune_hyperparameters",
            "parameters": {
                "model": "User Provided Model",
                "parameters": "User Provided Parameters",
                "scoring_metric": "User Provided Scoring Metric",
                "x_data": "User Provided Feature Dataset",
                "y_data": "User Provided Label Dataset",
                "cv": "User Provided Cross-Validation folds"
            }
        }
    }
}
{
    "function_id": "ai_research-7",
    "task": "Visualize model performance metrics and experimental results.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Visualize model performance metrics and experimental results."
    },
    "snippet": "def visualize_model_performance(\n    model: models.Model,\n    x_test: np.ndarray,\n    y_test: np.ndarray\n) -> None:\n    \"\"\"\n    Visualizes model's performance metrics and experimental results.\n\n    Parameters:\n        model (models.Model): The trained model.\n        x_test (np.ndarray): The test data.\n        y_test (np.ndarray): The test labels.\n        \n    Returns:\n        None\n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def visualize_model_performance(\n    model: models.Model,\n    x_test: np.ndarray,\n    y_test: np.ndarray\n) -> None:\n    \"\"\"\n    Visualizes model's performance metrics and experimental results.\n\n    Parameters:\n        model (models.Model): The trained model.\n        x_test (np.ndarray): The test data.\n        y_test (np.ndarray): The test labels.\n        \n    Returns:\n        None\n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "visualize_model_performance",
            "description": "Visualizes model's performance metrics and experimental results.",
            "parameters": {
                "type": "object",
                "properties": {
                    "model": {
                        "type": "models.Model",
                        "description": "The trained model."
                    },
                    "x_test": {
                        "type": "np.ndarray",
                        "description": "The test data."
                    },
                    "y_test": {
                        "type": "np.ndarray",
                        "description": "The test labels."
                    }
                },
                "required": [
                    "model",
                    "x_test",
                    "y_test"
                ]
            },
            "returns": {
                "type": "None",
                "description": "Does not return any value."
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'visualize_model_performance', 'description': \"Visualizes model's performance metrics and experimental results.\", 'parameters': {'type': 'object', 'properties': {'model': {'type': 'models.Model', 'description': 'The trained model.'}, 'x_test': {'type': 'np.ndarray', 'description': 'The test data.'}, 'y_test': {'type': 'np.ndarray', 'description': 'The test labels.'}}, 'required': ['model', 'x_test', 'y_test']}, 'returns': {'type': 'None', 'description': 'Does not return any value.'}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you help me visualize the performance of my model?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can definitely assist with that. Could you please provide me with the trained model, the test data and the corresponding labels?"
            },
            {
                "role": "user",
                "text": "Yes, I have all of them ready."
            },
            {
                "role": "assistant",
                "text": "Great, I'm preparing the performance visualization for your model now."
            }
        ],
        "function_call": {
            "function_name": "visualize_model_performance",
            "parameters": {
                "model": "user_provided_model",
                "x_test": "user_provided_test_data",
                "y_test": "user_provided_test_labels"
            }
        }
    }
}
{
    "function_id": "ai_research-8",
    "task": "Run sentiment analysis on social media posts related to AI technologies.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Run sentiment analysis on social media posts related to AI technologies."
    },
    "snippet": "def run_sentiment_analysis_on_AI_related_posts(\n    posts: List[str]\n) -> List[Dict[str, Union[str, float]]]:\n    \"\"\"\n    Runs sentiment analysis on social media posts related to AI technologies.\n\n    Parameters:\n        posts (List[str]): A list of social media posts related to AI technologies.\n\n    Returns:\n        List[Dict[str, Union[str,float]]]: A list of dictionaries with each dictionary containing the original post and\n                                            the sentiment score. Each dictionary has 'post' and 'sentiment_score' keys.\n                                            'post' is the original text of the post and 'sentiment_score' is the \n                                            sentiment score of the post.\n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def run_sentiment_analysis_on_AI_related_posts(\n    posts: List[str]\n) -> List[Dict[str, Union[str, float]]]:\n    \"\"\"\n    Runs sentiment analysis on social media posts related to AI technologies.\n\n    Parameters:\n        posts (List[str]): A list of social media posts related to AI technologies.\n\n    Returns:\n        List[Dict[str, Union[str,float]]]: A list of dictionaries with each dictionary containing the original post and\n                                            the sentiment score. Each dictionary has 'post' and 'sentiment_score' keys.\n                                            'post' is the original text of the post and 'sentiment_score' is the \n                                            sentiment score of the post.\n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "run_sentiment_analysis_on_AI_related_posts",
            "description": "Runs sentiment analysis on social media posts related to AI technologies.",
            "parameters": {
                "type": "object",
                "properties": {
                    "posts": {
                        "type": "array",
                        "description": "A list of social media posts related to AI technologies.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "posts"
                ]
            },
            "returns": {
                "type": "array",
                "description": "A list of dictionaries with each dictionary containing the original post and the sentiment score.",
                "items": {
                    "type": "object",
                    "properties": {
                        "post": {
                            "type": "string",
                            "description": "The original text of the post."
                        },
                        "sentiment_score": {
                            "type": "float",
                            "description": "The sentiment score of the post."
                        }
                    },
                    "required": [
                        "post",
                        "sentiment_score"
                    ]
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'run_sentiment_analysis_on_AI_related_posts', 'description': 'Runs sentiment analysis on social media posts related to AI technologies.', 'parameters': {'type': 'object', 'properties': {'posts': {'type': 'array', 'description': 'A list of social media posts related to AI technologies.', 'items': {'type': 'string'}}}, 'required': ['posts']}, 'returns': {'type': 'array', 'description': 'A list of dictionaries with each dictionary containing the original post and the sentiment score.', 'items': {'type': 'object', 'properties': {'post': {'type': 'string', 'description': 'The original text of the post.'}, 'sentiment_score': {'type': 'float', 'description': 'The sentiment score of the post.'}}, 'required': ['post', 'sentiment_score']}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, could you analyze the sentiment of my posts about AI technologies?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Can you provide me with the posts you want to analyse?"
            },
            {
                "role": "user",
                "text": "Yes, here are the posts: ['I love how AI is advancing in recent years','The new AI technology is a bit concerning in my opinion', 'I think AI technologies have a lot of potential']"
            },
            {
                "role": "assistant",
                "text": "Great, I'm running the sentiment analysis on your posts now."
            }
        ],
        "function_call": {
            "function_name": "run_sentiment_analysis_on_AI_related_posts",
            "parameters": {
                "posts": [
                    "I love how AI is advancing in recent years",
                    "The new AI technology is a bit concerning in my opinion",
                    "I think AI technologies have a lot of potential"
                ]
            }
        }
    }
}
{
    "function_id": "ai_research-9",
    "task": "Automatically update a personal website or blog with new publications.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Automatically update a personal website or blog with new publications."
    },
    "snippet": "def update_website_with_new_publications(\n    blog_url: str,\n    publications: List[Dict[str, Union[str, datetime.date]]],\n) -> None:\n    \"\"\"\n    Automatically updates a personal website or blog with new publications.\n    \n    Parameters:\n        blog_url (str): The website or blog's URL to which the publications are uploaded.\n        publications (List[Dict[str, Union[str, datetime.date]]]): A list of dictionaries with the publication details. \n                                                                   Each dictionary should have 'title', 'publication_date' and \n                                                                   'url' keys.\n                                                                   \n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def update_website_with_new_publications(\n    blog_url: str,\n    publications: List[Dict[str, Union[str, datetime.date]]],\n) -> None:\n    \"\"\"\n    Automatically updates a personal website or blog with new publications.\n    \n    Parameters:\n        blog_url (str): The website or blog's URL to which the publications are uploaded.\n        publications (List[Dict[str, Union[str, datetime.date]]]): A list of dictionaries with the publication details. \n                                                                   Each dictionary should have 'title', 'publication_date' and \n                                                                   'url' keys.\n                                                                   \n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "update_website_with_new_publications",
            "description": "Automatically updates a personal website or blog with new publications.",
            "parameters": {
                "type": "object",
                "properties": {
                    "blog_url": {
                        "type": "string",
                        "description": "The website or blog's URL to which the publications are uploaded."
                    },
                    "publications": {
                        "type": "array",
                        "description": "A list of dictionaries with the publication details. Each dictionary should have 'title', 'publication_date' and 'url' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "title": {
                                    "type": "string"
                                },
                                "publication_date": {
                                    "type": "string",
                                    "description": "Publication date in YYYY-MM-DD format."
                                },
                                "url": {
                                    "type": "string",
                                    "description": "URL of the publication."
                                }
                            },
                            "required": [
                                "title",
                                "publication_date",
                                "url"
                            ]
                        }
                    }
                },
                "required": [
                    "blog_url",
                    "publications"
                ]
            },
            "returns": {
                "type": "null"
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'update_website_with_new_publications', 'description': 'Automatically updates a personal website or blog with new publications.', 'parameters': {'type': 'object', 'properties': {'blog_url': {'type': 'string', 'description': \"The website or blog's URL to which the publications are uploaded.\"}, 'publications': {'type': 'array', 'description': \"A list of dictionaries with the publication details. Each dictionary should have 'title', 'publication_date' and 'url' keys.\", 'items': {'type': 'object', 'properties': {'title': {'type': 'string'}, 'publication_date': {'type': 'string', 'description': 'Publication date in YYYY-MM-DD format.'}, 'url': {'type': 'string', 'description': 'URL of the publication.'}}, 'required': ['title', 'publication_date', 'url']}}}, 'required': ['blog_url', 'publications']}, 'returns': {'type': 'null'}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hi, Can you update my blog with some new publications I made?"
            },
            {
                "role": "assistant",
                "text": "Absolutely, I can help with that. Can you provide me with the URL of your blog?"
            },
            {
                "role": "user",
                "text": "The URL is 'www.myblog.com'."
            },
            {
                "role": "assistant",
                "text": "Great, now, could you provide me with the details of the publications like the title, the publication date, and the URL?"
            },
            {
                "role": "user",
                "text": "Sure. The first publication is titled 'Artificial Intelligence in the 21st Century' with the URL 'www.publication1.com' and it was published on '2022-10-12'. The second publication is titled 'Revolution of Robotics' with URL 'www.publication2.com' and it was published on '2022-12-24'."
            },
            {
                "role": "assistant",
                "text": "Awesome! I have all the details. Now, let me update your blog with these new publications."
            }
        ],
        "function_call": {
            "function_name": "update_website_with_new_publications",
            "parameters": {
                "blog_url": "www.myblog.com",
                "publications": [
                    {
                        "title": "Artificial Intelligence in the 21st Century",
                        "publication_date": "2022-10-12",
                        "url": "www.publication1.com"
                    },
                    {
                        "title": "Revolution of Robotics",
                        "publication_date": "2022-12-24",
                        "url": "www.publication2.com"
                    }
                ]
            }
        }
    }
}
{
    "function_id": "ai_research-11",
    "task": "Retrieve real-time analytics or citations for published works.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Retrieve real-time analytics or citations for published works."
    },
    "snippet": "def retrieve_analytics(\n    works: List[str],\n    source: str = 'google_scholar'\n) -> Dict[str, Dict[str, Union[int, float]]]:\n    \"\"\"\n    Retrieves real-time analytics or citations for a list of published works.\n    \n    Parameters:\n        works (List[str]): A list of titles or DOIs of the published works.\n        source (str): The data source to use for retrieving the analytics. By default, this is 'google_scholar'.\n                      Other potential sources may include 'pubmed', 'arxiv', etc.\n    Returns:\n        Dict[str, Dict[str, Union[int, float]]]: A dictionary where each key is a title or DOI of a published work,\n                                                  and each value is another dictionary containing the analytics or citations\n                                                  for that work. The inner dictionary should contain keys like 'views', 'citations',\n                                                  'downloads', etc., and their corresponding values.\n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def retrieve_analytics(\n    works: List[str],\n    source: str = 'google_scholar'\n) -> Dict[str, Dict[str, Union[int, float]]]:\n    \"\"\"\n    Retrieves real-time analytics or citations for a list of published works.\n    \n    Parameters:\n        works (List[str]): A list of titles or DOIs of the published works.\n        source (str): The data source to use for retrieving the analytics. By default, this is 'google_scholar'.\n                      Other potential sources may include 'pubmed', 'arxiv', etc.\n    Returns:\n        Dict[str, Dict[str, Union[int, float]]]: A dictionary where each key is a title or DOI of a published work,\n                                                  and each value is another dictionary containing the analytics or citations\n                                                  for that work. The inner dictionary should contain keys like 'views', 'citations',\n                                                  'downloads', etc., and their corresponding values.\n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "retrieve_analytics",
            "description": "Retrieves real-time analytics or citations for a list of published works.",
            "parameters": {
                "type": "object",
                "properties": {
                    "works": {
                        "type": "array",
                        "description": "A list of titles or DOIs of the published works.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "source": {
                        "type": "string",
                        "description": "The data source to use for retrieving the analytics. By default, this is 'google_scholar'. Other potential sources may include 'pubmed', 'arxiv', etc."
                    }
                },
                "required": [
                    "works"
                ]
            },
            "returns": {
                "type": "object",
                "description": "A dictionary where each key is a title or DOI of a published work and each value is another dictionary containing the analytics or citations for that work. The inner dictionary should contain keys like 'views', 'citations', 'downloads', etc., and their corresponding values.",
                "properties": {
                    "work": {
                        "type": "string",
                        "description": "The title or DOI of a published work."
                    },
                    "citations": {
                        "type": "object",
                        "description": "A dictionary containing the analytics or citations for the work.",
                        "properties": {
                            "views": {
                                "type": "integer"
                            },
                            "citations": {
                                "type": "integer"
                            },
                            "downloads": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "views",
                            "citations",
                            "downloads"
                        ]
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'retrieve_analytics', 'description': 'Retrieves real-time analytics or citations for a list of published works.', 'parameters': {'type': 'object', 'properties': {'works': {'type': 'array', 'description': 'A list of titles or DOIs of the published works.', 'items': {'type': 'string'}}, 'source': {'type': 'string', 'description': \"The data source to use for retrieving the analytics. By default, this is 'google_scholar'. Other potential sources may include 'pubmed', 'arxiv', etc.\"}}, 'required': ['works']}, 'returns': {'type': 'object', 'description': \"A dictionary where each key is a title or DOI of a published work and each value is another dictionary containing the analytics or citations for that work. The inner dictionary should contain keys like 'views', 'citations', 'downloads', etc., and their corresponding values.\", 'properties': {'work': {'type': 'string', 'description': 'The title or DOI of a published work.'}, 'citations': {'type': 'object', 'description': 'A dictionary containing the analytics or citations for the work.', 'properties': {'views': {'type': 'integer'}, 'citations': {'type': 'integer'}, 'downloads': {'type': 'integer'}}, 'required': ['views', 'citations', 'downloads']}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you fetch the analytics for some of my published works?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Can you provide me with the titles or DOIs of those works?"
            },
            {
                "role": "user",
                "text": "Yes, here they are: 'Understanding Quantum Physics', '10.1021/acsnano.9b08909', and 'Machine Vision for Robots'."
            },
            {
                "role": "assistant",
                "text": "Great, do you have a preferred source for retrieving the analytics or should I use the default 'google_scholar'?"
            },
            {
                "role": "user",
                "text": "Use 'google_scholar', please."
            },
            {
                "role": "assistant",
                "text": "Perfect, I'm retrieving the analytics for your given works now."
            }
        ],
        "function_call": {
            "function_name": "retrieve_analytics",
            "parameters": {
                "works": [
                    "Understanding Quantum Physics",
                    "10.1021/acsnano.9b08909",
                    "Machine Vision for Robots"
                ],
                "source": "google_scholar"
            }
        }
    }
}
{
    "function_id": "ai_research-12",
    "task": "Run automated code tests and validations for published algorithms.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Run automated code tests and validations for published algorithms."
    },
    "snippet": "def run_tests_and_validations(\n    algorithm_identifier: str,\n    test_data: Dict[str, Any]\n) -> Dict[str, Any]:\n    \"\"\"\n    Runs automated code tests and validations for published algorithms.\n\n    Parameters:\n        algorithm_identifier (str): The identifier of the algorithm to be tested and validated.\n        test_data (Dict[str, Any]): A dictionary containing test data to be used for testing the algorithm.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing results of the tests and validations.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def run_tests_and_validations(\n    algorithm_identifier: str,\n    test_data: Dict[str, Any]\n) -> Dict[str, Any]:\n    \"\"\"\n    Runs automated code tests and validations for published algorithms.\n\n    Parameters:\n        algorithm_identifier (str): The identifier of the algorithm to be tested and validated.\n        test_data (Dict[str, Any]): A dictionary containing test data to be used for testing the algorithm.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing results of the tests and validations.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "run_tests_and_validations",
            "description": "Runs automated code tests and validations for published algorithms.",
            "parameters": {
                "type": "object",
                "properties": {
                    "algorithm_identifier": {
                        "type": "string",
                        "description": "The identifier of the algorithm to be tested and validated."
                    },
                    "test_data": {
                        "type": "object",
                        "description": "A dictionary containing test data to be used for testing the algorithm."
                    }
                },
                "required": [
                    "algorithm_identifier",
                    "test_data"
                ]
            },
            "returns": {
                "type": "object",
                "description": "A dictionary containing results of the tests and validations."
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'run_tests_and_validations', 'description': 'Runs automated code tests and validations for published algorithms.', 'parameters': {'type': 'object', 'properties': {'algorithm_identifier': {'type': 'string', 'description': 'The identifier of the algorithm to be tested and validated.'}, 'test_data': {'type': 'object', 'description': 'A dictionary containing test data to be used for testing the algorithm.'}}, 'required': ['algorithm_identifier', 'test_data']}, 'returns': {'type': 'object', 'description': 'A dictionary containing results of the tests and validations.'}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you run tests and validations for my published algorithm?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. May I know your Algorithm Identifier and the test data?"
            },
            {
                "role": "user",
                "text": "Yes, my Algorithm Identifier is 'algo1234'. The test data is {'input1': 'data1', 'input2': 'data2'}."
            },
            {
                "role": "assistant",
                "text": "Great, I'm running the tests and validations for your algorithm now."
            }
        ],
        "function_call": {
            "function_name": "run_tests_and_validations",
            "parameters": {
                "algorithm_identifier": "algo1234",
                "test_data": {
                    "input1": "data1",
                    "input2": "data2"
                }
            }
        }
    }
}
{
    "function_id": "ai_research-14",
    "task": "Convert experimental results into formats suitable for academic publishing.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Convert experimental results into formats suitable for academic publishing."
    },
    "snippet": "def format_results_for_publishing(\n    data: pd.DataFrame,\n    file_format: str,\n    include_index: bool\n) -> str:\n    \"\"\"\n    Converts experimental results stored in a DataFrame into given format for academic publishing. \n\n    Parameters:\n        data (pd.DataFrame): DataFrame that contains the experimental results.\n        file_format (str): The format to convert the experimental results into.\n        include_index (bool): Boolean value to decide whether to include index (row labels) in the output file or not.\n\n    Returns:\n        str: A string representation of the experimental results in the desired format.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def format_results_for_publishing(\n    data: pd.DataFrame,\n    file_format: str,\n    include_index: bool\n) -> str:\n    \"\"\"\n    Converts experimental results stored in a DataFrame into given format for academic publishing. \n\n    Parameters:\n        data (pd.DataFrame): DataFrame that contains the experimental results.\n        file_format (str): The format to convert the experimental results into.\n        include_index (bool): Boolean value to decide whether to include index (row labels) in the output file or not.\n\n    Returns:\n        str: A string representation of the experimental results in the desired format.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "format_results_for_publishing",
            "description": "Converts experimental results stored in a DataFrame into given format for academic publishing.",
            "parameters": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "pd.DataFrame",
                        "description": "DataFrame that contains the experimental results."
                    },
                    "file_format": {
                        "type": "string",
                        "description": "The format to convert the experimental results into."
                    },
                    "include_index": {
                        "type": "boolean",
                        "description": "Boolean value to decide whether to include index (row labels) in the output file or not."
                    }
                },
                "required": [
                    "data",
                    "file_format",
                    "include_index"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "str": {
                        "type": "string",
                        "description": "A string representation of the experimental results in the desired format."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'format_results_for_publishing', 'description': 'Converts experimental results stored in a DataFrame into given format for academic publishing.', 'parameters': {'type': 'object', 'properties': {'data': {'type': 'pd.DataFrame', 'description': 'DataFrame that contains the experimental results.'}, 'file_format': {'type': 'string', 'description': 'The format to convert the experimental results into.'}, 'include_index': {'type': 'boolean', 'description': 'Boolean value to decide whether to include index (row labels) in the output file or not.'}}, 'required': ['data', 'file_format', 'include_index']}, 'returns': {'type': 'object', 'properties': {'str': {'type': 'string', 'description': 'A string representation of the experimental results in the desired format.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you convert my experimental results into a format suitable for academic publishing?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Can you please provide me with the DataFrame containing your experimental results and the format you want them to be converted into?"
            },
            {
                "role": "user",
                "text": "Yes, here is my DataFrame and I would like the format to be 'CSV'."
            },
            {
                "role": "assistant",
                "text": "Alright, do you want to include the index (row labels) in the output file or not?"
            },
            {
                "role": "user",
                "text": "Yes, please include the index in the output file."
            },
            {
                "role": "assistant",
                "text": "Great, I'm converting your experimental results into CSV format now."
            }
        ],
        "function_call": {
            "function_name": "format_results_for_publishing",
            "parameters": {
                "data": "<User_DataFrame>",
                "file_format": "CSV",
                "include_index": true
            }
        }
    }
}
{
    "function_id": "ai_research-15",
    "task": "Scrape online job boards for research positions or grants in the field of AI.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Scrape online job boards for research positions or grants in the field of AI."
    },
    "snippet": "def scrape_job_boards(\n    field: str,\n    job_types: List[str],\n) -> List[Dict[str, str]]:\n    \"\"\"\n    Scrape online job boards for specific position types in a given field.\n    \n    Parameters:\n        field (str): The field of study or work.\n        job_types (List[str]): A list of job or grant types to search for.\n\n    Returns:\n        List[Dict[str, str]]: A list of dictionaries. Each dictionary represents a job/grant and should contain keys like 'title', 'company', 'location', 'url', etc.\n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def scrape_job_boards(\n    field: str,\n    job_types: List[str],\n) -> List[Dict[str, str]]:\n    \"\"\"\n    Scrape online job boards for specific position types in a given field.\n    \n    Parameters:\n        field (str): The field of study or work.\n        job_types (List[str]): A list of job or grant types to search for.\n\n    Returns:\n        List[Dict[str, str]]: A list of dictionaries. Each dictionary represents a job/grant and should contain keys like 'title', 'company', 'location', 'url', etc.\n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "scrape_job_boards",
            "description": "Scrape online job boards for specific position types in a given field.",
            "parameters": {
                "type": "object",
                "properties": {
                    "field": {
                        "type": "string",
                        "description": "The field of study or work."
                    },
                    "job_types": {
                        "type": "array",
                        "description": "A list of job or grant types to search for.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "field",
                    "job_types"
                ]
            },
            "returns": {
                "type": "array",
                "description": "A list of dictionaries. Each dictionary represents a job/grant and should contain keys like 'title', 'company', 'location', 'url', etc.",
                "items": {
                    "type": "object",
                    "properties": {
                        "title": {
                            "type": "string"
                        },
                        "company": {
                            "type": "string"
                        },
                        "location": {
                            "type": "string"
                        },
                        "url": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "title",
                        "company",
                        "location",
                        "url"
                    ]
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'scrape_job_boards', 'description': 'Scrape online job boards for specific position types in a given field.', 'parameters': {'type': 'object', 'properties': {'field': {'type': 'string', 'description': 'The field of study or work.'}, 'job_types': {'type': 'array', 'description': 'A list of job or grant types to search for.', 'items': {'type': 'string'}}}, 'required': ['field', 'job_types']}, 'returns': {'type': 'array', 'description': \"A list of dictionaries. Each dictionary represents a job/grant and should contain keys like 'title', 'company', 'location', 'url', etc.\", 'items': {'type': 'object', 'properties': {'title': {'type': 'string'}, 'company': {'type': 'string'}, 'location': {'type': 'string'}, 'url': {'type': 'string'}}, 'required': ['title', 'company', 'location', 'url']}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you help me search job boards for programming jobs in the software engineering field?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. What kind of job types are you interested in? You can list several if you want."
            },
            {
                "role": "user",
                "text": "I'm interested in full time, part time, and internship job types."
            },
            {
                "role": "assistant",
                "text": "Alright, I'm now starting to scrape job boards for full time, part time, and internship positions in the field of software engineering."
            }
        ],
        "function_call": {
            "function_name": "scrape_job_boards",
            "parameters": {
                "field": "software engineering",
                "job_types": [
                    "full time",
                    "part time",
                    "internship"
                ]
            }
        }
    }
}
{
    "function_id": "ai_research-16",
    "task": "Automatically follow and collect posts from AI influencers or research leaders on social media platforms.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Automatically follow and collect posts from AI influencers or research leaders on social media platforms."
    },
    "snippet": "def follow_and_collect_posts(\n    api_key: str,\n    influencers: List[str]\n) -> List[Dict[str, str]]:\n    \"\"\"\n    Follows AI influencers or research leaders on social media platforms and collects their posts.\n    \n    Parameters:\n        api_key (str): The API key required to access the social media platform's API.\n        influencers (List[str]): A list of usernames/identifiers for the influencers/research leaders to follow.\n        \n    Returns:\n        List[Dict[str, str]]: A list of dictionaries containing post details. Each dictionary could include details like 'author', 'content', 'post_time', etc.\n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def follow_and_collect_posts(\n    api_key: str,\n    influencers: List[str]\n) -> List[Dict[str, str]]:\n    \"\"\"\n    Follows AI influencers or research leaders on social media platforms and collects their posts.\n    \n    Parameters:\n        api_key (str): The API key required to access the social media platform's API.\n        influencers (List[str]): A list of usernames/identifiers for the influencers/research leaders to follow.\n        \n    Returns:\n        List[Dict[str, str]]: A list of dictionaries containing post details. Each dictionary could include details like 'author', 'content', 'post_time', etc.\n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "follow_and_collect_posts",
            "description": "Follows AI influencers or research leaders on social media platforms and collects their posts.",
            "parameters": {
                "type": "object",
                "properties": {
                    "api_key": {
                        "type": "string",
                        "description": "The API key required to access the social media platform's API."
                    },
                    "influencers": {
                        "type": "array",
                        "description": "A list of usernames/identifiers for the influencers/research leaders to follow.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "api_key",
                    "influencers"
                ]
            },
            "returns": {
                "type": "array",
                "description": "A list of dictionaries containing post details. Each dictionary could include details like 'author', 'content', 'post_time', etc.",
                "items": {
                    "type": "object",
                    "properties": {
                        "author": {
                            "type": "string"
                        },
                        "content": {
                            "type": "string"
                        },
                        "post_time": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'follow_and_collect_posts', 'description': 'Follows AI influencers or research leaders on social media platforms and collects their posts.', 'parameters': {'type': 'object', 'properties': {'api_key': {'type': 'string', 'description': \"The API key required to access the social media platform's API.\"}, 'influencers': {'type': 'array', 'description': 'A list of usernames/identifiers for the influencers/research leaders to follow.', 'items': {'type': 'string'}}}, 'required': ['api_key', 'influencers']}, 'returns': {'type': 'array', 'description': \"A list of dictionaries containing post details. Each dictionary could include details like 'author', 'content', 'post_time', etc.\", 'items': {'type': 'object', 'properties': {'author': {'type': 'string'}, 'content': {'type': 'string'}, 'post_time': {'type': 'string'}}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": "{\n    \"conversation\": \n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, I would like to follow AI influencers on Twitter and collect their posts.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I have the API key to access the Twitter API?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my API key is 'abc123'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, and could you please provide me with the list of AI influencers you want to follow?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Sure, here it is: ['elonmusk', 'OpenAI', 'Demis Hassabis']\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Alright, I'm going to follow these influencers now and start collecting their posts.\"\n    }\n]\n,\n    \"function_call\": \n{\n    \"function_name\": \"follow_and_collect_posts\",\n    \"parameters\": {\n        \"api_key\": \"abc123\",\n        \"influencers\": ['elonmusk', 'OpenAI', 'Demis Hassabis']\n    }\n}\n\n}"
}
{
    "function_id": "ai_research-17",
    "task": "Generate automated summaries of trending AI research topics.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Generate automated summaries of trending AI research topics."
    },
    "snippet": "def generate_summaries(\n    trending_topics: List[str],\n    num_summaries: int,\n) -> Dict[str, str]:\n    \"\"\"\n    Generate automated summaries of trending AI research topics.\n\n    Parameters:\n        trending_topics (List[str]): A list of trending AI research topics.\n        num_summaries (int): The number of summaries to generate.\n\n    Returns:\n        Dict[str, str]: A dictionary with each topic as a key and its generated summary as a value.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def generate_summaries(\n    trending_topics: List[str],\n    num_summaries: int,\n) -> Dict[str, str]:\n    \"\"\"\n    Generate automated summaries of trending AI research topics.\n\n    Parameters:\n        trending_topics (List[str]): A list of trending AI research topics.\n        num_summaries (int): The number of summaries to generate.\n\n    Returns:\n        Dict[str, str]: A dictionary with each topic as a key and its generated summary as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "generate_summaries",
            "description": "Generate automated summaries of trending AI research topics.",
            "parameters": {
                "type": "object",
                "properties": {
                    "trending_topics": {
                        "type": "array",
                        "description": "A list of trending AI research topics.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "num_summaries": {
                        "type": "integer",
                        "description": "The number of summaries to generate."
                    }
                },
                "required": [
                    "trending_topics",
                    "num_summaries"
                ]
            },
            "returns": {
                "type": "object",
                "description": "A dictionary with each topic as a key and its generated summary as a value.",
                "properties": {
                    "type": "string"
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'generate_summaries', 'description': 'Generate automated summaries of trending AI research topics.', 'parameters': {'type': 'object', 'properties': {'trending_topics': {'type': 'array', 'description': 'A list of trending AI research topics.', 'items': {'type': 'string'}}, 'num_summaries': {'type': 'integer', 'description': 'The number of summaries to generate.'}}, 'required': ['trending_topics', 'num_summaries']}, 'returns': {'type': 'object', 'description': 'A dictionary with each topic as a key and its generated summary as a value.', 'properties': {'type': 'string'}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, could you generate summaries for some trending AI research topics?"
            },
            {
                "role": "assistant",
                "text": "Of course, I'd be happy to. Could you tell me how many summaries you want me to generate?"
            },
            {
                "role": "user",
                "text": "Could you provide summaries for 5 topics?"
            },
            {
                "role": "assistant",
                "text": "Sure, I'm generating summaries for these topics now."
            }
        ],
        "function_call": {
            "function_name": "generate_summaries",
            "parameters": {
                "trending_topics": [
                    "topic1",
                    "topic2",
                    "topic3",
                    "topic4",
                    "topic5"
                ],
                "num_summaries": 5
            }
        }
    }
}
{
    "function_id": "ai_research-20",
    "task": "Create visual representations of data sets or algorithms for presentations.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Create visual representations of data sets or algorithms for presentations."
    },
    "snippet": "def create_visual_representation(\n    data_set: Union[Dict, pd.DataFrame], \n    algorithm: str, \n    presentation_template: str  \n) -> NoReturn:\n    \"\"\"\n    Creates visual representations of given data sets or algorithms for presentations.\n    \n    Parameters:\n        data_set (Union[Dict, pd.DataFrame]): The data set to visualize.\n        algorithm (str): The algorithm to visualize.\n        presentation_template (str): The template to use for the presentation.\n        \n    Note: No actual return from function, it will save the visualization to a given location.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def create_visual_representation(\n    data_set: Union[Dict, pd.DataFrame], \n    algorithm: str, \n    presentation_template: str  \n) -> NoReturn:\n    \"\"\"\n    Creates visual representations of given data sets or algorithms for presentations.\n    \n    Parameters:\n        data_set (Union[Dict, pd.DataFrame]): The data set to visualize.\n        algorithm (str): The algorithm to visualize.\n        presentation_template (str): The template to use for the presentation.\n        \n    Note: No actual return from function, it will save the visualization to a given location.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "create_visual_representation",
            "description": "Creates visual representations of given data sets or algorithms for presentations.",
            "parameters": {
                "type": "object",
                "properties": {
                    "data_set": {
                        "type": "Union[Dict, pd.DataFrame]",
                        "description": "The data set to visualize."
                    },
                    "algorithm": {
                        "type": "string",
                        "description": "The algorithm to visualize."
                    },
                    "presentation_template": {
                        "type": "string",
                        "description": "The template to use for the presentation."
                    }
                },
                "required": [
                    "data_set",
                    "algorithm",
                    "presentation_template"
                ]
            },
            "returns": {
                "type": "NoReturn",
                "description": "No actual return from function, it will save the visualization to a given location."
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'create_visual_representation', 'description': 'Creates visual representations of given data sets or algorithms for presentations.', 'parameters': {'type': 'object', 'properties': {'data_set': {'type': 'Union[Dict, pd.DataFrame]', 'description': 'The data set to visualize.'}, 'algorithm': {'type': 'string', 'description': 'The algorithm to visualize.'}, 'presentation_template': {'type': 'string', 'description': 'The template to use for the presentation.'}}, 'required': ['data_set', 'algorithm', 'presentation_template']}, 'returns': {'type': 'NoReturn', 'description': 'No actual return from function, it will save the visualization to a given location.'}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hello, can you help me visualize my data and the corresponding algorithm for my presentation?"
            },
            {
                "role": "assistant",
                "text": "Of course, I'd be glad provide assistance. Could I get the specifics of your data set and the particular algorithm you'd like to visualize? Also, please specify the template you wish to use for this presentation."
            },
            {
                "role": "user",
                "text": "Sure, my data is in a DataFrame format and the algorithm is 'Linear Regression'. The presentation template I'd like to use is 'Minimalist'."
            },
            {
                "role": "assistant",
                "text": "Alright, I'm creating a visual representation of your 'Linear Regression' algorithm, using the specified 'Minimalist' template based on your data set."
            }
        ],
        "function_call": {
            "function_name": "create_visual_representation",
            "parameters": {
                "data_set": "DataFrame",
                "algorithm": "Linear Regression",
                "presentation_template": "Minimalist"
            }
        }
    }
}
{
    "function_id": "ai_research-21",
    "task": "Generate and distribute a monthly newsletter on AI research findings.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Generate and distribute a monthly newsletter on AI research findings."
    },
    "snippet": "def distribute_monthly_newsletter(\n    newsletter_content: str,\n    recipient_list: List[str],\n) -> str:\n    \"\"\"\n    Generates and distributes a monthly newsletter on AI research findings to a list of recipients.\n\n    Parameters:\n        newsletter_content (str): The content of the newsletter.\n        recipient_list (List[str]): A list of emails representing the recipients.\n\n    Returns:\n        str: Status message indicating successfully sending the newsletter or failure notice.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def distribute_monthly_newsletter(\n    newsletter_content: str,\n    recipient_list: List[str],\n) -> str:\n    \"\"\"\n    Generates and distributes a monthly newsletter on AI research findings to a list of recipients.\n\n    Parameters:\n        newsletter_content (str): The content of the newsletter.\n        recipient_list (List[str]): A list of emails representing the recipients.\n\n    Returns:\n        str: Status message indicating successfully sending the newsletter or failure notice.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "distribute_monthly_newsletter",
            "description": "Generates and distributes a monthly newsletter on AI research findings to a list of recipients.",
            "parameters": {
                "type": "object",
                "properties": {
                    "newsletter_content": {
                        "type": "string",
                        "description": "The content of the newsletter."
                    },
                    "recipient_list": {
                        "type": "array",
                        "description": "A list of emails representing the recipients.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "newsletter_content",
                    "recipient_list"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "status_message": {
                        "type": "string",
                        "description": "Status message indicating successfully sending the newsletter or failure notice."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'distribute_monthly_newsletter', 'description': 'Generates and distributes a monthly newsletter on AI research findings to a list of recipients.', 'parameters': {'type': 'object', 'properties': {'newsletter_content': {'type': 'string', 'description': 'The content of the newsletter.'}, 'recipient_list': {'type': 'array', 'description': 'A list of emails representing the recipients.', 'items': {'type': 'string'}}}, 'required': ['newsletter_content', 'recipient_list']}, 'returns': {'type': 'object', 'properties': {'status_message': {'type': 'string', 'description': 'Status message indicating successfully sending the newsletter or failure notice.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, could you distribute the monthly newsletter on AI research findings to my list of recipients?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. May I have the content of the newsletter and the list of recipients' emails?"
            },
            {
                "role": "user",
                "text": "Yes, the content is 'Latest AI research findings for March'. And the recipient list is ['john@gmail.com', 'emma@yahoo.com', 'tom@hotmail.com']."
            },
            {
                "role": "assistant",
                "text": "Great, I'm distributing your monthly newsletter now."
            }
        ],
        "function_call": {
            "function_name": "distribute_monthly_newsletter",
            "parameters": {
                "newsletter_content": "Latest AI research findings for March",
                "recipient_list": [
                    "john@gmail.com",
                    "emma@yahoo.com",
                    "tom@hotmail.com"
                ]
            }
        }
    }
}
