{
    "function_id": "freelance_coder-1",
    "task": "Send a project proposal to a potential client.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Send a project proposal to a potential client."
    },
    "snippet": "def send_project_proposal(\n    client_email: str,\n    project_proposal: str,\n    attachments: List[str],\n) -> bool:\n    \"\"\"\n    Sends a project proposal to a potential client and returns whether the email was sent successfully or not.\n\n    Parameters:\n        client_email (str): The email address of the client where the project proposal is to be sent.\n        project_proposal (str): The body of the project proposal.\n        attachments (List[str]): A list of file paths for the attachments that should be included with the proposal.\n\n    Returns:\n        bool: True if the email was sent successfully, False otherwise.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def send_project_proposal(\n    client_email: str,\n    project_proposal: str,\n    attachments: List[str],\n) -> bool:\n    \"\"\"\n    Sends a project proposal to a potential client and returns whether the email was sent successfully or not.\n\n    Parameters:\n        client_email (str): The email address of the client where the project proposal is to be sent.\n        project_proposal (str): The body of the project proposal.\n        attachments (List[str]): A list of file paths for the attachments that should be included with the proposal.\n\n    Returns:\n        bool: True if the email was sent successfully, False otherwise.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "send_project_proposal",
            "description": "Sends a project proposal to a potential client and returns whether the email was sent successfully or not.",
            "parameters": {
                "type": "object",
                "properties": {
                    "client_email": {
                        "type": "string",
                        "description": "The email address of the client where the project proposal is to be sent."
                    },
                    "project_proposal": {
                        "type": "string",
                        "description": "The body of the project proposal."
                    },
                    "attachments": {
                        "type": "array",
                        "description": "A list of file paths for the attachments that should be included with the proposal.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "client_email",
                    "project_proposal",
                    "attachments"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "email_status": {
                        "type": "boolean",
                        "description": "True if the email was sent successfully, False otherwise."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'send_project_proposal', 'description': 'Sends a project proposal to a potential client and returns whether the email was sent successfully or not.', 'parameters': {'type': 'object', 'properties': {'client_email': {'type': 'string', 'description': 'The email address of the client where the project proposal is to be sent.'}, 'project_proposal': {'type': 'string', 'description': 'The body of the project proposal.'}, 'attachments': {'type': 'array', 'description': 'A list of file paths for the attachments that should be included with the proposal.', 'items': {'type': 'string'}}}, 'required': ['client_email', 'project_proposal', 'attachments']}, 'returns': {'type': 'object', 'properties': {'email_status': {'type': 'boolean', 'description': 'True if the email was sent successfully, False otherwise.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you send a project proposal to my client?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. May I know your client's email address?"
            },
            {
                "role": "user",
                "text": "Yes, my client's email address is 'client@example.com'."
            },
            {
                "role": "assistant",
                "text": "Great, can you provide me with the body of the project proposal?"
            },
            {
                "role": "user",
                "text": "Yes, here is the proposal - 'Let's build the next big thing together.'"
            },
            {
                "role": "assistant",
                "text": "Understood. Are there any attachments that should be included with the proposal?"
            },
            {
                "role": "user",
                "text": "Yes, there are two files to include - filepath1 and filepath2."
            },
            {
                "role": "assistant",
                "text": "Great, I'm sending your proposal now."
            }
        ],
        "function_call": {
            "function_name": "send_project_proposal",
            "parameters": {
                "client_email": "client@example.com",
                "project_proposal": "Let's build the next big thing together.",
                "attachments": [
                    "filepath1",
                    "filepath2"
                ]
            }
        }
    }
}
{
    "function_id": "freelance_coder-6",
    "task": "Backup code and project files to a secure cloud storage.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Backup code and project files to a secure cloud storage."
    },
    "snippet": "```python\nimport os\nfrom typing import List\n\ndef backup_files_to_cloud(\n    files: List[str],\n    destination_folder: str,\n    cloud_storage_client\n) -> bool:\n    \"\"\"\n    Backs up code and project files to a secure cloud storage.\n\n    Parameters:\n        files (List[str]): A list containing the file paths to backup.\n        destination_folder (str): The folder in the cloud where the files will be backed up.\n        cloud_storage_client: The cloud storage client used to interface with the cloud storage.\n\n    Returns:\n        bool: Returns True if the backup was successful, False otherwise.\n    \"\"\"\n```\nPlease note that the actual implementation of the function depends on the cloud storage service that you're using (Google Cloud Storage, AWS S3, Azure Blob Storage, etc.) and their respective client libraries. Also, remember that the credentials to access the cloud storage should be securely stored and correctly configured.",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "```python\nimport os\nfrom typing import List\n\ndef backup_files_to_cloud(\n    files: List[str],\n    destination_folder: str,\n    cloud_storage_client\n) -> bool:\n    \"\"\"\n    Backs up code and project files to a secure cloud storage.\n\n    Parameters:\n        files (List[str]): A list containing the file paths to backup.\n        destination_folder (str): The folder in the cloud where the files will be backed up.\n        cloud_storage_client: The cloud storage client used to interface with the cloud storage.\n\n    Returns:\n        bool: Returns True if the backup was successful, False otherwise.\n    \"\"\"\n```\nPlease note that the actual implementation of the function depends on the cloud storage service that you're using (Google Cloud Storage, AWS S3, Azure Blob Storage, etc.) and their respective client libraries. Also, remember that the credentials to access the cloud storage should be securely stored and correctly configured.",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "backup_files_to_cloud",
            "description": "Backs up code and project files to a secure cloud storage.",
            "parameters": {
                "type": "object",
                "properties": {
                    "files": {
                        "type": "array",
                        "description": "A list containing the file paths to backup.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "destination_folder": {
                        "type": "string",
                        "description": "The folder in the cloud where the files will be backed up."
                    },
                    "cloud_storage_client": {
                        "description": "The cloud storage client used to interface with the cloud storage."
                    }
                },
                "required": [
                    "files",
                    "destination_folder",
                    "cloud_storage_client"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "backup_status": {
                        "type": "boolean",
                        "description": "Returns True if the backup was successful, False otherwise."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'backup_files_to_cloud', 'description': 'Backs up code and project files to a secure cloud storage.', 'parameters': {'type': 'object', 'properties': {'files': {'type': 'array', 'description': 'A list containing the file paths to backup.', 'items': {'type': 'string'}}, 'destination_folder': {'type': 'string', 'description': 'The folder in the cloud where the files will be backed up.'}, 'cloud_storage_client': {'description': 'The cloud storage client used to interface with the cloud storage.'}}, 'required': ['files', 'destination_folder', 'cloud_storage_client']}, 'returns': {'type': 'object', 'properties': {'backup_status': {'type': 'boolean', 'description': 'Returns True if the backup was successful, False otherwise.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you backup my project files to the cloud?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can help you with that. Could you please provide the file paths you want to backup?"
            },
            {
                "role": "user",
                "text": "Yes, the files are located at '/home/user/projectfiles' and '/home/user/database'."
            },
            {
                "role": "assistant",
                "text": "Okay, got it. Now, could you tell me where you want these files to be stored in the cloud?"
            },
            {
                "role": "user",
                "text": "Please store them in the 'projectbackup' folder."
            },
            {
                "role": "assistant",
                "text": "Great. Now, to establish a connection with the cloud, can I use your cloud storage client?"
            },
            {
                "role": "user",
                "text": "Yes, you can use my AWS client."
            },
            {
                "role": "assistant",
                "text": "Alright, I am backing up your files to the cloud now."
            }
        ],
        "function_call": {
            "function_name": "backup_files_to_cloud",
            "parameters": {
                "files": [
                    "/home/user/projectfiles",
                    "/home/user/database"
                ],
                "destination_folder": "projectbackup",
                "cloud_storage_client": "AWS client"
            }
        }
    }
}
{
    "function_id": "freelance_coder-8",
    "task": "Push updates to a repository on a version control system like Git.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Push updates to a repository on a version control system like Git."
    },
    "snippet": "def push_to_repository(\n    file_paths: List[str], \n    repository_url: str, \n    commit_message: str\n) -> None:\n    \"\"\"\n    Adds, commits, and pushes updates to a specified git repository.\n\n    Parameters:\n        file_paths (List[str]): The file paths that need to be updated in the repository.\n        repository_url (str): The URL of the git repository.\n        commit_message (str): The message to be included in the commit.\n\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def push_to_repository(\n    file_paths: List[str], \n    repository_url: str, \n    commit_message: str\n) -> None:\n    \"\"\"\n    Adds, commits, and pushes updates to a specified git repository.\n\n    Parameters:\n        file_paths (List[str]): The file paths that need to be updated in the repository.\n        repository_url (str): The URL of the git repository.\n        commit_message (str): The message to be included in the commit.\n\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "push_to_repository",
            "description": "Adds, commits, and pushes updates to a specified git repository.",
            "parameters": {
                "type": "object",
                "properties": {
                    "file_paths": {
                        "type": "array",
                        "description": "The file paths that need to be updated in the repository.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repository_url": {
                        "type": "string",
                        "description": "The URL of the git repository."
                    },
                    "commit_message": {
                        "type": "string",
                        "description": "The message to be included in the commit."
                    }
                },
                "required": [
                    "file_paths",
                    "repository_url",
                    "commit_message"
                ]
            },
            "returns": {
                "type": "null",
                "description": "Does not return any value."
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'push_to_repository', 'description': 'Adds, commits, and pushes updates to a specified git repository.', 'parameters': {'type': 'object', 'properties': {'file_paths': {'type': 'array', 'description': 'The file paths that need to be updated in the repository.', 'items': {'type': 'string'}}, 'repository_url': {'type': 'string', 'description': 'The URL of the git repository.'}, 'commit_message': {'type': 'string', 'description': 'The message to be included in the commit.'}}, 'required': ['file_paths', 'repository_url', 'commit_message']}, 'returns': {'type': 'null', 'description': 'Does not return any value.'}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you update my git repository with these changes?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Could you please provide me with the file paths that you'd like to update, the URL of your git repository, and a commit message?"
            },
            {
                "role": "user",
                "text": "Yes, the file_paths are 'src/main.py' and 'src/helper.py'. The repository URL is 'https://github.com/myprojects'. And the commit message is 'Updated main and helper file'."
            },
            {
                "role": "assistant",
                "text": "Great, I'm updating your repository now."
            }
        ],
        "function_call": {
            "function_name": "push_to_repository",
            "parameters": {
                "file_paths": [
                    "src/main.py",
                    "src/helper.py"
                ],
                "repository_url": "https://github.com/myprojects",
                "commit_message": "Updated main and helper file"
            }
        }
    }
}
{
    "function_id": "freelance_coder-11",
    "task": "Submit timesheets to clients for review or approval.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Submit timesheets to clients for review or approval."
    },
    "snippet": "def submit_timesheets_for_approval(\n    timesheets: List[Dict[str, Any]],\n    clients: List[str]\n) -> None:\n    \"\"\"\n    Submits timesheets to clients for review or approval.\n\n    Parameters:\n        timesheets (List[Dict[str, Any]]): A list of timesheets. Each timesheet is represented\n                                           as a dictionary containing relevant details.\n        clients (List[str]): A list of client ids to whom the timesheets need to be submitted.\n\n    Returns:\n        None\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def submit_timesheets_for_approval(\n    timesheets: List[Dict[str, Any]],\n    clients: List[str]\n) -> None:\n    \"\"\"\n    Submits timesheets to clients for review or approval.\n\n    Parameters:\n        timesheets (List[Dict[str, Any]]): A list of timesheets. Each timesheet is represented\n                                           as a dictionary containing relevant details.\n        clients (List[str]): A list of client ids to whom the timesheets need to be submitted.\n\n    Returns:\n        None\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "submit_timesheets_for_approval",
            "description": "Submits timesheets to clients for review or approval.",
            "parameters": {
                "type": "object",
                "properties": {
                    "timesheets": {
                        "type": "array",
                        "description": "A list of timesheets. Each timesheet is represented as a dictionary containing relevant details.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "Any Key": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "Any Key"
                            ]
                        }
                    },
                    "clients": {
                        "type": "array",
                        "description": "A list of client ids to whom the timesheets need to be submitted.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "timesheets",
                    "clients"
                ]
            },
            "returns": {
                "type": "null",
                "description": "This function does not return anything."
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'submit_timesheets_for_approval', 'description': 'Submits timesheets to clients for review or approval.', 'parameters': {'type': 'object', 'properties': {'timesheets': {'type': 'array', 'description': 'A list of timesheets. Each timesheet is represented as a dictionary containing relevant details.', 'items': {'type': 'object', 'properties': {'Any Key': {'type': 'string'}}, 'required': ['Any Key']}}, 'clients': {'type': 'array', 'description': 'A list of client ids to whom the timesheets need to be submitted.', 'items': {'type': 'string'}}}, 'required': ['timesheets', 'clients']}, 'returns': {'type': 'null', 'description': 'This function does not return anything.'}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, could you submit these timesheets for client approval?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Could you provide the timesheets and the client ids to whom the timesheets need to be submitted?"
            },
            {
                "role": "user",
                "text": "Sure, here are the timesheets and the client ids."
            },
            {
                "role": "assistant",
                "text": "Great, I'm submitting your timesheets for client approval now."
            }
        ],
        "function_call": {
            "function_name": "submit_timesheets_for_approval",
            "parameters": {
                "timesheets": [
                    {
                        "Key1": "Value1",
                        "Key2": "Value2"
                    }
                ],
                "clients": [
                    "123",
                    "456"
                ]
            }
        }
    }
}
{
    "function_id": "freelance_coder-13",
    "task": "Review and sign legal documents such as NDAs and contracts.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Review and sign legal documents such as NDAs and contracts."
    },
    "snippet": "def review_and_sign_documents(\n    legal_documents: List[Dict[str, str]],\n    signature: str\n) -> List[bool]:\n    \"\"\"\n    Reviews and signs legal documents such as NDAs and contracts.\n    Note: Actual implementation is only symbolic and does not produce legal binding results.\n\n    Parameters:\n        legal_documents (List[Dict[str, str]]): A list of dictionaries each representing \n                                                legal document. Each dictionary should have \n                                                'document_type' and 'content' keys.\n        signature (str): The signature to be applied on the documents.\n\n    Returns:\n        List[bool]: A list of boolean values indicating whether each document was reviewed and signed successfully.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def review_and_sign_documents(\n    legal_documents: List[Dict[str, str]],\n    signature: str\n) -> List[bool]:\n    \"\"\"\n    Reviews and signs legal documents such as NDAs and contracts.\n    Note: Actual implementation is only symbolic and does not produce legal binding results.\n\n    Parameters:\n        legal_documents (List[Dict[str, str]]): A list of dictionaries each representing \n                                                legal document. Each dictionary should have \n                                                'document_type' and 'content' keys.\n        signature (str): The signature to be applied on the documents.\n\n    Returns:\n        List[bool]: A list of boolean values indicating whether each document was reviewed and signed successfully.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "review_and_sign_documents",
            "description": "Reviews and signs legal documents such as NDAs and contracts. Note: Actual implementation is only symbolic and does not produce legal binding results.",
            "parameters": {
                "type": "object",
                "properties": {
                    "legal_documents": {
                        "type": "array",
                        "description": "A list of dictionaries each representing legal document. Each dictionary should have 'document_type' and 'content' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "document_type": {
                                    "type": "string"
                                },
                                "content": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "document_type",
                                "content"
                            ]
                        }
                    },
                    "signature": {
                        "type": "string",
                        "description": "The signature to be applied on the documents."
                    }
                },
                "required": [
                    "legal_documents",
                    "signature"
                ]
            },
            "returns": {
                "type": "array",
                "items": {
                    "type": "boolean",
                    "description": "A list of boolean values indicating whether each document was reviewed and signed successfully."
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'review_and_sign_documents', 'description': 'Reviews and signs legal documents such as NDAs and contracts. Note: Actual implementation is only symbolic and does not produce legal binding results.', 'parameters': {'type': 'object', 'properties': {'legal_documents': {'type': 'array', 'description': \"A list of dictionaries each representing legal document. Each dictionary should have 'document_type' and 'content' keys.\", 'items': {'type': 'object', 'properties': {'document_type': {'type': 'string'}, 'content': {'type': 'string'}}, 'required': ['document_type', 'content']}}, 'signature': {'type': 'string', 'description': 'The signature to be applied on the documents.'}}, 'required': ['legal_documents', 'signature']}, 'returns': {'type': 'array', 'items': {'type': 'boolean', 'description': 'A list of boolean values indicating whether each document was reviewed and signed successfully.'}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hi, I need to review and sign some legal documents."
            },
            {
                "role": "assistant",
                "text": "Sure, I can assist you with that. Please provide me the documents you want to review and sign."
            },
            {
                "role": "user",
                "text": "Alright, I have two documents. The first is an NDA agreement and the second one is a contract. I want to use my electronic signature 'JohnDoeSign' on these documents."
            },
            {
                "role": "assistant",
                "text": "I see. I'll now review and sign the provided documents with your signature."
            }
        ],
        "function_call": {
            "function_name": "review_and_sign_documents",
            "parameters": {
                "legal_documents": [
                    {
                        "document_type": "NDA Agreement",
                        "content": "Content of NDA goes here..."
                    },
                    {
                        "document_type": "Contract",
                        "content": "Content of Contract goes here..."
                    }
                ],
                "signature": "JohnDoeSign"
            }
        }
    }
}
{
    "function_id": "freelance_coder-14",
    "task": "Analyze project analytics for client reporting.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Analyze project analytics for client reporting."
    },
    "snippet": "def analyze_project_analytics(\n    project_data: Dict[str, Union[int, str, List[Dict[str, Any]]]],\n    client_id: str,\n) -> Dict[str, Any]:\n    \"\"\"\n    Analyzes project analytics for client reporting.\n    \n    Parameters:\n        project_data (Dict[str, Union[int, str, List[Dict[str, Any]]]]): The data related to the project.\n                                                                         The dictionary can contain project ID, \n                                                                         name, and a list of other project attributes.\n        client_id (str): The identifier of the client for whom the report is generated.\n                                          \n    Returns:\n        Dict[str, Any]: A dictionary containing the analyzed data related to the project.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def analyze_project_analytics(\n    project_data: Dict[str, Union[int, str, List[Dict[str, Any]]]],\n    client_id: str,\n) -> Dict[str, Any]:\n    \"\"\"\n    Analyzes project analytics for client reporting.\n    \n    Parameters:\n        project_data (Dict[str, Union[int, str, List[Dict[str, Any]]]]): The data related to the project.\n                                                                         The dictionary can contain project ID, \n                                                                         name, and a list of other project attributes.\n        client_id (str): The identifier of the client for whom the report is generated.\n                                          \n    Returns:\n        Dict[str, Any]: A dictionary containing the analyzed data related to the project.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "analyze_project_analytics",
            "description": "Analyzes project analytics for client reporting.",
            "parameters": {
                "type": "object",
                "properties": {
                    "project_data": {
                        "type": "dict",
                        "description": "The data related to the project. The dictionary can contain project ID, name, and a list of other project attributes."
                    },
                    "client_id": {
                        "type": "string",
                        "description": "The identifier of the client for whom the report is generated."
                    }
                },
                "required": [
                    "project_data",
                    "client_id"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "analyzed_data": {
                        "type": "dict",
                        "description": "A dictionary containing the analyzed data related to the project."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'analyze_project_analytics', 'description': 'Analyzes project analytics for client reporting.', 'parameters': {'type': 'object', 'properties': {'project_data': {'type': 'dict', 'description': 'The data related to the project. The dictionary can contain project ID, name, and a list of other project attributes.'}, 'client_id': {'type': 'string', 'description': 'The identifier of the client for whom the report is generated.'}}, 'required': ['project_data', 'client_id']}, 'returns': {'type': 'object', 'properties': {'analyzed_data': {'type': 'dict', 'description': 'A dictionary containing the analyzed data related to the project.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, Could you analyze the analytics from my project for reporting to my client?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that for you. Could you provide me details related to the project and the client's identifier?"
            },
            {
                "role": "user",
                "text": "Yes, I have the project data here which includes ID, name and some other attributes. The client identifier is '12345'."
            },
            {
                "role": "assistant",
                "text": "Thank you for providing the information. I'm now analyzing the project analytics for your client."
            }
        ],
        "function_call": {
            "function_name": "analyze_project_analytics",
            "parameters": {
                "project_data": {
                    "id": "p123",
                    "name": "my_project",
                    "attributes": [
                        "attribute1",
                        "attribute2",
                        "attribute3"
                    ]
                },
                "client_id": "12345"
            }
        }
    }
}
{
    "function_id": "freelance_coder-16",
    "task": "Manage subcontractors or collaborators, including payment and task allocation.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Manage subcontractors or collaborators, including payment and task allocation."
    },
    "snippet": "def manage_subcontractors(\n    subcontractors: List[Dict[str, Union[str, float, int]]],\n    tasks: List[Dict[str, Union[str, int]]]\n) -> Dict[str, Any]:\n    \"\"\"\n    Manages subcontractors or collaborators, including payment and task allocation.\n\n    Parameters:\n        subcontractors (List[Dict[str, Union[str, float, int]]]): A list of dictionaries containing subcontractor details.\n                                                             Each dictionary should have 'name', 'payment' and 'task_count' keys.\n        tasks (List[Dict[str, Union[str, int]]]): A list of dictionaries containing task details.\n                                                  Each dictionary should have 'task_id' and 'task_duration' keys.\n\n    Returns:\n        Dict[str, Any]: A dictionary with 'updated_subcontractors' and 'unallocated_tasks' as keys. \n                        'updated_subcontractors' is a updated list of subcontractors after allocating tasks.\n                        'unallocated_tasks' is a list of tasks that couldn't be allocated to any subcontractor.\n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def manage_subcontractors(\n    subcontractors: List[Dict[str, Union[str, float, int]]],\n    tasks: List[Dict[str, Union[str, int]]]\n) -> Dict[str, Any]:\n    \"\"\"\n    Manages subcontractors or collaborators, including payment and task allocation.\n\n    Parameters:\n        subcontractors (List[Dict[str, Union[str, float, int]]]): A list of dictionaries containing subcontractor details.\n                                                             Each dictionary should have 'name', 'payment' and 'task_count' keys.\n        tasks (List[Dict[str, Union[str, int]]]): A list of dictionaries containing task details.\n                                                  Each dictionary should have 'task_id' and 'task_duration' keys.\n\n    Returns:\n        Dict[str, Any]: A dictionary with 'updated_subcontractors' and 'unallocated_tasks' as keys. \n                        'updated_subcontractors' is a updated list of subcontractors after allocating tasks.\n                        'unallocated_tasks' is a list of tasks that couldn't be allocated to any subcontractor.\n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "manage_subcontractors",
            "description": "Manages subcontractors or collaborators, including payment and task allocation.",
            "parameters": {
                "type": "object",
                "properties": {
                    "subcontractors": {
                        "type": "array",
                        "description": "A list of dictionaries containing subcontractor details. Each dictionary should have 'name', 'payment' and 'task_count' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "payment": {
                                    "type": "float"
                                },
                                "task_count": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "name",
                                "payment",
                                "task_count"
                            ]
                        }
                    },
                    "tasks": {
                        "type": "array",
                        "description": "A list of dictionaries containing task details. Each dictionary should have 'task_id' and 'task_duration' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "task_id": {
                                    "type": "string"
                                },
                                "task_duration": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "task_id",
                                "task_duration"
                            ]
                        }
                    }
                },
                "required": [
                    "subcontractors",
                    "tasks"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "updated_subcontractors": {
                        "type": "array",
                        "description": "A updated list of subcontractors after allocating tasks."
                    },
                    "unallocated_tasks": {
                        "type": "array",
                        "description": "A list of tasks that couldn't be allocated to any subcontractor."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'manage_subcontractors', 'description': 'Manages subcontractors or collaborators, including payment and task allocation.', 'parameters': {'type': 'object', 'properties': {'subcontractors': {'type': 'array', 'description': \"A list of dictionaries containing subcontractor details. Each dictionary should have 'name', 'payment' and 'task_count' keys.\", 'items': {'type': 'object', 'properties': {'name': {'type': 'string'}, 'payment': {'type': 'float'}, 'task_count': {'type': 'integer'}}, 'required': ['name', 'payment', 'task_count']}}, 'tasks': {'type': 'array', 'description': \"A list of dictionaries containing task details. Each dictionary should have 'task_id' and 'task_duration' keys.\", 'items': {'type': 'object', 'properties': {'task_id': {'type': 'string'}, 'task_duration': {'type': 'integer'}}, 'required': ['task_id', 'task_duration']}}}, 'required': ['subcontractors', 'tasks']}, 'returns': {'type': 'object', 'properties': {'updated_subcontractors': {'type': 'array', 'description': 'A updated list of subcontractors after allocating tasks.'}, 'unallocated_tasks': {'type': 'array', 'description': \"A list of tasks that couldn't be allocated to any subcontractor.\"}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you help me manage my subcontractors and tasks?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Can you provide me the list of subcontractors and tasks you currently have?"
            },
            {
                "role": "user",
                "text": "Yes, I have 3 subcontractors. John with a payment of 1500.00 and has currently no tasks. Anne with a payment of 2000.50 and currently handling 2 tasks. Mike with a payment of 1800.25 and currently handling 1 task. I have 3 tasks. Task 1 with a duration of 4 hours. Task 2 with a duration of 6 hours. Task 3 with a duration of 5 hours."
            },
            {
                "role": "assistant",
                "text": "Got it. Let me allocate these tasks to your subcontractors."
            }
        ],
        "function_call": {
            "function_name": "manage_subcontractors",
            "parameters": {
                "subcontractors": [
                    {
                        "name": "John",
                        "payment": 1500.0,
                        "task_count": 0
                    },
                    {
                        "name": "Anne",
                        "payment": 2000.5,
                        "task_count": 2
                    },
                    {
                        "name": "Mike",
                        "payment": 1800.25,
                        "task_count": 1
                    }
                ],
                "tasks": [
                    {
                        "task_id": "Task 1",
                        "task_duration": 4
                    },
                    {
                        "task_id": "Task 2",
                        "task_duration": 6
                    },
                    {
                        "task_id": "Task 3",
                        "task_duration": 5
                    }
                ]
            }
        }
    }
}
{
    "function_id": "freelance_coder-17",
    "task": "Research new technologies or tools relevant to the project.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Research new technologies or tools relevant to the project."
    },
    "snippet": "def research_technologies_tools(project: str) -> List[str]:\n    \"\"\"\n    Researches new technologies or tools relevant to the project and returns a list of them.\n    \n    Parameters:\n        project (str): Description or name of the project.\n    \n    Returns:\n        List[str]: A list of new technologies or tools relevant to the project.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def research_technologies_tools(project: str) -> List[str]:\n    \"\"\"\n    Researches new technologies or tools relevant to the project and returns a list of them.\n    \n    Parameters:\n        project (str): Description or name of the project.\n    \n    Returns:\n        List[str]: A list of new technologies or tools relevant to the project.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "research_technologies_tools",
            "description": "Researches new technologies or tools relevant to the project and returns a list of them.",
            "parameters": {
                "type": "object",
                "properties": {
                    "project": {
                        "type": "string",
                        "description": "Description or name of the project."
                    }
                },
                "required": [
                    "project"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "List[str]": {
                        "type": "array",
                        "description": "A list of new technologies or tools relevant to the project.",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'research_technologies_tools', 'description': 'Researches new technologies or tools relevant to the project and returns a list of them.', 'parameters': {'type': 'object', 'properties': {'project': {'type': 'string', 'description': 'Description or name of the project.'}}, 'required': ['project']}, 'returns': {'type': 'object', 'properties': {'List[str]': {'type': 'array', 'description': 'A list of new technologies or tools relevant to the project.', 'items': {'type': 'string'}}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you research new technologies and tools relevant to my project?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Can you please give me the name or a brief description of your project?"
            },
            {
                "role": "user",
                "text": "Yes, my project is related to machine learning algorithms."
            },
            {
                "role": "assistant",
                "text": "Great, I'm researching new technologies and tools relevant to your machine learning algorithms project now."
            }
        ],
        "function_call": {
            "function_name": "research_technologies_tools",
            "parameters": {
                "project": "machine learning algorithms"
            }
        }
    }
}
{
    "function_id": "freelance_coder-18",
    "task": "Calculate taxes, deductions, and expenses for financial records.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Calculate taxes, deductions, and expenses for financial records."
    },
    "snippet": "def calculate_financial_records(\n    gross_income: float, \n    expenses: List[Dict[str, float]], \n    tax_rate: float, \n    deductions: List[Dict[str, float]],\n) -> Dict[str, float]:\n    \"\"\"\n    Calculate the taxes, deductions, and expenses for financial records.\n\n    Parameters:\n        gross_income (float): Gross income of the individual from all sources.\n        expenses (List[Dict[str, float]]): A list of dictionaries containing details about several types of expenses.\n        tax_rate (float): The individual's tax rate.\n        deductions (List[Dict[str, float]]): A list of dictionaries containing several types of deductions.\n\n    Returns:\n        Dict[str, float]: A dictionary with keys 'net_income', 'total_tax', 'total_expenses' and 'total_deductions', and their respective values.\n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def calculate_financial_records(\n    gross_income: float, \n    expenses: List[Dict[str, float]], \n    tax_rate: float, \n    deductions: List[Dict[str, float]],\n) -> Dict[str, float]:\n    \"\"\"\n    Calculate the taxes, deductions, and expenses for financial records.\n\n    Parameters:\n        gross_income (float): Gross income of the individual from all sources.\n        expenses (List[Dict[str, float]]): A list of dictionaries containing details about several types of expenses.\n        tax_rate (float): The individual's tax rate.\n        deductions (List[Dict[str, float]]): A list of dictionaries containing several types of deductions.\n\n    Returns:\n        Dict[str, float]: A dictionary with keys 'net_income', 'total_tax', 'total_expenses' and 'total_deductions', and their respective values.\n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "calculate_financial_records",
            "description": "Calculate the taxes, deductions, and expenses for financial records.",
            "parameters": {
                "type": "object",
                "properties": {
                    "gross_income": {
                        "type": "float",
                        "description": "Gross income of the individual from all sources."
                    },
                    "expenses": {
                        "type": "array",
                        "description": "A list of dictionaries containing details about several types of expenses.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "expense_name": {
                                    "type": "string"
                                },
                                "amount": {
                                    "type": "float"
                                }
                            },
                            "required": [
                                "expense_name",
                                "amount"
                            ]
                        }
                    },
                    "tax_rate": {
                        "type": "float",
                        "description": "The individual's tax rate."
                    },
                    "deductions": {
                        "type": "array",
                        "description": "A list of dictionaries containing several types of deductions.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "deduction_name": {
                                    "type": "string"
                                },
                                "amount": {
                                    "type": "float"
                                }
                            },
                            "required": [
                                "deduction_name",
                                "amount"
                            ]
                        }
                    }
                },
                "required": [
                    "gross_income",
                    "expenses",
                    "tax_rate",
                    "deductions"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "net_income": {
                        "type": "float",
                        "description": "Net income after tax, expenses and deductions."
                    },
                    "total_tax": {
                        "type": "float",
                        "description": "Total tax calculated based on the gross income and tax rate."
                    },
                    "total_expenses": {
                        "type": "float",
                        "description": "Total expenses based on the provided list."
                    },
                    "total_deductions": {
                        "type": "float",
                        "description": "Total deductions based on the provided list."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'calculate_financial_records', 'description': 'Calculate the taxes, deductions, and expenses for financial records.', 'parameters': {'type': 'object', 'properties': {'gross_income': {'type': 'float', 'description': 'Gross income of the individual from all sources.'}, 'expenses': {'type': 'array', 'description': 'A list of dictionaries containing details about several types of expenses.', 'items': {'type': 'object', 'properties': {'expense_name': {'type': 'string'}, 'amount': {'type': 'float'}}, 'required': ['expense_name', 'amount']}}, 'tax_rate': {'type': 'float', 'description': \"The individual's tax rate.\"}, 'deductions': {'type': 'array', 'description': 'A list of dictionaries containing several types of deductions.', 'items': {'type': 'object', 'properties': {'deduction_name': {'type': 'string'}, 'amount': {'type': 'float'}}, 'required': ['deduction_name', 'amount']}}}, 'required': ['gross_income', 'expenses', 'tax_rate', 'deductions']}, 'returns': {'type': 'object', 'properties': {'net_income': {'type': 'float', 'description': 'Net income after tax, expenses and deductions.'}, 'total_tax': {'type': 'float', 'description': 'Total tax calculated based on the gross income and tax rate.'}, 'total_expenses': {'type': 'float', 'description': 'Total expenses based on the provided list.'}, 'total_deductions': {'type': 'float', 'description': 'Total deductions based on the provided list.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you help me calculate my financial records?"
            },
            {
                "role": "assistant",
                "text": "Sure, Could you provide me with your gross income, expenses, tax rate and deductions?"
            },
            {
                "role": "user",
                "text": "My gross income is $50000, my tax rate is 0.2, I have expenses that sum up to $5000 and deductions that sum up to $2000."
            },
            {
                "role": "assistant",
                "text": "Okay, Let's calculate your financial records."
            }
        ],
        "function_call": {
            "function_name": "calculate_financial_records",
            "parameters": {
                "gross_income": 50000,
                "expenses": [
                    {
                        "expense_name": "Expense1",
                        "amount": 5000
                    }
                ],
                "tax_rate": 0.2,
                "deductions": [
                    {
                        "deduction_name": "Deduction1",
                        "amount": 2000
                    }
                ]
            }
        }
    }
}
{
    "function_id": "freelance_coder-19",
    "task": "Network with professionals on platforms like LinkedIn for new opportunities.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Network with professionals on platforms like LinkedIn for new opportunities."
    },
    "snippet": "def network_professionals_linkedin(\n    profile_url: str,\n    message: str,\n    connection_targets: List[Dict[str, str]],\n) -> Dict[str, str]:\n    \"\"\"\n    Reaches out and networks with professionals on LinkedIn for new opportunities.\n\n    Parameters:\n        profile_url (str): The URL of your LinkedIn profile.\n        message (str): The network message to be sent to the professionals.\n        connection_targets (List[Dict[str, str]]): A list of dictionaries containing details about professionals to network with on LinkedIn.\n                                                   Each dictionary should have 'name' and 'profile_url' keys.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key and the status of the networking attempt as a value ('successful' or 'failed').\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def network_professionals_linkedin(\n    profile_url: str,\n    message: str,\n    connection_targets: List[Dict[str, str]],\n) -> Dict[str, str]:\n    \"\"\"\n    Reaches out and networks with professionals on LinkedIn for new opportunities.\n\n    Parameters:\n        profile_url (str): The URL of your LinkedIn profile.\n        message (str): The network message to be sent to the professionals.\n        connection_targets (List[Dict[str, str]]): A list of dictionaries containing details about professionals to network with on LinkedIn.\n                                                   Each dictionary should have 'name' and 'profile_url' keys.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key and the status of the networking attempt as a value ('successful' or 'failed').\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "network_professionals_linkedin",
            "description": "Reaches out and networks with professionals on LinkedIn for new opportunities.",
            "parameters": {
                "type": "object",
                "properties": {
                    "profile_url": {
                        "type": "string",
                        "description": "The URL of your LinkedIn profile."
                    },
                    "message": {
                        "type": "string",
                        "description": "The network message to be sent to the professionals."
                    },
                    "connection_targets": {
                        "type": "array",
                        "description": "A list of dictionaries containing details about professionals to network with on LinkedIn. Each dictionary should have 'name' and 'profile_url' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "profile_url": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "name",
                                "profile_url"
                            ]
                        }
                    }
                },
                "required": [
                    "profile_url",
                    "message",
                    "connection_targets"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "The status of the networking attempt ('successful' or 'failed')."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'network_professionals_linkedin', 'description': 'Reaches out and networks with professionals on LinkedIn for new opportunities.', 'parameters': {'type': 'object', 'properties': {'profile_url': {'type': 'string', 'description': 'The URL of your LinkedIn profile.'}, 'message': {'type': 'string', 'description': 'The network message to be sent to the professionals.'}, 'connection_targets': {'type': 'array', 'description': \"A list of dictionaries containing details about professionals to network with on LinkedIn. Each dictionary should have 'name' and 'profile_url' keys.\", 'items': {'type': 'object', 'properties': {'name': {'type': 'string'}, 'profile_url': {'type': 'string'}}, 'required': ['name', 'profile_url']}}}, 'required': ['profile_url', 'message', 'connection_targets']}, 'returns': {'type': 'object', 'properties': {'status': {'type': 'string', 'description': \"The status of the networking attempt ('successful' or 'failed').\"}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you connect with some professionals on LinkedIn for new opportunities?"
            },
            {
                "role": "assistant",
                "text": "Of course, I can help with that. Kindly provide your LinkedIn profile URL."
            },
            {
                "role": "user",
                "text": "Sure, my LinkedIn profile URL is 'https://www.linkedin.com/in/johnadam'."
            },
            {
                "role": "assistant",
                "text": "Great, now what message would you like to send to the professionals?"
            },
            {
                "role": "user",
                "text": "The message is: 'Hello! I'm looking forward to expanding my network within the Software Development field. Would love to connect with you.'"
            },
            {
                "role": "assistant",
                "text": "Understood. Finally, could you specify who you'd like to connect with? I would need their names and profile URLs."
            },
            {
                "role": "user",
                "text": "Absolutely. The connection targets are: [{'name': 'Sarah Smith', 'profile_url': 'https://www.linkedin.com/in/sarahsmith'}, {'name': 'Robert Johnson', 'profile_url': 'https://www.linkedin.com/in/robertjohnson'}]."
            },
            {
                "role": "assistant",
                "text": "Perfect, I'm on it. I will start reaching out to these professionals using the message you provided."
            }
        ],
        "function_call": {
            "function_name": "network_professionals_linkedin",
            "parameters": {
                "profile_url": "https://www.linkedin.com/in/johnadam",
                "message": "Hello! I'm looking forward to expanding my network within the Software Development field. Would love to connect with you.",
                "connection_targets": [
                    {
                        "name": "Sarah Smith",
                        "profile_url": "https://www.linkedin.com/in/sarahsmith"
                    },
                    {
                        "name": "Robert Johnson",
                        "profile_url": "https://www.linkedin.com/in/robertjohnson"
                    }
                ]
            }
        }
    }
}
{
    "function_id": "freelance_coder-20",
    "task": "Update portfolio with completed projects for future client acquisition.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Update portfolio with completed projects for future client acquisition."
    },
    "snippet": "def update_portfolio_with_completed_projects(\n    completed_projects: List[Dict[str, Union[str, date]]]\n) -> None:\n    \"\"\"\n    Updates portfolio with information about completed projects for future client acquisition.\n\n    Parameters:\n        completed_projects (List[Dict[str, Union[str, date]]]): A list of dictionaries containing project details. \n                                                                Each dictionary should have 'project_name', \n                                                                'project_description', 'completion_date' keys.\n\n    Returns:\n        None\n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def update_portfolio_with_completed_projects(\n    completed_projects: List[Dict[str, Union[str, date]]]\n) -> None:\n    \"\"\"\n    Updates portfolio with information about completed projects for future client acquisition.\n\n    Parameters:\n        completed_projects (List[Dict[str, Union[str, date]]]): A list of dictionaries containing project details. \n                                                                Each dictionary should have 'project_name', \n                                                                'project_description', 'completion_date' keys.\n\n    Returns:\n        None\n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "update_portfolio_with_completed_projects",
            "description": "Updates portfolio with information about completed projects for future client acquisition.",
            "parameters": {
                "type": "object",
                "properties": {
                    "completed_projects": {
                        "type": "array",
                        "description": "A list of dictionaries containing project details. Each dictionary should have 'project_name', 'project_description', 'completion_date' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "project_name": {
                                    "type": "string"
                                },
                                "project_description": {
                                    "type": "string"
                                },
                                "completion_date": {
                                    "type": "date",
                                    "description": "Project completion data in YYYY-MM-DD format."
                                }
                            },
                            "required": [
                                "project_name",
                                "project_description",
                                "completion_date"
                            ]
                        }
                    }
                },
                "required": [
                    "completed_projects"
                ]
            },
            "returns": {
                "type": "null",
                "description": "Nothing."
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'update_portfolio_with_completed_projects', 'description': 'Updates portfolio with information about completed projects for future client acquisition.', 'parameters': {'type': 'object', 'properties': {'completed_projects': {'type': 'array', 'description': \"A list of dictionaries containing project details. Each dictionary should have 'project_name', 'project_description', 'completion_date' keys.\", 'items': {'type': 'object', 'properties': {'project_name': {'type': 'string'}, 'project_description': {'type': 'string'}, 'completion_date': {'type': 'date', 'description': 'Project completion data in YYYY-MM-DD format.'}}, 'required': ['project_name', 'project_description', 'completion_date']}}}, 'required': ['completed_projects']}, 'returns': {'type': 'null', 'description': 'Nothing.'}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you update my portfolio with my completed projects?"
            },
            {
                "role": "assistant",
                "text": "Absolutely, I can assist with that. Can you please provide the details of the completed projects you want to add?"
            },
            {
                "role": "user",
                "text": "Sure, I completed two projects recently, first one is 'Project Alpha' that was a web development project done on 2021-09-01 and another is 'Project Beta', a mobile application finished on 2021-10-01."
            },
            {
                "role": "assistant",
                "text": "Great, I'm updating your portfolio with these completed projects."
            }
        ],
        "function_call": {
            "function_name": "update_portfolio_with_completed_projects",
            "parameters": {
                "completed_projects": [
                    {
                        "project_name": "Project Alpha",
                        "project_description": "web development project",
                        "completion_date": "2021-09-01"
                    },
                    {
                        "project_name": "Project Beta",
                        "project_description": "mobile application",
                        "completion_date": "2021-10-01"
                    }
                ]
            }
        }
    }
}
