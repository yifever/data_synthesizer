{
    "function_id": "uber-driver-1",
    "task": "Accept a new ride request.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Accept a new ride request."
    },
    "snippet": "Here is the Python function snippet for 'Accept a new ride request':\n\n```python\ndef accept_ride_request(\n    rider_id: str,\n    pickup_location: Dict[str, float],\n    dropoff_location: Dict[str, float],\n) -> Dict[str, Union[str, bool]]:\n    \"\"\"\n    Accepts a new ride request and returns the status of the request.\n    \n    Parameters:\n        rider_id (str): The unique identifier for the rider.\n        pickup_location (Dict[str, float]): A dictionary with 'lat' and 'lng' keys representing the pickup GPS coordinates.\n        dropoff_location (Dict[str, float]): A dictionary with 'lat' and 'lng' keys representing the dropoff GPS coordinates.\n                                              \n    Returns:\n        Dict[str, Union[str, bool]]: A dictionary with 'ride_id' as a key and the unique ride identifier as a value if the request was successful.\n                                      If the request was not successful, the dictionary will contain 'error' as a key and the reason for failure as a value.\n    \"\"\"\n```\nPlease note, you need to replace the `Union[str, bool]` to suit the actual data type of return in your application.",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "Here is the Python function snippet for 'Accept a new ride request':\n\n```python\ndef accept_ride_request(\n    rider_id: str,\n    pickup_location: Dict[str, float],\n    dropoff_location: Dict[str, float],\n) -> Dict[str, Union[str, bool]]:\n    \"\"\"\n    Accepts a new ride request and returns the status of the request.\n    \n    Parameters:\n        rider_id (str): The unique identifier for the rider.\n        pickup_location (Dict[str, float]): A dictionary with 'lat' and 'lng' keys representing the pickup GPS coordinates.\n        dropoff_location (Dict[str, float]): A dictionary with 'lat' and 'lng' keys representing the dropoff GPS coordinates.\n                                              \n    Returns:\n        Dict[str, Union[str, bool]]: A dictionary with 'ride_id' as a key and the unique ride identifier as a value if the request was successful.\n                                      If the request was not successful, the dictionary will contain 'error' as a key and the reason for failure as a value.\n    \"\"\"\n```\nPlease note, you need to replace the `Union[str, bool]` to suit the actual data type of return in your application.",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "accept_ride_request",
            "description": "Accepts a new ride request and returns the status of the request.",
            "parameters": {
                "type": "object",
                "properties": {
                    "rider_id": {
                        "type": "string",
                        "description": "The unique identifier for the rider."
                    },
                    "pickup_location": {
                        "type": "object",
                        "description": "A dictionary with 'lat' and 'lng' keys representing the pickup GPS coordinates.",
                        "properties": {
                            "lat": {
                                "type": "float"
                            },
                            "lng": {
                                "type": "float"
                            }
                        },
                        "required": [
                            "lat",
                            "lng"
                        ]
                    },
                    "dropoff_location": {
                        "type": "object",
                        "description": "A dictionary with 'lat' and 'lng' keys representing the dropoff GPS coordinates.",
                        "properties": {
                            "lat": {
                                "type": "float"
                            },
                            "lng": {
                                "type": "float"
                            }
                        },
                        "required": [
                            "lat",
                            "lng"
                        ]
                    }
                },
                "required": [
                    "rider_id",
                    "pickup_location",
                    "dropoff_location"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "ride_id": {
                        "type": "string",
                        "description": "The unique ride identifier if the request was successful."
                    },
                    "error": {
                        "type": "string",
                        "description": "The reason for failure if the request was not successful."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'accept_ride_request', 'description': 'Accepts a new ride request and returns the status of the request.', 'parameters': {'type': 'object', 'properties': {'rider_id': {'type': 'string', 'description': 'The unique identifier for the rider.'}, 'pickup_location': {'type': 'object', 'description': \"A dictionary with 'lat' and 'lng' keys representing the pickup GPS coordinates.\", 'properties': {'lat': {'type': 'float'}, 'lng': {'type': 'float'}}, 'required': ['lat', 'lng']}, 'dropoff_location': {'type': 'object', 'description': \"A dictionary with 'lat' and 'lng' keys representing the dropoff GPS coordinates.\", 'properties': {'lat': {'type': 'float'}, 'lng': {'type': 'float'}}, 'required': ['lat', 'lng']}}, 'required': ['rider_id', 'pickup_location', 'dropoff_location']}, 'returns': {'type': 'object', 'properties': {'ride_id': {'type': 'string', 'description': 'The unique ride identifier if the request was successful.'}, 'error': {'type': 'string', 'description': 'The reason for failure if the request was not successful.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hi, I need to book a ride."
            },
            {
                "role": "assistant",
                "text": "Sure, I can help with that. Could you please tell me your rider ID?"
            },
            {
                "role": "user",
                "text": "My rider ID is 'rider123'."
            },
            {
                "role": "assistant",
                "text": "Thank you for the information. Could you please provide the pickup and dropoff locations? I would need latitude and longitude for both."
            },
            {
                "role": "user",
                "text": "Sure, the pickup location is at latitude 37.7749 and longitude -122.4194. The dropoff is at latitude 34.0522 and longitude -118.2437."
            },
            {
                "role": "assistant",
                "text": "Great, I am processing your ride request now."
            }
        ],
        "function_call": {
            "function_name": "accept_ride_request",
            "parameters": {
                "rider_id": "rider123",
                "pickup_location": {
                    "lat": 37.7749,
                    "lng": -122.4194
                },
                "dropoff_location": {
                    "lat": 34.0522,
                    "lng": -118.2437
                }
            }
        }
    }
}
{
    "function_id": "uber-driver-2",
    "task": "Decline a new ride request.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Decline a new ride request."
    },
    "snippet": "def decline_ride_request(\n    ride_request_id: int,\n) -> str:\n    \"\"\"\n    Declines a new ride request.\n    \n    Parameters:\n        ride_request_id (int): The ID of the ride request to decline.\n                                          \n    Returns:\n        str: A message stating that the ride request has been declined.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def decline_ride_request(\n    ride_request_id: int,\n) -> str:\n    \"\"\"\n    Declines a new ride request.\n    \n    Parameters:\n        ride_request_id (int): The ID of the ride request to decline.\n                                          \n    Returns:\n        str: A message stating that the ride request has been declined.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "decline_ride_request",
            "description": "Declines a new ride request.",
            "parameters": {
                "type": "object",
                "properties": {
                    "ride_request_id": {
                        "type": "integer",
                        "description": "The ID of the ride request to decline."
                    }
                },
                "required": [
                    "ride_request_id"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "A message stating that the ride request has been declined."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'decline_ride_request', 'description': 'Declines a new ride request.', 'parameters': {'type': 'object', 'properties': {'ride_request_id': {'type': 'integer', 'description': 'The ID of the ride request to decline.'}}, 'required': ['ride_request_id']}, 'returns': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'A message stating that the ride request has been declined.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, I want to decline a ride request."
            },
            {
                "role": "assistant",
                "text": "Sure, I can help with that. Could you please provide me with the ride request ID you wish to decline?"
            },
            {
                "role": "user",
                "text": "Yes, the ride request ID is '987654'."
            },
            {
                "role": "assistant",
                "text": "Alright, I'm declining the ride request for you now."
            }
        ],
        "function_call": {
            "function_name": "decline_ride_request",
            "parameters": {
                "ride_request_id": 987654
            }
        }
    }
}
{
    "function_id": "uber-driver-3",
    "task": "Start navigation to the pickup location.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Start navigation to the pickup location."
    },
    "snippet": "def start_navigation_to_pickup_location(\n    pickup_location_coordinates: Tuple[float, float],\n) -> None:\n    \"\"\"\n    Starts navigation to the provided pickup location.\n    \n    Parameters:\n        pickup_location_coordinates (Tuple[float, float]): A tuple representing the latitude and longitude of the pickup location.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def start_navigation_to_pickup_location(\n    pickup_location_coordinates: Tuple[float, float],\n) -> None:\n    \"\"\"\n    Starts navigation to the provided pickup location.\n    \n    Parameters:\n        pickup_location_coordinates (Tuple[float, float]): A tuple representing the latitude and longitude of the pickup location.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "start_navigation_to_pickup_location",
            "description": "Starts navigation to the provided pickup location.",
            "parameters": {
                "type": "object",
                "properties": {
                    "pickup_location_coordinates": {
                        "type": "Tuple[float, float]",
                        "description": "A tuple representing the latitude and longitude of the pickup location."
                    }
                },
                "required": [
                    "pickup_location_coordinates"
                ]
            },
            "returns": {
                "type": "None"
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'start_navigation_to_pickup_location', 'description': 'Starts navigation to the provided pickup location.', 'parameters': {'type': 'object', 'properties': {'pickup_location_coordinates': {'type': 'Tuple[float, float]', 'description': 'A tuple representing the latitude and longitude of the pickup location.'}}, 'required': ['pickup_location_coordinates']}, 'returns': {'type': 'None'}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": "{\n    \"conversation\": \n    [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, can you guide me to my pickup location?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, I can do that. Could you please provide the coordinates of your pickup location?\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"Yes, the coordinates are (45.764043,4.835659).\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Great, I'm starting the navigation to your pickup location now.\"\n        }\n    ],\n    \"function_call\": \n    {\n        \"function_name\": \"start_navigation_to_pickup_location\",\n        \"parameters\": {\n            \"pickup_location_coordinates\": (45.764043,4.835659)\n        }\n    }\n}"
}
{
    "function_id": "uber-driver-4",
    "task": "Notify passenger upon arrival at the pickup location.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Notify passenger upon arrival at the pickup location."
    },
    "snippet": "def notify_passenger_arrival(\n    passenger_id: str,\n    pickup_location: str\n) -> Dict[str, str]:\n    \"\"\"\n    Notifies a passenger upon arrival at the pickup location.\n\n    Parameters:\n        passenger_id (str): The ID or name of the passenger to be notified.\n        pickup_location (str): The location where the vehicle has arrived for pickup.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'passenger_id' as key and the notification message as value.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def notify_passenger_arrival(\n    passenger_id: str,\n    pickup_location: str\n) -> Dict[str, str]:\n    \"\"\"\n    Notifies a passenger upon arrival at the pickup location.\n\n    Parameters:\n        passenger_id (str): The ID or name of the passenger to be notified.\n        pickup_location (str): The location where the vehicle has arrived for pickup.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'passenger_id' as key and the notification message as value.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "notify_passenger_arrival",
            "description": "Notifies a passenger upon arrival at the pickup location.",
            "parameters": {
                "type": "object",
                "properties": {
                    "passenger_id": {
                        "type": "string",
                        "description": "The ID or name of the passenger to be notified."
                    },
                    "pickup_location": {
                        "type": "string",
                        "description": "The location where the vehicle has arrived for pickup."
                    }
                },
                "required": [
                    "passenger_id",
                    "pickup_location"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "passenger_id": {
                        "type": "string",
                        "description": "The ID or name of the passenger being notified."
                    },
                    "message": {
                        "type": "string",
                        "description": "The notification message for the passenger."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'notify_passenger_arrival', 'description': 'Notifies a passenger upon arrival at the pickup location.', 'parameters': {'type': 'object', 'properties': {'passenger_id': {'type': 'string', 'description': 'The ID or name of the passenger to be notified.'}, 'pickup_location': {'type': 'string', 'description': 'The location where the vehicle has arrived for pickup.'}}, 'required': ['passenger_id', 'pickup_location']}, 'returns': {'type': 'object', 'properties': {'passenger_id': {'type': 'string', 'description': 'The ID or name of the passenger being notified.'}, 'message': {'type': 'string', 'description': 'The notification message for the passenger.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, could you notify my passenger that I've arrived at the pickup location?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. May I know the ID or name of the passenger and the location where you've arrived for the pickup?"
            },
            {
                "role": "user",
                "text": "Yes, the passenger ID is '12345' and I've arrived at '123 Main St, Anytown'."
            },
            {
                "role": "assistant",
                "text": "Great, I'm notifying your passenger now."
            }
        ],
        "function_call": {
            "function_name": "notify_passenger_arrival",
            "parameters": {
                "passenger_id": "12345",
                "pickup_location": "123 Main St, Anytown"
            }
        }
    }
}
{
    "function_id": "uber-driver-5",
    "task": "Start the ride after picking up the passenger.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Start the ride after picking up the passenger."
    },
    "snippet": "def start_ride(\n    passenger: Dict[str, str]\n) -> None:\n    \"\"\"\n    Starts the ride after picking up the passenger.\n\n    Parameters:\n        passenger (Dict[str, str]): A dictionary containing passenger details. The dictionary should have 'name' and 'pickup_location' keys.\n        \n    Returns:\n        None\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def start_ride(\n    passenger: Dict[str, str]\n) -> None:\n    \"\"\"\n    Starts the ride after picking up the passenger.\n\n    Parameters:\n        passenger (Dict[str, str]): A dictionary containing passenger details. The dictionary should have 'name' and 'pickup_location' keys.\n        \n    Returns:\n        None\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "start_ride",
            "description": "Starts the ride after picking up the passenger.",
            "parameters": {
                "type": "object",
                "properties": {
                    "passenger": {
                        "type": "object",
                        "description": "A dictionary containing passenger details. The dictionary should have 'name' and 'pickup_location' keys.",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The name of the passenger."
                            },
                            "pickup_location": {
                                "type": "string",
                                "description": "The location where the passenger is to be picked up."
                            }
                        },
                        "required": [
                            "name",
                            "pickup_location"
                        ]
                    }
                },
                "required": [
                    "passenger"
                ]
            },
            "returns": {
                "type": "null",
                "description": "No return value."
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'start_ride', 'description': 'Starts the ride after picking up the passenger.', 'parameters': {'type': 'object', 'properties': {'passenger': {'type': 'object', 'description': \"A dictionary containing passenger details. The dictionary should have 'name' and 'pickup_location' keys.\", 'properties': {'name': {'type': 'string', 'description': 'The name of the passenger.'}, 'pickup_location': {'type': 'string', 'description': 'The location where the passenger is to be picked up.'}}, 'required': ['name', 'pickup_location']}}, 'required': ['passenger']}, 'returns': {'type': 'null', 'description': 'No return value.'}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, could you start a ride for me?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Can you please provide me with your name and your pickup location?"
            },
            {
                "role": "user",
                "text": "Yes, my name is John and my pickup location is '123 Main Street'."
            },
            {
                "role": "assistant",
                "text": "Great, I'm starting your ride now."
            }
        ],
        "function_call": {
            "function_name": "start_ride",
            "parameters": {
                "passenger": {
                    "name": "John",
                    "pickup_location": "123 Main Street"
                }
            }
        }
    }
}
{
    "function_id": "uber-driver-6",
    "task": "End the ride upon arrival at the destination.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "End the ride upon arrival at the destination."
    },
    "snippet": "def end_ride(\n    arrival_destination: str,\n    current_location: str\n) -> str:\n    \"\"\"\n    Ends the ride upon arrival at the destination.\n\n    Parameters:\n        arrival_destination (str): The final ride destination.\n        current_location (str): The current location.\n\n    Returns:\n        str: A message indicating that the ride has ended or is still ongoing, based on the comparison between the current location and the arrival destination.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def end_ride(\n    arrival_destination: str,\n    current_location: str\n) -> str:\n    \"\"\"\n    Ends the ride upon arrival at the destination.\n\n    Parameters:\n        arrival_destination (str): The final ride destination.\n        current_location (str): The current location.\n\n    Returns:\n        str: A message indicating that the ride has ended or is still ongoing, based on the comparison between the current location and the arrival destination.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "end_ride",
            "description": "Ends the ride upon arrival at the destination.",
            "parameters": {
                "type": "object",
                "properties": {
                    "arrival_destination": {
                        "type": "string",
                        "description": "The final ride destination."
                    },
                    "current_location": {
                        "type": "string",
                        "description": "The current location."
                    }
                },
                "required": [
                    "arrival_destination",
                    "current_location"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "success_message": {
                        "type": "string",
                        "description": "A message indicating that the ride has ended or is still ongoing, based on the comparison between the current location and arrival destination."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'end_ride', 'description': 'Ends the ride upon arrival at the destination.', 'parameters': {'type': 'object', 'properties': {'arrival_destination': {'type': 'string', 'description': 'The final ride destination.'}, 'current_location': {'type': 'string', 'description': 'The current location.'}}, 'required': ['arrival_destination', 'current_location']}, 'returns': {'type': 'object', 'properties': {'success_message': {'type': 'string', 'description': 'A message indicating that the ride has ended or is still ongoing, based on the comparison between the current location and arrival destination.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you end my ride now?"
            },
            {
                "role": "assistant",
                "text": "Sure, can you please provide your current location and the final destination of your ride?"
            },
            {
                "role": "user",
                "text": "Yes, my current location is '123 Main Street' and the final destination was '456 Berry Street'."
            },
            {
                "role": "assistant",
                "text": "Great, I'm ending your ride now."
            }
        ],
        "function_call": {
            "function_name": "end_ride",
            "parameters": {
                "arrival_destination": "456 Berry Street",
                "current_location": "123 Main Street"
            }
        }
    }
}
{
    "function_id": "uber-driver-7",
    "task": "Rate the passenger.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Rate the passenger."
    },
    "snippet": "def rate_passenger(\n    passenger_id: str, \n    rating: int\n) -> Dict[str, Union[str, bool, int]]:\n    \"\"\"\n    Rates the passenger and returns the result.\n\n    Parameters:\n        passenger_id (str): The unique identifier of the passenger to be rated.\n        rating (int): The rating to be given to the passenger in a scale from 1 to 5.\n\n    Returns:\n        Dict[str, Union[str, bool, int]]: A dictionary containing 'passenger_id', 'rated' and 'rating'. \n        'passenger_id' is the unique identifier of the passenger, 'rated' is a boolean indicating whether \n        the rating process was successful or not, and 'rating' is the rating given to the passenger.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def rate_passenger(\n    passenger_id: str, \n    rating: int\n) -> Dict[str, Union[str, bool, int]]:\n    \"\"\"\n    Rates the passenger and returns the result.\n\n    Parameters:\n        passenger_id (str): The unique identifier of the passenger to be rated.\n        rating (int): The rating to be given to the passenger in a scale from 1 to 5.\n\n    Returns:\n        Dict[str, Union[str, bool, int]]: A dictionary containing 'passenger_id', 'rated' and 'rating'. \n        'passenger_id' is the unique identifier of the passenger, 'rated' is a boolean indicating whether \n        the rating process was successful or not, and 'rating' is the rating given to the passenger.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "rate_passenger",
            "description": "Rates the passenger and returns the result.",
            "parameters": {
                "type": "object",
                "properties": {
                    "passenger_id": {
                        "type": "string",
                        "description": "The unique identifier of the passenger to be rated."
                    },
                    "rating": {
                        "type": "integer",
                        "description": "The rating to be given to the passenger in a scale from 1 to 5."
                    }
                },
                "required": [
                    "passenger_id",
                    "rating"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "passenger_id": {
                        "type": "string",
                        "description": "The unique identifier of the passenger."
                    },
                    "rated": {
                        "type": "boolean",
                        "description": "A boolean indicating whether the rating process was successful or not."
                    },
                    "rating": {
                        "type": "integer",
                        "description": "The rating given to the passenger."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'rate_passenger', 'description': 'Rates the passenger and returns the result.', 'parameters': {'type': 'object', 'properties': {'passenger_id': {'type': 'string', 'description': 'The unique identifier of the passenger to be rated.'}, 'rating': {'type': 'integer', 'description': 'The rating to be given to the passenger in a scale from 1 to 5.'}}, 'required': ['passenger_id', 'rating']}, 'returns': {'type': 'object', 'properties': {'passenger_id': {'type': 'string', 'description': 'The unique identifier of the passenger.'}, 'rated': {'type': 'boolean', 'description': 'A boolean indicating whether the rating process was successful or not.'}, 'rating': {'type': 'integer', 'description': 'The rating given to the passenger.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, I want to rate a passenger"
            },
            {
                "role": "assistant",
                "text": "Sure, I can help you with that. Can you tell me the passenger's identifier and the rating you want to give?"
            },
            {
                "role": "user",
                "text": "Yes, the passenger id is '12345'. I would like to give a rating of '4'."
            },
            {
                "role": "assistant",
                "text": "Great, I'm submitting your rating now."
            }
        ],
        "function_call": {
            "function_name": "rate_passenger",
            "parameters": {
                "passenger_id": "12345",
                "rating": 4
            }
        }
    }
}
{
    "function_id": "uber-driver-10",
    "task": "Send a message or call the passenger through the app.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Send a message or call the passenger through the app."
    },
    "snippet": "def contact_passenger(\n    passenger_id: str,\n    message: str,\n    call: bool\n) -> None:\n    \"\"\"\n    Sends a message or initiates a call to the passenger through the app.\n    \n    Parameters:\n        passenger_id (str): The unique identifier for the passenger.\n        message (str): The message to be sent to the passenger.\n        call (bool): A boolean indicating whether to initiate a call or not. \n                     If True, a call is initiated. If False, a message is sent.\n                     \n    Returns:\n        None\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def contact_passenger(\n    passenger_id: str,\n    message: str,\n    call: bool\n) -> None:\n    \"\"\"\n    Sends a message or initiates a call to the passenger through the app.\n    \n    Parameters:\n        passenger_id (str): The unique identifier for the passenger.\n        message (str): The message to be sent to the passenger.\n        call (bool): A boolean indicating whether to initiate a call or not. \n                     If True, a call is initiated. If False, a message is sent.\n                     \n    Returns:\n        None\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "contact_passenger",
            "description": "Sends a message or initiates a call to the passenger through the app.",
            "parameters": {
                "type": "object",
                "properties": {
                    "passenger_id": {
                        "type": "string",
                        "description": "The unique identifier for the passenger."
                    },
                    "message": {
                        "type": "string",
                        "description": "The message to be sent to the passenger."
                    },
                    "call": {
                        "type": "boolean",
                        "description": "A boolean indicating whether to initiate a call or not. If True, a call is initiated. If False, a message is sent."
                    }
                },
                "required": [
                    "passenger_id",
                    "message",
                    "call"
                ]
            },
            "returns": {
                "type": "null"
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'contact_passenger', 'description': 'Sends a message or initiates a call to the passenger through the app.', 'parameters': {'type': 'object', 'properties': {'passenger_id': {'type': 'string', 'description': 'The unique identifier for the passenger.'}, 'message': {'type': 'string', 'description': 'The message to be sent to the passenger.'}, 'call': {'type': 'boolean', 'description': 'A boolean indicating whether to initiate a call or not. If True, a call is initiated. If False, a message is sent.'}}, 'required': ['passenger_id', 'message', 'call']}, 'returns': {'type': 'null'}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, could you contact my passenger for me?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Could you please provide me with the passenger's ID?"
            },
            {
                "role": "user",
                "text": "Sure, the passenger's ID is 'PAS123'."
            },
            {
                "role": "assistant",
                "text": "Got it. Would you like me to initiate a call or send a message to the passenger?"
            },
            {
                "role": "user",
                "text": "I want to send a message."
            },
            {
                "role": "assistant",
                "text": "Okay. What message do you want me to send?"
            },
            {
                "role": "user",
                "text": "Tell them I'll be there in 5 minutes."
            },
            {
                "role": "assistant",
                "text": "Alright, I'll send that message right away."
            }
        ],
        "function_call": {
            "function_name": "contact_passenger",
            "parameters": {
                "passenger_id": "PAS123",
                "message": "I'll be there in 5 minutes.",
                "call": false
            }
        }
    }
}
{
    "function_id": "uber-driver-11",
    "task": "Update driver profile details, such as photo or vehicle information.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Update driver profile details, such as photo or vehicle information."
    },
    "snippet": "def update_driver_profile(\n    driver_id: str,\n    new_photo: str,\n    vehicle_info: Dict[str, str]\n) -> bool:\n    \"\"\"\n    Updates driver profile details, such as photo or vehicle information.\n\n    Parameters:\n        driver_id (str): The driver's unique ID.\n        new_photo (str): The new photo to use for the driver's profile.\n        vehicle_info (Dict[str, str]): A dictionary with new vehicle details. Each key is a field name,\n                                       and each value is the new data for that field.\n                                       \n    Returns:\n        bool: True if the update was successful, False otherwise.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def update_driver_profile(\n    driver_id: str,\n    new_photo: str,\n    vehicle_info: Dict[str, str]\n) -> bool:\n    \"\"\"\n    Updates driver profile details, such as photo or vehicle information.\n\n    Parameters:\n        driver_id (str): The driver's unique ID.\n        new_photo (str): The new photo to use for the driver's profile.\n        vehicle_info (Dict[str, str]): A dictionary with new vehicle details. Each key is a field name,\n                                       and each value is the new data for that field.\n                                       \n    Returns:\n        bool: True if the update was successful, False otherwise.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "update_driver_profile",
            "description": "Updates driver profile details, such as photo or vehicle information.",
            "parameters": {
                "type": "object",
                "properties": {
                    "driver_id": {
                        "type": "string",
                        "description": "The driver's unique ID."
                    },
                    "new_photo": {
                        "type": "string",
                        "description": "The new photo to use for the driver's profile."
                    },
                    "vehicle_info": {
                        "type": "object",
                        "description": "A dictionary with new vehicle details. Each key is a field name, and each value is the new data for that field.",
                        "properties": {}
                    }
                },
                "required": [
                    "driver_id",
                    "new_photo",
                    "vehicle_info"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "Update_Successful": {
                        "type": "bool",
                        "description": "True if the update was successful, False otherwise."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'update_driver_profile', 'description': 'Updates driver profile details, such as photo or vehicle information.', 'parameters': {'type': 'object', 'properties': {'driver_id': {'type': 'string', 'description': \"The driver's unique ID.\"}, 'new_photo': {'type': 'string', 'description': \"The new photo to use for the driver's profile.\"}, 'vehicle_info': {'type': 'object', 'description': 'A dictionary with new vehicle details. Each key is a field name, and each value is the new data for that field.', 'properties': {}}}, 'required': ['driver_id', 'new_photo', 'vehicle_info']}, 'returns': {'type': 'object', 'properties': {'Update_Successful': {'type': 'bool', 'description': 'True if the update was successful, False otherwise.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, I need to update my driver profile."
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that for you. Can you please provide me with your driver ID, new photo, and any vehicle details that you would like to update? "
            },
            {
                "role": "user",
                "text": "Yes, my driver ID is 'driver567'. Here's my new photo and the updated vehicle details: It's a red 2022 Ford Mustang."
            },
            {
                "role": "assistant",
                "text": "Great, I'm updating your driver profile now."
            }
        ],
        "function_call": {
            "function_name": "update_driver_profile",
            "parameters": {
                "driver_id": "driver567",
                "new_photo": "path_to_new_photo.jpg",
                "vehicle_info": "It's a red 2022 Ford Mustang"
            }
        }
    }
}
{
    "function_id": "uber-driver-13",
    "task": "Withdraw earnings to a linked bank account.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Withdraw earnings to a linked bank account."
    },
    "snippet": "def withdraw_earnings(\n    bank_account_details: Dict[str, str],\n    amount: float\n) -> Dict[str, str]:\n    \"\"\"\n    Withdraws earnings to a linked bank account.\n    \n    Parameters:\n        bank_account_details (Dict[str, str]): Dictionary containing bank account details.\n                                               This includes 'bank_name', 'account_number' and \n                                               'routing_number'.\n        amount (float): The amount to be withdrawn.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'transaction_status' as a key and the status of the withdrawal\n                        as a value, which can be 'success' or 'failure'.\n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def withdraw_earnings(\n    bank_account_details: Dict[str, str],\n    amount: float\n) -> Dict[str, str]:\n    \"\"\"\n    Withdraws earnings to a linked bank account.\n    \n    Parameters:\n        bank_account_details (Dict[str, str]): Dictionary containing bank account details.\n                                               This includes 'bank_name', 'account_number' and \n                                               'routing_number'.\n        amount (float): The amount to be withdrawn.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'transaction_status' as a key and the status of the withdrawal\n                        as a value, which can be 'success' or 'failure'.\n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "withdraw_earnings",
            "description": "Withdraws earnings to a linked bank account.",
            "parameters": {
                "type": "object",
                "properties": {
                    "bank_account_details": {
                        "type": "object",
                        "description": "Dictionary containing bank account details. This includes 'bank_name', 'account_number' and 'routing_number'.",
                        "properties": {
                            "bank_name": {
                                "type": "string"
                            },
                            "account_number": {
                                "type": "string"
                            },
                            "routing_number": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "bank_name",
                            "account_number",
                            "routing_number"
                        ]
                    },
                    "amount": {
                        "type": "float",
                        "description": "The amount to be withdrawn."
                    }
                },
                "required": [
                    "bank_account_details",
                    "amount"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "transaction_status": {
                        "type": "string",
                        "description": "The status of the withdrawal which can be 'success' or 'failure'."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'withdraw_earnings', 'description': 'Withdraws earnings to a linked bank account.', 'parameters': {'type': 'object', 'properties': {'bank_account_details': {'type': 'object', 'description': \"Dictionary containing bank account details. This includes 'bank_name', 'account_number' and 'routing_number'.\", 'properties': {'bank_name': {'type': 'string'}, 'account_number': {'type': 'string'}, 'routing_number': {'type': 'string'}}, 'required': ['bank_name', 'account_number', 'routing_number']}, 'amount': {'type': 'float', 'description': 'The amount to be withdrawn.'}}, 'required': ['bank_account_details', 'amount']}, 'returns': {'type': 'object', 'properties': {'transaction_status': {'type': 'string', 'description': \"The status of the withdrawal which can be 'success' or 'failure'.\"}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hi there, I want to withdraw my earnings to my bank account."
            },
            {
                "role": "assistant",
                "text": "Sure, I can assist you with that. Could you please provide me with your bank name, account number, and routing number?"
            },
            {
                "role": "user",
                "text": "Sure, my bank is 'XYZ Bank', the account number is '1234567890' and the routing number is '0987654321'."
            },
            {
                "role": "assistant",
                "text": "Perfect, thank you for providing the details. How much would you like to withdraw?"
            },
            {
                "role": "user",
                "text": "I want to withdraw $500.50."
            },
            {
                "role": "assistant",
                "text": "Great, I'm processing your withdrawal of $500.50 to your XYZ Bank account now."
            }
        ],
        "function_call": {
            "function_name": "withdraw_earnings",
            "parameters": {
                "bank_account_details": {
                    "bank_name": "XYZ Bank",
                    "account_number": "1234567890",
                    "routing_number": "0987654321"
                },
                "amount": 500.5
            }
        }
    }
}
{
    "function_id": "uber-driver-14",
    "task": "Review and dispute fare adjustments.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Review and dispute fare adjustments."
    },
    "snippet": "def review_and_dispute_fare_adjustments(\n    adjustment_id: str,\n    fare_adjustments: Dict[str, float],\n    reason: str\n) -> Dict[str, Union[str, float]]:\n    \"\"\"\n    Reviews and disputes fare adjustments and returns a new fare adjustment dictionary.\n\n    Parameters:\n        adjustment_id (str): The ID of the fare adjustment to dispute.\n        fare_adjustments (Dict[str, float]): A dictionary containing fare adjustments. \n                                            Each key is an adjustment ID and each value is the adjustment amount.\n        reason (str): The reason for disputing the fare adjustment.\n\n    Returns:\n        Dict[str, Union[str, float]]: A dictionary containing the disputed fare adjustment ID, \n                                       the new adjustment amount, and the reason for the dispute.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def review_and_dispute_fare_adjustments(\n    adjustment_id: str,\n    fare_adjustments: Dict[str, float],\n    reason: str\n) -> Dict[str, Union[str, float]]:\n    \"\"\"\n    Reviews and disputes fare adjustments and returns a new fare adjustment dictionary.\n\n    Parameters:\n        adjustment_id (str): The ID of the fare adjustment to dispute.\n        fare_adjustments (Dict[str, float]): A dictionary containing fare adjustments. \n                                            Each key is an adjustment ID and each value is the adjustment amount.\n        reason (str): The reason for disputing the fare adjustment.\n\n    Returns:\n        Dict[str, Union[str, float]]: A dictionary containing the disputed fare adjustment ID, \n                                       the new adjustment amount, and the reason for the dispute.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "review_and_dispute_fare_adjustments",
            "description": "Reviews and disputes fare adjustments and returns a new fare adjustment dictionary.",
            "parameters": {
                "type": "object",
                "properties": {
                    "adjustment_id": {
                        "type": "string",
                        "description": "The ID of the fare adjustment to dispute."
                    },
                    "fare_adjustments": {
                        "type": "object",
                        "description": "A dictionary containing fare adjustments. Each key is an adjustment ID and each value is the adjustment amount.",
                        "properties": {
                            "type": "string"
                        }
                    },
                    "reason": {
                        "type": "string",
                        "description": "The reason for disputing the fare adjustment."
                    }
                },
                "required": [
                    "adjustment_id",
                    "fare_adjustments",
                    "reason"
                ]
            },
            "returns": {
                "type": "object",
                "description": "A dictionary containing the disputed fare adjustment ID, the new adjustment amount, and the reason for the dispute.",
                "properties": {
                    "type": "string"
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'review_and_dispute_fare_adjustments', 'description': 'Reviews and disputes fare adjustments and returns a new fare adjustment dictionary.', 'parameters': {'type': 'object', 'properties': {'adjustment_id': {'type': 'string', 'description': 'The ID of the fare adjustment to dispute.'}, 'fare_adjustments': {'type': 'object', 'description': 'A dictionary containing fare adjustments. Each key is an adjustment ID and each value is the adjustment amount.', 'properties': {'type': 'string'}}, 'reason': {'type': 'string', 'description': 'The reason for disputing the fare adjustment.'}}, 'required': ['adjustment_id', 'fare_adjustments', 'reason']}, 'returns': {'type': 'object', 'description': 'A dictionary containing the disputed fare adjustment ID, the new adjustment amount, and the reason for the dispute.', 'properties': {'type': 'string'}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, I need to review and dispute a fare adjustment."
            },
            {
                "role": "assistant",
                "text": "Sure, I can help with that. Can you provide the ID of the fare adjustment you wish to dispute?"
            },
            {
                "role": "user",
                "text": "Yes, the adjustment ID is 'ADJ123'."
            },
            {
                "role": "assistant",
                "text": "Alright, and can you give me the details of the fare adjustments?"
            },
            {
                "role": "user",
                "text": "The fare was adjusted from $50 to $75. I want to dispute this adjustment."
            },
            {
                "role": "assistant",
                "text": "Understood. And can you please provide me the reason for disputing this fare adjustment?"
            },
            {
                "role": "user",
                "text": "Yes, I believe the fare was incorrectly calculated."
            },
            {
                "role": "assistant",
                "text": "Great, I'm initiating the review and dispute for your fare adjustment now."
            }
        ],
        "function_call": {
            "function_name": "review_and_dispute_fare_adjustments",
            "parameters": {
                "adjustment_id": "ADJ123",
                "fare_adjustments": {
                    "ADJ123": 75
                },
                "reason": "The fare was incorrectly calculated."
            }
        }
    }
}
{
    "function_id": "uber-driver-17",
    "task": "Review driver ratings and feedback received.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Review driver ratings and feedback received."
    },
    "snippet": "def review_driver_ratings_feedback(\n    driver_id: str,\n    customer_reviews: List[Dict[str, Union[str, float]]]\n) -> Dict[str, Union[float, List[str]]]:\n    \"\"\"\n    Reviews driver ratings and feedback received.\n    \n    Parameters:\n        driver_id (str): The unique identifier of the driver.\n        customer_reviews (List[Dict[str, Union[str, float]]]): A list of dictionaries containing \n                                                               each customer's rating and feedback.\n                                                               Each dictionary should have 'rating' \n                                                               and 'feedback' keys.\n                                                               \n    Returns:\n        Dict[str, Union[float, List[str]]]: A dictionary with 'average_rating' as a key and the \n                                            average rating as a value, and 'feedbacks' as a key \n                                            and a list of feedbacks as a value.\n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def review_driver_ratings_feedback(\n    driver_id: str,\n    customer_reviews: List[Dict[str, Union[str, float]]]\n) -> Dict[str, Union[float, List[str]]]:\n    \"\"\"\n    Reviews driver ratings and feedback received.\n    \n    Parameters:\n        driver_id (str): The unique identifier of the driver.\n        customer_reviews (List[Dict[str, Union[str, float]]]): A list of dictionaries containing \n                                                               each customer's rating and feedback.\n                                                               Each dictionary should have 'rating' \n                                                               and 'feedback' keys.\n                                                               \n    Returns:\n        Dict[str, Union[float, List[str]]]: A dictionary with 'average_rating' as a key and the \n                                            average rating as a value, and 'feedbacks' as a key \n                                            and a list of feedbacks as a value.\n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "review_driver_ratings_feedback",
            "description": "Reviews driver ratings and feedback received.",
            "parameters": {
                "type": "object",
                "properties": {
                    "driver_id": {
                        "type": "string",
                        "description": "The unique identifier of the driver."
                    },
                    "customer_reviews": {
                        "type": "array",
                        "description": "A list of dictionaries containing each customer's rating and feedback. Each dictionary should have 'rating' and 'feedback' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "rating": {
                                    "type": "float"
                                },
                                "feedback": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "rating",
                                "feedback"
                            ]
                        }
                    }
                },
                "required": [
                    "driver_id",
                    "customer_reviews"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "average_rating": {
                        "type": "float",
                        "description": "The average rating."
                    },
                    "feedbacks": {
                        "type": "array",
                        "description": "A list of feedbacks.",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'review_driver_ratings_feedback', 'description': 'Reviews driver ratings and feedback received.', 'parameters': {'type': 'object', 'properties': {'driver_id': {'type': 'string', 'description': 'The unique identifier of the driver.'}, 'customer_reviews': {'type': 'array', 'description': \"A list of dictionaries containing each customer's rating and feedback. Each dictionary should have 'rating' and 'feedback' keys.\", 'items': {'type': 'object', 'properties': {'rating': {'type': 'float'}, 'feedback': {'type': 'string'}}, 'required': ['rating', 'feedback']}}}, 'required': ['driver_id', 'customer_reviews']}, 'returns': {'type': 'object', 'properties': {'average_rating': {'type': 'float', 'description': 'The average rating.'}, 'feedbacks': {'type': 'array', 'description': 'A list of feedbacks.', 'items': {'type': 'string'}}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you review the ratings and feedback I received as a driver?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. May I have your driver ID, please?"
            },
            {
                "role": "user",
                "text": "Yes, my driver ID is 'D12345'."
            },
            {
                "role": "assistant",
                "text": "Great, do you have the list of customer reviews you want me to review?"
            },
            {
                "role": "user",
                "text": "Yes, I have it here. ['rating: 4, feedback: Good driver', 'rating: 5, feedback: Excellent service', 'rating: 3, feedback: Could be better']"
            },
            {
                "role": "assistant",
                "text": "Perfect, I'm reviewing your driver ratings and feedback now."
            }
        ],
        "function_call": {
            "function_name": "review_driver_ratings_feedback",
            "parameters": {
                "driver_id": "D12345",
                "customer_reviews": [
                    {
                        "rating": 4,
                        "feedback": "Good driver"
                    },
                    {
                        "rating": 5,
                        "feedback": "Excellent service"
                    },
                    {
                        "rating": 3,
                        "feedback": "Could be better"
                    }
                ]
            }
        }
    }
}
{
    "function_id": "uber-driver-18",
    "task": "Check the status of a background check or document verification.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Check the status of a background check or document verification."
    },
    "snippet": "def check_status(\n    doc_id: str,\n    user_id: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Checks the status of a background check or document verification.\n\n    Parameters:\n        doc_id (str): The document or background check ID.\n        user_id (str): The user's ID.\n        \n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key and the status of the document or background check as a value.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def check_status(\n    doc_id: str,\n    user_id: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Checks the status of a background check or document verification.\n\n    Parameters:\n        doc_id (str): The document or background check ID.\n        user_id (str): The user's ID.\n        \n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key and the status of the document or background check as a value.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "check_status",
            "description": "Checks the status of a background check or document verification.",
            "parameters": {
                "type": "object",
                "properties": {
                    "doc_id": {
                        "type": "string",
                        "description": "The document or background check ID."
                    },
                    "user_id": {
                        "type": "string",
                        "description": "The user's ID."
                    }
                },
                "required": [
                    "doc_id",
                    "user_id"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "The status of the document or background check."
                    }
                },
                "required": [
                    "status"
                ]
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'check_status', 'description': 'Checks the status of a background check or document verification.', 'parameters': {'type': 'object', 'properties': {'doc_id': {'type': 'string', 'description': 'The document or background check ID.'}, 'user_id': {'type': 'string', 'description': \"The user's ID.\"}}, 'required': ['doc_id', 'user_id']}, 'returns': {'type': 'object', 'properties': {'status': {'type': 'string', 'description': 'The status of the document or background check.'}}, 'required': ['status']}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you verify the status of my document or background check?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. May I have the ID of the document or background check you're referring to and your user ID?"
            },
            {
                "role": "user",
                "text": "Yes, the document ID is '12345' and my user ID is '67890'."
            },
            {
                "role": "assistant",
                "text": "Great, I'm checking the status of your document or background check now."
            }
        ],
        "function_call": {
            "function_name": "check_status",
            "parameters": {
                "doc_id": "12345",
                "user_id": "67890"
            }
        }
    }
}
{
    "function_id": "uber-driver-19",
    "task": "Schedule or modify a vehicle inspection appointment.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Schedule or modify a vehicle inspection appointment."
    },
    "snippet": "def schedule_vehicle_inspection(\n    vehicle_id: str,\n    customer_id: str,\n    appointment_date: str,\n    change_appointment: bool = False,\n    new_appointment_date: str = None\n) -> Dict[str, str]:\n    \"\"\"\n    Schedules or modifies a vehicle inspection appointment.\n\n    Parameters:\n        vehicle_id (str): The id of the vehicle to be inspected.\n        customer_id (str): The id of the customer.\n        appointment_date (str): The date of the appointment in YYYY-MM-DD format.\n        change_appointment (bool): Whether the appointment needs to be changed. Default is False.\n        new_appointment_date (str): The new date of the appointment in YYYY-MM-DD format. This is needed if change_appointment is True.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'message' as a key and a confirmation or error message as a value.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def schedule_vehicle_inspection(\n    vehicle_id: str,\n    customer_id: str,\n    appointment_date: str,\n    change_appointment: bool = False,\n    new_appointment_date: str = None\n) -> Dict[str, str]:\n    \"\"\"\n    Schedules or modifies a vehicle inspection appointment.\n\n    Parameters:\n        vehicle_id (str): The id of the vehicle to be inspected.\n        customer_id (str): The id of the customer.\n        appointment_date (str): The date of the appointment in YYYY-MM-DD format.\n        change_appointment (bool): Whether the appointment needs to be changed. Default is False.\n        new_appointment_date (str): The new date of the appointment in YYYY-MM-DD format. This is needed if change_appointment is True.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'message' as a key and a confirmation or error message as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "schedule_vehicle_inspection",
            "description": "Schedules or modifies a vehicle inspection appointment.",
            "parameters": {
                "type": "object",
                "properties": {
                    "vehicle_id": {
                        "type": "string",
                        "description": "The id of the vehicle to be inspected."
                    },
                    "customer_id": {
                        "type": "string",
                        "description": "The id of the customer."
                    },
                    "appointment_date": {
                        "type": "string",
                        "description": "The date of the appointment in YYYY-MM-DD format."
                    },
                    "change_appointment": {
                        "type": "boolean",
                        "default": "false",
                        "description": "Whether the appointment needs to be changed."
                    },
                    "new_appointment_date": {
                        "type": "string",
                        "description": "The new date of the appointment in YYYY-MM-DD format. This is needed if change_appointment is True."
                    }
                },
                "required": [
                    "vehicle_id",
                    "customer_id",
                    "appointment_date"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "A confirmation or error message."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'schedule_vehicle_inspection', 'description': 'Schedules or modifies a vehicle inspection appointment.', 'parameters': {'type': 'object', 'properties': {'vehicle_id': {'type': 'string', 'description': 'The id of the vehicle to be inspected.'}, 'customer_id': {'type': 'string', 'description': 'The id of the customer.'}, 'appointment_date': {'type': 'string', 'description': 'The date of the appointment in YYYY-MM-DD format.'}, 'change_appointment': {'type': 'boolean', 'default': 'false', 'description': 'Whether the appointment needs to be changed.'}, 'new_appointment_date': {'type': 'string', 'description': 'The new date of the appointment in YYYY-MM-DD format. This is needed if change_appointment is True.'}}, 'required': ['vehicle_id', 'customer_id', 'appointment_date']}, 'returns': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'A confirmation or error message.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hi there, I need to schedule an inspection for my car?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can help with that. Can I have your vehicle id and customer id, please?"
            },
            {
                "role": "user",
                "text": "Yes, my vehicle id is 'V12345' and my customer id is 'C54321'."
            },
            {
                "role": "assistant",
                "text": "Great, I have that down. And when would you like to schedule the inspection?"
            },
            {
                "role": "user",
                "text": "Can we do it on 2022-01-30?"
            },
            {
                "role": "assistant",
                "text": "Alright, let me schedule the vehicle inspection for you on 2022-01-30."
            }
        ],
        "function_call": {
            "function_name": "schedule_vehicle_inspection",
            "parameters": {
                "vehicle_id": "V12345",
                "customer_id": "C54321",
                "appointment_date": "2022-01-30"
            }
        }
    }
}
{
    "function_id": "uber-driver-20",
    "task": "Enable or disable receiving ride requests in specific categories (e.g., UberXL, UberPool).",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Enable or disable receiving ride requests in specific categories (e.g., UberXL, UberPool)."
    },
    "snippet": "def modify_ride_request(\n    ride_category: str,\n    status: bool,\n) -> str:\n    \"\"\"\n    Enable or disable receiving ride requests in specific categories.\n    \n    Parameters:\n        ride_category (str): The ride category to modify (e.g., 'UberXL', 'UberPool').\n        status (bool): The status to set for receiving ride requests in the specific category. \n                      True for enabling and False for disabling.\n                                          \n    Returns:\n        str: A confirmation message indicating the updated status of ride requests for the given category.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def modify_ride_request(\n    ride_category: str,\n    status: bool,\n) -> str:\n    \"\"\"\n    Enable or disable receiving ride requests in specific categories.\n    \n    Parameters:\n        ride_category (str): The ride category to modify (e.g., 'UberXL', 'UberPool').\n        status (bool): The status to set for receiving ride requests in the specific category. \n                      True for enabling and False for disabling.\n                                          \n    Returns:\n        str: A confirmation message indicating the updated status of ride requests for the given category.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "modify_ride_request",
            "description": "Enable or disable receiving ride requests in specific categories.",
            "parameters": {
                "type": "object",
                "properties": {
                    "ride_category": {
                        "type": "string",
                        "description": "The ride category to modify (e.g., 'UberXL', 'UberPool')."
                    },
                    "status": {
                        "type": "boolean",
                        "description": "The status to set for receiving ride requests in the specific category. True for enabling and False for disabling."
                    }
                },
                "required": [
                    "ride_category",
                    "status"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "confirmation_message": {
                        "type": "string",
                        "description": "A confirmation message indicating the updated status of ride requests for the given category."
                    }
                }
            }
        }
    },
    "sample_metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'modify_ride_request', 'description': 'Enable or disable receiving ride requests in specific categories.', 'parameters': {'type': 'object', 'properties': {'ride_category': {'type': 'string', 'description': \"The ride category to modify (e.g., 'UberXL', 'UberPool').\"}, 'status': {'type': 'boolean', 'description': 'The status to set for receiving ride requests in the specific category. True for enabling and False for disabling.'}}, 'required': ['ride_category', 'status']}, 'returns': {'type': 'object', 'properties': {'confirmation_message': {'type': 'string', 'description': 'A confirmation message indicating the updated status of ride requests for the given category.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    },
    "sample": {
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you help me to modify the ride requests for UberXL?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Do you want to enable or disable receiving ride requests for UberXL?"
            },
            {
                "role": "user",
                "text": "I would like to disable it."
            },
            {
                "role": "assistant",
                "text": "Okay, I'm updating your settings now."
            }
        ],
        "function_call": {
            "function_name": "modify_ride_request",
            "parameters": {
                "ride_category": "UberXL",
                "status": false
            }
        }
    }
}
