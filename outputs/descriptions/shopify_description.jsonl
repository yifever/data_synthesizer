{
    "function_id": "shopify-1",
    "task": "Create a new product listing with details such as title, description, and price.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Create a new product listing with details such as title, description, and price."
    },
    "snippet": "def create_product_listing(\n    title: str,\n    description: str,\n    price: float\n) -> Dict[str, Union[str, float]]:\n    \"\"\"\n    Creates a new product listing with provided details such as title, description, and price.\n\n    Parameters:\n        title (str): The title of the product listing.\n        description (str): The description of the product.\n        price (float): The price of the product.\n        \n    Returns:\n        Dict[str, Union[str, float]]: A dictionary containing the product listing details. \n        The keys are 'title', 'description', and 'price'.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def create_product_listing(\n    title: str,\n    description: str,\n    price: float\n) -> Dict[str, Union[str, float]]:\n    \"\"\"\n    Creates a new product listing with provided details such as title, description, and price.\n\n    Parameters:\n        title (str): The title of the product listing.\n        description (str): The description of the product.\n        price (float): The price of the product.\n        \n    Returns:\n        Dict[str, Union[str, float]]: A dictionary containing the product listing details. \n        The keys are 'title', 'description', and 'price'.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "create_product_listing",
            "description": "Creates a new product listing with provided details such as title, description, and price.",
            "parameters": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "The title of the product listing."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the product."
                    },
                    "price": {
                        "type": "float",
                        "description": "The price of the product."
                    }
                },
                "required": [
                    "title",
                    "description",
                    "price"
                ]
            },
            "returns": {
                "type": "object",
                "description": "A dictionary containing the product listing details. The keys are 'title', 'description', and 'price'.",
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "price": {
                        "type": "float"
                    }
                }
            }
        }
    }
}
{
    "function_id": "shopify-2",
    "task": "Update an existing product listing including details like price, inventory, and tags.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Update an existing product listing including details like price, inventory, and tags."
    },
    "snippet": "def update_product_listing(\n    product_id: int,\n    new_price: float,\n    new_inventory: int,\n    new_tags: List[str],\n) -> Dict[str, Any]:\n    \"\"\"\n    Updates an existing product listing with new details.\n    \n    Parameters:\n        product_id (int): The ID of the product to update.\n        new_price (float): The new price of the product.\n        new_inventory (int): The new inventory count.\n        new_tags (List[str]): A list of new tags for the product.\n    \n    Returns:\n        Dict[str, Any]: A dictionary containing the updated product data.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def update_product_listing(\n    product_id: int,\n    new_price: float,\n    new_inventory: int,\n    new_tags: List[str],\n) -> Dict[str, Any]:\n    \"\"\"\n    Updates an existing product listing with new details.\n    \n    Parameters:\n        product_id (int): The ID of the product to update.\n        new_price (float): The new price of the product.\n        new_inventory (int): The new inventory count.\n        new_tags (List[str]): A list of new tags for the product.\n    \n    Returns:\n        Dict[str, Any]: A dictionary containing the updated product data.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": null
}
{
    "function_id": "shopify-3",
    "task": "Delete a product listing from the store.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Delete a product listing from the store."
    },
    "snippet": "def delete_product_listing(\n    product_id: int,\n    store_id: int\n) -> Dict[str, str]:\n    \"\"\"\n    Deletes a product listing from the store.\n    \n    Parameters:\n        product_id (int): The id of the product to be deleted.\n        store_id (int): The id of the store from which the product will be deleted.\n                                          \n    Returns:\n        Dict[str, str]: A dictionary containing a message about the status of the operation.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def delete_product_listing(\n    product_id: int,\n    store_id: int\n) -> Dict[str, str]:\n    \"\"\"\n    Deletes a product listing from the store.\n    \n    Parameters:\n        product_id (int): The id of the product to be deleted.\n        store_id (int): The id of the store from which the product will be deleted.\n                                          \n    Returns:\n        Dict[str, str]: A dictionary containing a message about the status of the operation.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "delete_product_listing",
            "description": "Deletes a product listing from the store.",
            "parameters": {
                "type": "object",
                "properties": {
                    "product_id": {
                        "type": "integer",
                        "description": "The id of the product to be deleted."
                    },
                    "store_id": {
                        "type": "integer",
                        "description": "The id of the store from which the product will be deleted."
                    }
                },
                "required": [
                    "product_id",
                    "store_id"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "A dictionary containing a message about the status of the operation."
                    }
                }
            }
        }
    }
}
{
    "function_id": "shopify-4",
    "task": "Create collections to categorize products.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Create collections to categorize products."
    },
    "snippet": "def categorize_products(\n    products: List[Dict[str, Union[str, float, int]]]\n) -> Dict[str, List[Dict[str, Union[str, float, int]]]]:\n    \"\"\"\n    Categorizes products into collections based on their type.\n\n    Parameters:\n        products (List[Dict[str, Union[str, float, int]]]): A list of dictionaries containing product details.\n                                                            Each dictionary should have 'name', 'type', 'price', and 'quantity' keys.\n\n    Returns:\n        Dict[str, List[Dict[str, Union[str, float, int]]]]: A dictionary where each key is a product type\n                                                            and the value is a list of products of that type.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def categorize_products(\n    products: List[Dict[str, Union[str, float, int]]]\n) -> Dict[str, List[Dict[str, Union[str, float, int]]]]:\n    \"\"\"\n    Categorizes products into collections based on their type.\n\n    Parameters:\n        products (List[Dict[str, Union[str, float, int]]]): A list of dictionaries containing product details.\n                                                            Each dictionary should have 'name', 'type', 'price', and 'quantity' keys.\n\n    Returns:\n        Dict[str, List[Dict[str, Union[str, float, int]]]]: A dictionary where each key is a product type\n                                                            and the value is a list of products of that type.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": null
}
{
    "function_id": "shopify-5",
    "task": "Add or remove products from existing collections.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Add or remove products from existing collections."
    },
    "snippet": "def modify_collection(\n    collection: Dict[str, List[str]],\n    action: str,\n    product_id: str,\n) -> Dict[str, List[str]]:\n    \"\"\"\n    Adds or removes a product from an existing collection and returns the updated collection.\n    \n    Parameters:\n        collection (Dict[str, List[str]]): The dictionary containing the collection.\n                                           Each key is a collection name and the value is a list of product ids.\n        action (str): The action to be executed. Possible values are \"add\" or \"remove\".\n        product_id (str): The id of the product to be added or removed.\n                                          \n    Returns:\n        Dict[str, List[str]]: The updated collection.\n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def modify_collection(\n    collection: Dict[str, List[str]],\n    action: str,\n    product_id: str,\n) -> Dict[str, List[str]]:\n    \"\"\"\n    Adds or removes a product from an existing collection and returns the updated collection.\n    \n    Parameters:\n        collection (Dict[str, List[str]]): The dictionary containing the collection.\n                                           Each key is a collection name and the value is a list of product ids.\n        action (str): The action to be executed. Possible values are \"add\" or \"remove\".\n        product_id (str): The id of the product to be added or removed.\n                                          \n    Returns:\n        Dict[str, List[str]]: The updated collection.\n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": null
}
{
    "function_id": "shopify-6",
    "task": "Update the storefront theme settings.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Update the storefront theme settings."
    },
    "snippet": "def update_storefront_theme_settings(\n    theme: str,\n    color_scheme: str,\n    font: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Updates the storefront theme settings and returns the new settings.\n    \n    Parameters:\n        theme (str): The new theme name.\n        color_scheme(str): The new color scheme (e.g. 'light', 'dark', 'custom').\n        font (str): The new font name.\n                      \n    Returns:\n        Dict[str, str]: A dictionary with 'theme', 'color_scheme', and 'font' as keys and the new settings as values.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def update_storefront_theme_settings(\n    theme: str,\n    color_scheme: str,\n    font: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Updates the storefront theme settings and returns the new settings.\n    \n    Parameters:\n        theme (str): The new theme name.\n        color_scheme(str): The new color scheme (e.g. 'light', 'dark', 'custom').\n        font (str): The new font name.\n                      \n    Returns:\n        Dict[str, str]: A dictionary with 'theme', 'color_scheme', and 'font' as keys and the new settings as values.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "update_storefront_theme_settings",
            "description": "Updates the storefront theme settings and returns the new settings.",
            "parameters": {
                "type": "object",
                "properties": {
                    "theme": {
                        "type": "string",
                        "description": "The new theme name."
                    },
                    "color_scheme": {
                        "type": "string",
                        "description": "The new color scheme (e.g. 'light', 'dark', 'custom')."
                    },
                    "font": {
                        "type": "string",
                        "description": "The new font name."
                    }
                },
                "required": [
                    "theme",
                    "color_scheme",
                    "font"
                ]
            },
            "returns": {
                "type": "object",
                "description": "A dictionary with 'theme', 'color_scheme', and 'font' as keys and the new settings as values.",
                "properties": {
                    "theme": {
                        "type": "string",
                        "description": "The new active theme name."
                    },
                    "color_scheme": {
                        "type": "string",
                        "description": "The new active color scheme."
                    },
                    "font": {
                        "type": "string",
                        "description": "The new active font name."
                    }
                }
            }
        }
    }
}
{
    "function_id": "shopify-7",
    "task": "Process and fulfill orders, marking them as completed.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Process and fulfill orders, marking them as completed."
    },
    "snippet": "def process_and_fulfill_orders(\n    orders: List[Dict[str, Union[str, int, float]]]\n) -> List[Dict[str, Union[str, bool]]]:\n    \"\"\"\n    Processes an order list, fulfills them and marks them as completed.\n    \n    Parameters:\n        orders (List[Dict[str, Union[str, int, float]]]): A list of dictionary representing orders. \n                                                          Each dictionary should have 'order_id', 'product_id', \n                                                          'quantity', 'price' and 'customer_id' keys.\n\n    Returns:\n        List[Dict[str, Union[str, bool]]]: A list of dictionaries containing order details and a 'completed' status.\n                                           Each dictionary will have 'order_id', 'customer_id' and 'completed' keys. 'completed' is a bool showing the fulfillment status of an order.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def process_and_fulfill_orders(\n    orders: List[Dict[str, Union[str, int, float]]]\n) -> List[Dict[str, Union[str, bool]]]:\n    \"\"\"\n    Processes an order list, fulfills them and marks them as completed.\n    \n    Parameters:\n        orders (List[Dict[str, Union[str, int, float]]]): A list of dictionary representing orders. \n                                                          Each dictionary should have 'order_id', 'product_id', \n                                                          'quantity', 'price' and 'customer_id' keys.\n\n    Returns:\n        List[Dict[str, Union[str, bool]]]: A list of dictionaries containing order details and a 'completed' status.\n                                           Each dictionary will have 'order_id', 'customer_id' and 'completed' keys. 'completed' is a bool showing the fulfillment status of an order.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "process_and_fulfill_orders",
            "description": "Processes an order list, fulfills them and marks them as completed.",
            "parameters": {
                "type": "array",
                "items": {
                    "type": "object",
                    "description": "A list of dictionary representing orders.",
                    "properties": {
                        "order_id": {
                            "type": "string"
                        },
                        "product_id": {
                            "type": "string"
                        },
                        "quantity": {
                            "type": "integer"
                        },
                        "price": {
                            "type": "float"
                        },
                        "customer_id": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "order_id",
                        "product_id",
                        "quantity",
                        "price",
                        "customer_id"
                    ]
                }
            },
            "returns": {
                "type": "array",
                "description": "A list of dictionaries containing order details and a 'completed' status.",
                "items": {
                    "type": "object",
                    "properties": {
                        "order_id": {
                            "type": "string"
                        },
                        "customer_id": {
                            "type": "string"
                        },
                        "completed": {
                            "type": "boolean",
                            "description": "The fulfillment status of an order."
                        }
                    },
                    "required": [
                        "order_id",
                        "customer_id",
                        "completed"
                    ]
                }
            }
        }
    }
}
{
    "function_id": "shopify-8",
    "task": "Generate and print shipping labels for fulfilled orders.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Generate and print shipping labels for fulfilled orders."
    },
    "snippet": "def generate_shipping_labels(\n    fulfilled_orders: List[Dict[str, Any]]\n) -> None:\n    \"\"\"\n    Generates and prints shipping labels for fulfilled orders.\n    \n    Parameters:\n        fulfilled_orders (List[Dict[str, Any]]): A list of dictionaries containing details of fulfilled orders.\n                                      Each dictionary should have 'order_id', 'customer_name', 'address' etc. keys.\n                                          \n    Returns:\n        None\n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def generate_shipping_labels(\n    fulfilled_orders: List[Dict[str, Any]]\n) -> None:\n    \"\"\"\n    Generates and prints shipping labels for fulfilled orders.\n    \n    Parameters:\n        fulfilled_orders (List[Dict[str, Any]]): A list of dictionaries containing details of fulfilled orders.\n                                      Each dictionary should have 'order_id', 'customer_name', 'address' etc. keys.\n                                          \n    Returns:\n        None\n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": null
}
{
    "function_id": "shopify-9",
    "task": "Create discount codes for sales and promotions.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Create discount codes for sales and promotions."
    },
    "snippet": "def generate_discount_codes(\n    num_codes: int,\n    discount_amount: float,\n    code_length: int,\n    code_prefix: str,\n) -> List[str]:\n    \"\"\"\n    Generate a specified number of unique discount codes for sales and promotions.\n\n    Parameters:\n        num_codes (int): The number of unique codes to generate.\n        discount_amount (float): The discount amount each code represents.\n        code_length (int): The length of the generated codes.\n        code_prefix (str): The string to prepend to each generated code.\n\n    Returns:\n        List[str]: A list of unique discount codes.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def generate_discount_codes(\n    num_codes: int,\n    discount_amount: float,\n    code_length: int,\n    code_prefix: str,\n) -> List[str]:\n    \"\"\"\n    Generate a specified number of unique discount codes for sales and promotions.\n\n    Parameters:\n        num_codes (int): The number of unique codes to generate.\n        discount_amount (float): The discount amount each code represents.\n        code_length (int): The length of the generated codes.\n        code_prefix (str): The string to prepend to each generated code.\n\n    Returns:\n        List[str]: A list of unique discount codes.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "generate_discount_codes",
            "description": "Generate a specified number of unique discount codes for sales and promotions.",
            "parameters": {
                "type": "object",
                "properties": {
                    "num_codes": {
                        "type": "integer",
                        "description": "The number of unique codes to generate."
                    },
                    "discount_amount": {
                        "type": "float",
                        "description": "The discount amount each code represents."
                    },
                    "code_length": {
                        "type": "integer",
                        "description": "The length of the generated codes."
                    },
                    "code_prefix": {
                        "type": "string",
                        "description": "The string to prepend to each generated code."
                    }
                },
                "required": [
                    "num_codes",
                    "discount_amount",
                    "code_length",
                    "code_prefix"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "List[str]": {
                        "type": "array",
                        "description": "A list of unique discount codes."
                    }
                }
            }
        }
    }
}
{
    "function_id": "shopify-10",
    "task": "Track and update the inventory levels of products.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Track and update the inventory levels of products."
    },
    "snippet": "def update_inventory(\n    product_id: str,\n    change_in_quantity: int,\n    inventory: Dict[str, int],\n) -> Dict[str, int]:\n    \"\"\"\n    Track and update the inventory levels of products.\n    \n    Parameters:\n        product_id (str): The unique identifier of the product whose inventory needs to be updated.\n        change_in_quantity (int): The change in quantity of the product. A positive value denotes addition and a negative value denotes subtraction.\n        inventory (Dict[str, int]): A dictionary representing the current state of the inventory. The keys are product IDs and the values are the current stock levels.\n                                 \n    Returns:\n        Dict[str, int]: A dictionary with updated inventory levels. The keys are product IDs and the values are the updated stock levels.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def update_inventory(\n    product_id: str,\n    change_in_quantity: int,\n    inventory: Dict[str, int],\n) -> Dict[str, int]:\n    \"\"\"\n    Track and update the inventory levels of products.\n    \n    Parameters:\n        product_id (str): The unique identifier of the product whose inventory needs to be updated.\n        change_in_quantity (int): The change in quantity of the product. A positive value denotes addition and a negative value denotes subtraction.\n        inventory (Dict[str, int]): A dictionary representing the current state of the inventory. The keys are product IDs and the values are the current stock levels.\n                                 \n    Returns:\n        Dict[str, int]: A dictionary with updated inventory levels. The keys are product IDs and the values are the updated stock levels.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "update_inventory",
            "description": "Track and update the inventory levels of products.",
            "parameters": {
                "type": "object",
                "properties": {
                    "product_id": {
                        "type": "string",
                        "description": "The unique identifier of the product whose inventory needs to be updated."
                    },
                    "change_in_quantity": {
                        "type": "integer",
                        "description": "The change in quantity of the product. A positive value denotes addition and a negative value denotes subtraction."
                    },
                    "inventory": {
                        "type": "object",
                        "description": "A dictionary representing the current state of the inventory. The keys are product IDs and the values are the current stock levels.",
                        "properties": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "product_id",
                    "change_in_quantity",
                    "inventory"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "inventory": {
                        "type": "object",
                        "description": "A dictionary with updated inventory levels. The keys are product IDs and the values are the updated stock levels."
                    }
                }
            }
        }
    }
}
{
    "function_id": "shopify-11",
    "task": "Import or export products and customer data in bulk.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Import or export products and customer data in bulk."
    },
    "snippet": "def import_export_data(\n    data_type: str,\n    action: str,\n    data: Union[Dict[str, Any], List[Dict[str, Any]]],\n) -> Union[Dict[str, Any], List[Dict[str, Any]]]:\n    \"\"\"\n    Imports or exports products and customer data in bulk.\n    \n    Parameters:\n        data_type (str): The type of data to import/export. Can be either 'products' or 'customers'.\n        action (str): The action to perform. Can be either 'import' or 'export'.\n        data (Union[Dict[str, Any], List[Dict[str, Any]]]): The data to import/export. This should be a list of dictionaries \n                                                           for 'import'. It will be ignored for 'export'.\n\n    Returns:\n        Union[Dict[str, Any], List[Dict[str, Any]]]: For 'import', returns a dictionary with 'status' as a key and the import status \n                                         as a value. For 'exports', returns a list of dictionaries \n                                         containing the exported data.\n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def import_export_data(\n    data_type: str,\n    action: str,\n    data: Union[Dict[str, Any], List[Dict[str, Any]]],\n) -> Union[Dict[str, Any], List[Dict[str, Any]]]:\n    \"\"\"\n    Imports or exports products and customer data in bulk.\n    \n    Parameters:\n        data_type (str): The type of data to import/export. Can be either 'products' or 'customers'.\n        action (str): The action to perform. Can be either 'import' or 'export'.\n        data (Union[Dict[str, Any], List[Dict[str, Any]]]): The data to import/export. This should be a list of dictionaries \n                                                           for 'import'. It will be ignored for 'export'.\n\n    Returns:\n        Union[Dict[str, Any], List[Dict[str, Any]]]: For 'import', returns a dictionary with 'status' as a key and the import status \n                                         as a value. For 'exports', returns a list of dictionaries \n                                         containing the exported data.\n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": null
}
{
    "function_id": "shopify-12",
    "task": "Manage customer accounts, including creation, update, and deletion.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Manage customer accounts, including creation, update, and deletion."
    },
    "snippet": "def manage_customer_account(\n    action: str,\n    customer_id: Optional[int],\n    customer_details: Optional[Dict[str, any]],\n) -> Dict[str, str]:\n    \"\"\"\n    Manages customer accounts, including creation, update, and deletion.\n\n    Parameters:\n        action (str): The action to be performed on the customer account. It should be either 'create', 'update', or 'delete'.\n        customer_id (Optional[int]): The ID of the customer. It is not needed when creating a new account.\n        customer_details (Optional[Dict[str, any]]): A dictionary containing customer details. \n                                                     It is needed when creating or updating an account.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'message' as a key and the result of the action performed as a value.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def manage_customer_account(\n    action: str,\n    customer_id: Optional[int],\n    customer_details: Optional[Dict[str, any]],\n) -> Dict[str, str]:\n    \"\"\"\n    Manages customer accounts, including creation, update, and deletion.\n\n    Parameters:\n        action (str): The action to be performed on the customer account. It should be either 'create', 'update', or 'delete'.\n        customer_id (Optional[int]): The ID of the customer. It is not needed when creating a new account.\n        customer_details (Optional[Dict[str, any]]): A dictionary containing customer details. \n                                                     It is needed when creating or updating an account.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'message' as a key and the result of the action performed as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": null
}
{
    "function_id": "shopify-13",
    "task": "View and analyze sales reports for performance insights.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "View and analyze sales reports for performance insights."
    },
    "snippet": "def analyze_sales_reports(\n    sales_data: pd.DataFrame\n) -> Dict[str, Any]:\n    \"\"\"\n    Analyzes the sales reports for performance insights and returns a dictionary of key performance indicators.\n    \n    Parameters:\n        sales_data (pd.DataFrame): A pandas DataFrame holding the sales data. It is expected to have\n                                   columns for 'product', 'quantity', 'revenue', and 'date'.\n                                  \n    Returns:\n        Dict[str, Any]: A dictionary containing key performance insights. This could include metrics \n                        like 'total_revenue', 'best_selling_product', 'worst_day_for_sales', etc.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def analyze_sales_reports(\n    sales_data: pd.DataFrame\n) -> Dict[str, Any]:\n    \"\"\"\n    Analyzes the sales reports for performance insights and returns a dictionary of key performance indicators.\n    \n    Parameters:\n        sales_data (pd.DataFrame): A pandas DataFrame holding the sales data. It is expected to have\n                                   columns for 'product', 'quantity', 'revenue', and 'date'.\n                                  \n    Returns:\n        Dict[str, Any]: A dictionary containing key performance insights. This could include metrics \n                        like 'total_revenue', 'best_selling_product', 'worst_day_for_sales', etc.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "analyze_sales_reports",
            "description": "Analyzes the sales reports for performance insights and returns a dictionary of key performance indicators.",
            "parameters": {
                "type": "object",
                "properties": {
                    "sales_data": {
                        "type": "pd.DataFrame",
                        "description": "A pandas DataFrame holding the sales data. It is expected to have columns for 'product', 'quantity', 'revenue', and 'date'."
                    }
                },
                "required": [
                    "sales_data"
                ]
            },
            "returns": {
                "type": "Dict[str, Any]",
                "description": "A dictionary containing key performance insights. This could include metrics like 'total_revenue', 'best_selling_product', 'worst_day_for_sales', etc."
            }
        }
    }
}
{
    "function_id": "shopify-14",
    "task": "Automatically calculate taxes for different regions.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Automatically calculate taxes for different regions."
    },
    "snippet": "def calculate_taxes(\n    income: float,\n    region: str,\n) -> float:\n    \"\"\"\n    Calculates the appropriate taxes based on income and regional tax rates.\n    \n    Parameters:\n        income (float): The person's total income.\n        region (str): The region in which the person resides.\n                                          \n    Returns:\n        float: The calculated taxable amount.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def calculate_taxes(\n    income: float,\n    region: str,\n) -> float:\n    \"\"\"\n    Calculates the appropriate taxes based on income and regional tax rates.\n    \n    Parameters:\n        income (float): The person's total income.\n        region (str): The region in which the person resides.\n                                          \n    Returns:\n        float: The calculated taxable amount.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "calculate_taxes",
            "description": "Calculates the appropriate taxes based on income and regional tax rates.",
            "parameters": {
                "type": "object",
                "properties": {
                    "income": {
                        "type": "float",
                        "description": "The person's total income."
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the person resides."
                    }
                },
                "required": [
                    "income",
                    "region"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "taxable_amount": {
                        "type": "float",
                        "description": "The calculated taxable amount."
                    }
                }
            }
        }
    }
}
{
    "function_id": "shopify-15",
    "task": "Manage and update store blog posts.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Manage and update store blog posts."
    },
    "snippet": "def manage_store_blog_posts(\n    post_id: str,\n    new_content: str,\n    action: str,\n    posts: Dict[str, str]\n) -> Dict[str, str]:\n    \"\"\"\n    Manages and updates the store blog posts.\n\n    Parameters:\n        post_id (str): The ID of the blog post to manage.\n        new_content (str): The new content to update the post with.\n        action (str): The action to take on the post ('update', 'delete').\n        posts (Dict[str, str]): A dictionary with the current blog posts.\n\n    Returns:\n        Dict[str, str]: A dictionary with the updated blog posts.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def manage_store_blog_posts(\n    post_id: str,\n    new_content: str,\n    action: str,\n    posts: Dict[str, str]\n) -> Dict[str, str]:\n    \"\"\"\n    Manages and updates the store blog posts.\n\n    Parameters:\n        post_id (str): The ID of the blog post to manage.\n        new_content (str): The new content to update the post with.\n        action (str): The action to take on the post ('update', 'delete').\n        posts (Dict[str, str]): A dictionary with the current blog posts.\n\n    Returns:\n        Dict[str, str]: A dictionary with the updated blog posts.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "manage_store_blog_posts",
            "description": "Manages and updates the store blog posts.",
            "parameters": {
                "type": "object",
                "properties": {
                    "post_id": {
                        "type": "string",
                        "description": "The ID of the blog post to manage."
                    },
                    "new_content": {
                        "type": "string",
                        "description": "The new content to update the post with."
                    },
                    "action": {
                        "type": "string",
                        "description": "The action to take on the post ('update', 'delete')."
                    },
                    "posts": {
                        "type": "object",
                        "description": "A dictionary with the current blog posts.",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "post_id",
                    "new_content",
                    "action",
                    "posts"
                ]
            },
            "returns": {
                "type": "object",
                "description": "A dictionary with the updated blog posts.",
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                }
            }
        }
    }
}
{
    "function_id": "shopify-16",
    "task": "Add or update product reviews and ratings.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Add or update product reviews and ratings."
    },
    "snippet": "def update_product_reviews(\n    product_id: int,\n    review: str,\n    rating: int,\n) -> Dict[str, str]:\n    \"\"\"\n    Updates or adds a product review and rating.\n\n    Parameters:\n        product_id (int): The ID of the product to be reviewed.\n        review (str): The review text.\n        rating (int): The product rating out of 5.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key and the status of the update operation as a value. Possible values are 'success' or 'failure'.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def update_product_reviews(\n    product_id: int,\n    review: str,\n    rating: int,\n) -> Dict[str, str]:\n    \"\"\"\n    Updates or adds a product review and rating.\n\n    Parameters:\n        product_id (int): The ID of the product to be reviewed.\n        review (str): The review text.\n        rating (int): The product rating out of 5.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key and the status of the update operation as a value. Possible values are 'success' or 'failure'.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "update_product_reviews",
            "description": "Updates or adds a product review and rating.",
            "parameters": {
                "type": "object",
                "properties": {
                    "product_id": {
                        "type": "integer",
                        "description": "The ID of the product to be reviewed."
                    },
                    "review": {
                        "type": "string",
                        "description": "The review text."
                    },
                    "rating": {
                        "type": "integer",
                        "description": "The product rating out of 5."
                    }
                },
                "required": [
                    "product_id",
                    "review",
                    "rating"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "The status of the update operation. Possible values are 'success' or 'failure'."
                    }
                }
            }
        }
    }
}
{
    "function_id": "shopify-17",
    "task": "Manage the customer wishlist functionality.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Manage the customer wishlist functionality."
    },
    "snippet": "def manage_customer_wishlist(\n    customer_id: int,\n    action: str,\n    product_id: Optional[int] = None\n) -> Dict[str, Union[str, bool]] :\n    \"\"\"\n    Manages the customer wishlist functionality, allowing to add or remove items from the wishlist.\n\n    Parameters:\n        customer_id (int): The unique identifier of the customer.\n        action (str): The action to be performed. Should be either 'add' or 'remove'.\n        product_id (Optional[int]): The unique identifier of the product to add or remove.\n                                    Required if action is 'add' or 'remove'.\n\n    Returns:\n        Dict[str, Union[str, bool]]: A dictionary with keys 'message' and 'success'. 'message' contains\n                                      information about the execution and 'success' is a boolean indicating whether the\n                                      action was successful or not.\n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def manage_customer_wishlist(\n    customer_id: int,\n    action: str,\n    product_id: Optional[int] = None\n) -> Dict[str, Union[str, bool]] :\n    \"\"\"\n    Manages the customer wishlist functionality, allowing to add or remove items from the wishlist.\n\n    Parameters:\n        customer_id (int): The unique identifier of the customer.\n        action (str): The action to be performed. Should be either 'add' or 'remove'.\n        product_id (Optional[int]): The unique identifier of the product to add or remove.\n                                    Required if action is 'add' or 'remove'.\n\n    Returns:\n        Dict[str, Union[str, bool]]: A dictionary with keys 'message' and 'success'. 'message' contains\n                                      information about the execution and 'success' is a boolean indicating whether the\n                                      action was successful or not.\n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "manage_customer_wishlist",
            "description": "Manages the customer wishlist functionality, allowing to add or remove items from the wishlist.",
            "parameters": {
                "type": "object",
                "properties": {
                    "customer_id": {
                        "type": "integer",
                        "description": "The unique identifier of the customer."
                    },
                    "action": {
                        "type": "string",
                        "description": "The action to be performed. Should be either 'add' or 'remove'."
                    },
                    "product_id": {
                        "type": "integer",
                        "description": "The unique identifier of the product to add or remove. Required if action is 'add' or 'remove'."
                    }
                },
                "required": [
                    "customer_id",
                    "action"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "Information about the execution."
                    },
                    "success": {
                        "type": "boolean",
                        "description": "A boolean indicating whether the action was successful or not."
                    }
                }
            }
        }
    }
}
{
    "function_id": "shopify-18",
    "task": "Set and manage staff roles and permissions.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Set and manage staff roles and permissions."
    },
    "snippet": "def manage_staff_roles(\n    staff_id: int,\n    new_role: str,\n    permissions: List[str],\n) -> Dict[str, str]:\n    \"\"\"\n    Sets and manages staff roles and permissions.\n    \n    Parameters:\n        staff_id (int): The identification number of the staff member.\n        new_role (str): The new role to be assigned to the staff member.\n        permissions (List[str]): A list of permissions to be granted with the new role.\n        \n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key, indicating whether the operation was successful or not, \n                        and 'message' as a key, providing further details on the operation's outcome.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def manage_staff_roles(\n    staff_id: int,\n    new_role: str,\n    permissions: List[str],\n) -> Dict[str, str]:\n    \"\"\"\n    Sets and manages staff roles and permissions.\n    \n    Parameters:\n        staff_id (int): The identification number of the staff member.\n        new_role (str): The new role to be assigned to the staff member.\n        permissions (List[str]): A list of permissions to be granted with the new role.\n        \n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key, indicating whether the operation was successful or not, \n                        and 'message' as a key, providing further details on the operation's outcome.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "manage_staff_roles",
            "description": "Sets and manages staff roles and permissions.",
            "parameters": {
                "type": "object",
                "properties": {
                    "staff_id": {
                        "type": "integer",
                        "description": "The identification number of the staff member."
                    },
                    "new_role": {
                        "type": "string",
                        "description": "The new role to be assigned to the staff member."
                    },
                    "permissions": {
                        "type": "array",
                        "description": "A list of permissions to be granted with the new role.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "staff_id",
                    "new_role",
                    "permissions"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Indicates whether the operation was successful or not."
                    },
                    "message": {
                        "type": "string",
                        "description": "Provides further details on the operation's outcome."
                    }
                }
            }
        }
    }
}
{
    "function_id": "shopify-19",
    "task": "Handle returns and refunds for orders.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Handle returns and refunds for orders."
    },
    "snippet": "def handle_returns_and_refunds(\n    order_id: str,\n    customer_id: str,\n    product_id: str,\n    refund_amount: float,\n) -> Dict[str, Any]:\n    \"\"\"\n    Handles returns and refunds for orders.\n    \n    Parameters:\n        order_id (str): The id of the order to be returned.\n        customer_id (str): The id of the customer making the return.\n        product_id (str): The id of the product being returned.\n        refund_amount (float): The amount to be refunded to the customer.\n\n    Returns:\n        Dict[str, Any]: A dictionary with the status and details of the return and refund \n                        request. This could contain keys like 'status', 'message', 'refund_amount',\n                        'order_id', 'customer_id', and 'product_id'.\n    \"\"\"\n    # Implementation goes here\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def handle_returns_and_refunds(\n    order_id: str,\n    customer_id: str,\n    product_id: str,\n    refund_amount: float,\n) -> Dict[str, Any]:\n    \"\"\"\n    Handles returns and refunds for orders.\n    \n    Parameters:\n        order_id (str): The id of the order to be returned.\n        customer_id (str): The id of the customer making the return.\n        product_id (str): The id of the product being returned.\n        refund_amount (float): The amount to be refunded to the customer.\n\n    Returns:\n        Dict[str, Any]: A dictionary with the status and details of the return and refund \n                        request. This could contain keys like 'status', 'message', 'refund_amount',\n                        'order_id', 'customer_id', and 'product_id'.\n    \"\"\"\n    # Implementation goes here\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "handle_returns_and_refunds",
            "description": "Handles returns and refunds for orders.",
            "parameters": {
                "type": "object",
                "properties": {
                    "order_id": {
                        "type": "string",
                        "description": "The id of the order to be returned."
                    },
                    "customer_id": {
                        "type": "string",
                        "description": "The id of the customer making the return."
                    },
                    "product_id": {
                        "type": "string",
                        "description": "The id of the product being returned."
                    },
                    "refund_amount": {
                        "type": "float",
                        "description": "The amount to be refunded to the customer."
                    }
                },
                "required": [
                    "order_id",
                    "customer_id",
                    "product_id",
                    "refund_amount"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "The status of the return and refund request."
                    },
                    "message": {
                        "type": "string",
                        "description": "Additional details about the return and refund request."
                    },
                    "refund_amount": {
                        "type": "float",
                        "description": "The actual amount refunded to the customer."
                    },
                    "order_id": {
                        "type": "string",
                        "description": "The id of the order that was returned."
                    },
                    "customer_id": {
                        "type": "string",
                        "description": "The id of the customer who made the return."
                    },
                    "product_id": {
                        "type": "string",
                        "description": "The id of the product that was returned."
                    }
                }
            }
        }
    }
}
{
    "function_id": "shopify-20",
    "task": "Integrate third-party payment gateways or update existing ones.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Integrate third-party payment gateways or update existing ones."
    },
    "snippet": "def integrate_payment_gateway(\n    payment_gateway: str,\n    config: Dict[str, Any]\n) -> bool:\n    \"\"\"\n    Integrates a new third-party payment gateway or updates an existing one.\n\n    Parameters:\n        payment_gateway (str): The name or identifier of the payment gateway service. \n                               Examples could be 'Stripe', 'Paypal', etc.\n\n        config (Dict[str, Any]): A dictionary carrying the configuration and settings needed \n                                 to interface with the payment gateway. This could include API keys, \n                                 credentials, URL endpoints, etc.\n\n    Returns: \n        bool: A boolean value indicating the success or failure of the integration/update process.\n    \"\"\"\n\ndef send_payment_request(\n    payment_data: Dict[str, Any],\n    payment_gateway: str\n) -> Dict[str, Any]:\n    \"\"\"\n    Sends a payment request to the specified payment gateway.\n    \n    Parameters:\n        payment_data (Dict[str, Any]): A dictionary containing the payment details such as amount, \n                                       currency, transaction ID, payer details etc. \n                                       \n        payment_gateway (str): Name or identifier of the payment gateway to which the payment \n                               request is being sent.\n                               \n    Returns:\n        Dict[str, Any]: A dictionary containing the response/status of the payment request from \n                        the payment gateway.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def integrate_payment_gateway(\n    payment_gateway: str,\n    config: Dict[str, Any]\n) -> bool:\n    \"\"\"\n    Integrates a new third-party payment gateway or updates an existing one.\n\n    Parameters:\n        payment_gateway (str): The name or identifier of the payment gateway service. \n                               Examples could be 'Stripe', 'Paypal', etc.\n\n        config (Dict[str, Any]): A dictionary carrying the configuration and settings needed \n                                 to interface with the payment gateway. This could include API keys, \n                                 credentials, URL endpoints, etc.\n\n    Returns: \n        bool: A boolean value indicating the success or failure of the integration/update process.\n    \"\"\"\n\ndef send_payment_request(\n    payment_data: Dict[str, Any],\n    payment_gateway: str\n) -> Dict[str, Any]:\n    \"\"\"\n    Sends a payment request to the specified payment gateway.\n    \n    Parameters:\n        payment_data (Dict[str, Any]): A dictionary containing the payment details such as amount, \n                                       currency, transaction ID, payer details etc. \n                                       \n        payment_gateway (str): Name or identifier of the payment gateway to which the payment \n                               request is being sent.\n                               \n    Returns:\n        Dict[str, Any]: A dictionary containing the response/status of the payment request from \n                        the payment gateway.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": null
}
{
    "function_id": "shopify-21",
    "task": "Schedule and manage flash sales or special events.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Schedule and manage flash sales or special events."
    },
    "snippet": "def schedule_flash_sale(\n    sale_start_time: str,\n    sale_end_time: str,\n    discount_percentage: float,\n    items_on_sale: List[Dict[str, str]],\n) -> Dict[str, str]:\n    \"\"\"\n    Schedule and manage flash sales or special events.\n\n    Parameters:\n        sale_start_time (str): The start time of the sale in the format 'YYYY-MM-DD HH:MM:SS'.\n        sale_end_time (str): The end time of the sale in the format 'YYYY-MM-DD HH:MM:SS'.\n        discount_percentage (float): The percentage of discount for the sale.\n        items_on_sale (List[Dict[str, str]]): A list of dictionaries where each dictionary represents an item on sale. \n                                               Each dictionary should have 'itemId' and 'itemName' keys.\n\n    Returns:\n        Dictionary with 'status' as a key and the status of the scheduling as a value.\n        Possible status: 'Sale scheduled', 'Failed to schedule sale.'\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def schedule_flash_sale(\n    sale_start_time: str,\n    sale_end_time: str,\n    discount_percentage: float,\n    items_on_sale: List[Dict[str, str]],\n) -> Dict[str, str]:\n    \"\"\"\n    Schedule and manage flash sales or special events.\n\n    Parameters:\n        sale_start_time (str): The start time of the sale in the format 'YYYY-MM-DD HH:MM:SS'.\n        sale_end_time (str): The end time of the sale in the format 'YYYY-MM-DD HH:MM:SS'.\n        discount_percentage (float): The percentage of discount for the sale.\n        items_on_sale (List[Dict[str, str]]): A list of dictionaries where each dictionary represents an item on sale. \n                                               Each dictionary should have 'itemId' and 'itemName' keys.\n\n    Returns:\n        Dictionary with 'status' as a key and the status of the scheduling as a value.\n        Possible status: 'Sale scheduled', 'Failed to schedule sale.'\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "schedule_flash_sale",
            "description": "Schedule and manage flash sales or special events.",
            "parameters": {
                "type": "object",
                "properties": {
                    "sale_start_time": {
                        "type": "string",
                        "description": "The start time of the sale in the format 'YYYY-MM-DD HH:MM:SS'."
                    },
                    "sale_end_time": {
                        "type": "string",
                        "description": "The end time of the sale in the format 'YYYY-MM-DD HH:MM:SS'."
                    },
                    "discount_percentage": {
                        "type": "float",
                        "description": "The percentage of discount for the sale."
                    },
                    "items_on_sale": {
                        "type": "array",
                        "description": "A list of dictionaries where each dictionary represents an item on sale. Each dictionary should have 'itemId' and 'itemName' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "itemId": {
                                    "type": "string"
                                },
                                "itemName": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "itemId",
                                "itemName"
                            ]
                        }
                    }
                },
                "required": [
                    "sale_start_time",
                    "sale_end_time",
                    "discount_percentage",
                    "items_on_sale"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "The status of the scheduling. Possible status: 'Sale scheduled', 'Failed to schedule sale.'"
                    }
                }
            }
        }
    }
}
{
    "function_id": "shopify-22",
    "task": "Set up and manage subscription-based products.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Set up and manage subscription-based products."
    },
    "snippet": "def manage_subscriptions(\n    product_id: str,\n    user_id: str,\n    subscription_start: str,\n    subscription_end: str,\n    frequency: str,\n) -> Dict[str, bool]:\n    \"\"\"\n    Sets up and manages subscription-based products.\n\n    Parameters:\n        product_id (str): The ID of the subscription-based product.\n        user_id (str): The ID of the user subscribing to the product.\n        subscription_start (str): The start date of the subscription in YYYY-MM-DD format.\n        subscription_end (str): The end date of the subscription in YYYY-MM-DD format.\n        frequency (str): The frequency of the subscription. Options are 'Monthly', 'Quarterly', 'Half-Yearly', 'Yearly'. \n\n    Returns:\n        Dict[str, bool]: A dictionary with 'subscription_status' as a key and the status of the subscription setup as a value.\n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def manage_subscriptions(\n    product_id: str,\n    user_id: str,\n    subscription_start: str,\n    subscription_end: str,\n    frequency: str,\n) -> Dict[str, bool]:\n    \"\"\"\n    Sets up and manages subscription-based products.\n\n    Parameters:\n        product_id (str): The ID of the subscription-based product.\n        user_id (str): The ID of the user subscribing to the product.\n        subscription_start (str): The start date of the subscription in YYYY-MM-DD format.\n        subscription_end (str): The end date of the subscription in YYYY-MM-DD format.\n        frequency (str): The frequency of the subscription. Options are 'Monthly', 'Quarterly', 'Half-Yearly', 'Yearly'. \n\n    Returns:\n        Dict[str, bool]: A dictionary with 'subscription_status' as a key and the status of the subscription setup as a value.\n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": null
}
{
    "function_id": "shopify-23",
    "task": "Send automated emails for abandoned cart recovery.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Send automated emails for abandoned cart recovery."
    },
    "snippet": "def send_abandoned_cart_recovery_email(\n    customer_email: str,\n    abandoned_cart_details: Dict[str, Any],\n) -> None:\n    \"\"\"\n    Sends an automated email to customers who have abandoned their shopping carts.\n\n    Parameters:\n        customer_email (str): The email address of the customer.\n        abandoned_cart_details (Dict[str, Any]): A dictionary containing details of the abandoned cart.\n                                                  It may include 'cart_id', 'items', 'total_price', etc.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def send_abandoned_cart_recovery_email(\n    customer_email: str,\n    abandoned_cart_details: Dict[str, Any],\n) -> None:\n    \"\"\"\n    Sends an automated email to customers who have abandoned their shopping carts.\n\n    Parameters:\n        customer_email (str): The email address of the customer.\n        abandoned_cart_details (Dict[str, Any]): A dictionary containing details of the abandoned cart.\n                                                  It may include 'cart_id', 'items', 'total_price', etc.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "send_abandoned_cart_recovery_email",
            "description": "Sends an automated email to customers who have abandoned their shopping carts.",
            "parameters": {
                "type": "object",
                "properties": {
                    "customer_email": {
                        "type": "string",
                        "description": "The email address of the customer."
                    },
                    "abandoned_cart_details": {
                        "type": "object",
                        "description": "A dictionary containing details of the abandoned cart. It may include 'cart_id', 'items', 'total_price', etc.",
                        "properties": {
                            "cart_id": {
                                "type": "string"
                            },
                            "items": {
                                "type": "array"
                            },
                            "total_price": {
                                "type": "float"
                            }
                        }
                    }
                },
                "required": [
                    "customer_email",
                    "abandoned_cart_details"
                ]
            },
            "returns": {
                "type": "null",
                "description": "This function does not return any value."
            }
        }
    }
}
{
    "function_id": "shopify-24",
    "task": "Integrate with social media platforms for product listing and advertising.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Integrate with social media platforms for product listing and advertising."
    },
    "snippet": "def integrate_social_media_marketing(\n    product_id: str,\n    social_media_platforms: List[str],\n    ad_content: str,\n    start_date: str,\n    end_date: str,\n) -> Dict[str, bool]:\n    \"\"\"\n    Lists a product for advertisement on given social media platforms and returns the status of each ad.\n    \n    Parameters:\n        product_id (str): The id of the product to be advertised.\n        social_media_platforms (List[str]): A list of social media platforms on which the product is to be listed.\n                                             Each entry should be a string representing the platform's name.\n        ad_content (str): The content for the advertisement.\n        start_date (str): The start date for the advertising campaign in YYYY-MM-DD format.\n        end_date (str): The end date for the advertising campaign in YYYY-MM-DD format.\n                                  \n    Returns:\n        Dict[str, bool]: A dictionary with each social media platform as a key and the success status of \n                         the ad listing as a value ('true' if successful, 'false' otherwise).\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def integrate_social_media_marketing(\n    product_id: str,\n    social_media_platforms: List[str],\n    ad_content: str,\n    start_date: str,\n    end_date: str,\n) -> Dict[str, bool]:\n    \"\"\"\n    Lists a product for advertisement on given social media platforms and returns the status of each ad.\n    \n    Parameters:\n        product_id (str): The id of the product to be advertised.\n        social_media_platforms (List[str]): A list of social media platforms on which the product is to be listed.\n                                             Each entry should be a string representing the platform's name.\n        ad_content (str): The content for the advertisement.\n        start_date (str): The start date for the advertising campaign in YYYY-MM-DD format.\n        end_date (str): The end date for the advertising campaign in YYYY-MM-DD format.\n                                  \n    Returns:\n        Dict[str, bool]: A dictionary with each social media platform as a key and the success status of \n                         the ad listing as a value ('true' if successful, 'false' otherwise).\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": null
}
{
    "function_id": "shopify-25",
    "task": "Manage SEO settings including meta descriptions and URL structures.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Manage SEO settings including meta descriptions and URL structures."
    },
    "snippet": "Here is the Python function snippet:\n\n```python\ndef manage_seo_settings(\n    url_structures: Dict[str, str],\n    meta_descriptions: Dict[str, str]\n) -> None:\n    \"\"\"\n    Manages SEO settings including meta descriptions and URL structures.\n\n    Parameters:\n        url_structures (Dict[str, str]): A dictionary of URL structures with keys as page identifiers \n                                         and values as the corresponding URL structures.\n        meta_descriptions (Dict[str, str]): A dictionary of meta descriptions with keys as page identifiers \n                                             and values as the corresponding meta descriptions.\n    \"\"\"\n```",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "Here is the Python function snippet:\n\n```python\ndef manage_seo_settings(\n    url_structures: Dict[str, str],\n    meta_descriptions: Dict[str, str]\n) -> None:\n    \"\"\"\n    Manages SEO settings including meta descriptions and URL structures.\n\n    Parameters:\n        url_structures (Dict[str, str]): A dictionary of URL structures with keys as page identifiers \n                                         and values as the corresponding URL structures.\n        meta_descriptions (Dict[str, str]): A dictionary of meta descriptions with keys as page identifiers \n                                             and values as the corresponding meta descriptions.\n    \"\"\"\n```",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": null
}
{
    "function_id": "shopify-26",
    "task": "Run and manage affiliate programs.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Run and manage affiliate programs."
    },
    "snippet": "def manage_affiliate_program(\n    program_details: Dict[str, Union[str, int, float]],\n    affiliates: List[Dict[str, Any]],\n    transactions: List[Dict[str, Any]]\n) -> Dict[str, Any]:\n    \"\"\"\n    Runs and manages affiliate programs.\n\n    Parameters:\n        program_details (Dict[str, Union[str, int, float]]): A dictionary containing details about the program.\n                                                             Fields could include 'name', 'commission_rate', etc.\n        affiliates (List[Dict[str, Any]]): A list of dictionaries, where each dictionary represents an affiliate.\n                                            Each affiliate's dictionary should have details like 'id', 'name', etc.\n        transactions (List[Dict[str, Any]]): A list of dictionaries, where each dictionary represents a transaction.\n                                               Each transaction's dictionary should have details like 'affiliate_id', 'sale_amount', etc.\n\n    Returns:\n        Dict[str, Any]: A dictionary with summary information about the managed affiliate program.\n                         This could include total sales, total commission paid out, etc.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def manage_affiliate_program(\n    program_details: Dict[str, Union[str, int, float]],\n    affiliates: List[Dict[str, Any]],\n    transactions: List[Dict[str, Any]]\n) -> Dict[str, Any]:\n    \"\"\"\n    Runs and manages affiliate programs.\n\n    Parameters:\n        program_details (Dict[str, Union[str, int, float]]): A dictionary containing details about the program.\n                                                             Fields could include 'name', 'commission_rate', etc.\n        affiliates (List[Dict[str, Any]]): A list of dictionaries, where each dictionary represents an affiliate.\n                                            Each affiliate's dictionary should have details like 'id', 'name', etc.\n        transactions (List[Dict[str, Any]]): A list of dictionaries, where each dictionary represents a transaction.\n                                               Each transaction's dictionary should have details like 'affiliate_id', 'sale_amount', etc.\n\n    Returns:\n        Dict[str, Any]: A dictionary with summary information about the managed affiliate program.\n                         This could include total sales, total commission paid out, etc.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "manage_affiliate_program",
            "description": "Runs and manages affiliate programs.",
            "parameters": {
                "type": "object",
                "properties": {
                    "program_details": {
                        "type": "object",
                        "description": "A dictionary containing details about the program. Fields could include 'name', 'commission_rate', etc.",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "commission_rate": {
                                "type": [
                                    "integer",
                                    "float"
                                ]
                            }
                        }
                    },
                    "affiliates": {
                        "type": "array",
                        "description": "A list of dictionaries, where each dictionary represents an affiliate. Each affiliate's dictionary should have details like 'id', 'name', etc.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string"
                                },
                                "name": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "id",
                                "name"
                            ]
                        }
                    },
                    "transactions": {
                        "type": "array",
                        "description": "A list of dictionaries, where each dictionary represents a transaction. Each transaction's dictionary should have details like 'affiliate_id', 'sale_amount', etc.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "affiliate_id": {
                                    "type": "string"
                                },
                                "sale_amount": {
                                    "type": [
                                        "integer",
                                        "float"
                                    ]
                                }
                            },
                            "required": [
                                "affiliate_id",
                                "sale_amount"
                            ]
                        }
                    }
                },
                "required": [
                    "program_details",
                    "affiliates",
                    "transactions"
                ]
            },
            "returns": {
                "type": "object",
                "description": "A dictionary with summary information about the managed affiliate program. This could include total sales, total commission paid out, etc.",
                "properties": {
                    "total_sales": {
                        "type": [
                            "integer",
                            "float"
                        ]
                    },
                    "total_commission": {
                        "type": [
                            "integer",
                            "float"
                        ]
                    }
                }
            }
        }
    }
}
