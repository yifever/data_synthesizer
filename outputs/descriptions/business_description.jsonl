{
    "func_id": "business-0",
    "task": "send a client an invoice",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "send a client an invoice"
    },
    "snippet": "def send_invoice(\n    client_id: str,\n    invoice_details: Dict[str, Any],\n) -> bool:\n    \"\"\"\n    Sends an invoice to a specific client.\n\n    Parameters:\n        client_id (str): The unique identifier of the client.\n        invoice_details (Dict[str, Any]): A dictionary containing invoice details. The structure\n                                          and contents of this dictionary can vary depending on\n                                          the invoicing system in use.\n\n    Returns:\n        bool: True if the invoice was successfully sent; False otherwise.\n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def send_invoice(\n    client_id: str,\n    invoice_details: Dict[str, Any],\n) -> bool:\n    \"\"\"\n    Sends an invoice to a specific client.\n\n    Parameters:\n        client_id (str): The unique identifier of the client.\n        invoice_details (Dict[str, Any]): A dictionary containing invoice details. The structure\n                                          and contents of this dictionary can vary depending on\n                                          the invoicing system in use.\n\n    Returns:\n        bool: True if the invoice was successfully sent; False otherwise.\n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": null
}
{
    "func_id": "business-1",
    "task": "schedule a meeting",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "schedule a meeting"
    },
    "snippet": "def schedule_meeting(\n    participant_emails: List[str],\n    meeting_date: str,\n    meeting_time: str,\n    meeting_subject: str,\n    meeting_body: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Schedules a meeting and returns the meeting details.\n    \n    Parameters:\n        participant_emails (List[str]): The emails of the participants to invite.\n        meeting_date (str): The date of the meeting in YYYY-MM-DD format.\n        meeting_time (str): The time of the meeting in HH:MM format.\n        meeting_subject (str): The subject of the meeting.\n        meeting_body (str): The body of the meeting invite.\n                                          \n    Returns:\n        Dict[str, str]: A dictionary with 'meeting_id', 'meeting_link' as keys and their respective details as values.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def schedule_meeting(\n    participant_emails: List[str],\n    meeting_date: str,\n    meeting_time: str,\n    meeting_subject: str,\n    meeting_body: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Schedules a meeting and returns the meeting details.\n    \n    Parameters:\n        participant_emails (List[str]): The emails of the participants to invite.\n        meeting_date (str): The date of the meeting in YYYY-MM-DD format.\n        meeting_time (str): The time of the meeting in HH:MM format.\n        meeting_subject (str): The subject of the meeting.\n        meeting_body (str): The body of the meeting invite.\n                                          \n    Returns:\n        Dict[str, str]: A dictionary with 'meeting_id', 'meeting_link' as keys and their respective details as values.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "schedule_meeting",
            "description": "Schedules a meeting and returns the meeting details.",
            "parameters": {
                "type": "object",
                "properties": {
                    "participant_emails": {
                        "type": "array",
                        "description": "The emails of the participants to invite.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "meeting_date": {
                        "type": "string",
                        "description": "The date of the meeting in YYYY-MM-DD format."
                    },
                    "meeting_time": {
                        "type": "string",
                        "description": "The time of the meeting in HH:MM format."
                    },
                    "meeting_subject": {
                        "type": "string",
                        "description": "The subject of the meeting."
                    },
                    "meeting_body": {
                        "type": "string",
                        "description": "The body of the meeting invite."
                    }
                },
                "required": [
                    "participant_emails",
                    "meeting_date",
                    "meeting_time",
                    "meeting_subject",
                    "meeting_body"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "meeting_id": {
                        "type": "string",
                        "description": "The id of the scheduled meeting."
                    },
                    "meeting_link": {
                        "type": "string",
                        "description": "The link to join the scheduled meeting."
                    }
                }
            }
        }
    }
}
{
    "func_id": "business-2",
    "task": "generate a sales report",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "generate a sales report"
    },
    "snippet": "def generate_sales_report(\n    sales_data: List[Dict[str, Union[str, int, float]]]\n) -> Dict[str, float]:\n    \"\"\"\n    Generates a sales report based on the given sales data.\n\n    Parameters:\n        sales_data (List[Dict[str, Union[str, int, float]]]): A list of dictionaries containing sales details. \n                                                              Each dictionary should have 'product_name', 'quantity', and 'price' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_sales' as a key and the total sales as a value.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def generate_sales_report(\n    sales_data: List[Dict[str, Union[str, int, float]]]\n) -> Dict[str, float]:\n    \"\"\"\n    Generates a sales report based on the given sales data.\n\n    Parameters:\n        sales_data (List[Dict[str, Union[str, int, float]]]): A list of dictionaries containing sales details. \n                                                              Each dictionary should have 'product_name', 'quantity', and 'price' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_sales' as a key and the total sales as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": null
}
{
    "func_id": "business-3",
    "task": "perform an employee evaluation",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "perform an employee evaluation"
    },
    "snippet": "def perform_employee_evaluation(\n    employee_id: str,\n    performance_metrics: Dict[str, float],\n    peer_reviews: List[Dict[str, str]]\n) -> Dict[str, Any]:\n    \"\"\"\n    Performs an employee evaluation based on performance metrics and peer reviews.\n    \n    Parameters:\n        employee_id (str): The ID of the employee to evaluate.\n        performance_metrics (Dict[str, float]): A dictionary containing performance metrics. \n                                                 This dictionary should contain keys like 'tasks_completed', 'project_success', etc.\n        peer_reviews (List[Dict[str, str]]): A list of dictionaries containing peer review details.\n                                              Each dictionary should have 'reviewer_id' and 'review_text' keys. \n                                              \n    Returns:\n        Dict[str, Any]: A dictionary with evaluation results. This could include keys like 'performance_score', \n                        'peer_review_feedback', 'overall_rating', etc.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def perform_employee_evaluation(\n    employee_id: str,\n    performance_metrics: Dict[str, float],\n    peer_reviews: List[Dict[str, str]]\n) -> Dict[str, Any]:\n    \"\"\"\n    Performs an employee evaluation based on performance metrics and peer reviews.\n    \n    Parameters:\n        employee_id (str): The ID of the employee to evaluate.\n        performance_metrics (Dict[str, float]): A dictionary containing performance metrics. \n                                                 This dictionary should contain keys like 'tasks_completed', 'project_success', etc.\n        peer_reviews (List[Dict[str, str]]): A list of dictionaries containing peer review details.\n                                              Each dictionary should have 'reviewer_id' and 'review_text' keys. \n                                              \n    Returns:\n        Dict[str, Any]: A dictionary with evaluation results. This could include keys like 'performance_score', \n                        'peer_review_feedback', 'overall_rating', etc.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": null
}
{
    "func_id": "business-4",
    "task": "create an account for a new customer",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "create an account for a new customer"
    },
    "snippet": "def create_account(\n    customer_name: str,\n    email: str,\n    password: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Creates an account for a new customer and returns the account details.\n    \n    Parameters:\n        customer_name (str): The customer's name.\n        email (str): The customer's email.\n        password (str): The customer's password.\n                                          \n    Returns:\n        Dict[str, str]: A dictionary containing the account details. \n                        It should have 'customer_name', 'email', and 'account_id' as keys.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def create_account(\n    customer_name: str,\n    email: str,\n    password: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Creates an account for a new customer and returns the account details.\n    \n    Parameters:\n        customer_name (str): The customer's name.\n        email (str): The customer's email.\n        password (str): The customer's password.\n                                          \n    Returns:\n        Dict[str, str]: A dictionary containing the account details. \n                        It should have 'customer_name', 'email', and 'account_id' as keys.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "create_account",
            "description": "Creates an account for a new customer and returns the account details.",
            "parameters": {
                "type": "object",
                "properties": {
                    "customer_name": {
                        "type": "string",
                        "description": "The customer's name."
                    },
                    "email": {
                        "type": "string",
                        "description": "The customer's email."
                    },
                    "password": {
                        "type": "string",
                        "description": "The customer's password."
                    }
                },
                "required": [
                    "customer_name",
                    "email",
                    "password"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "customer_name": {
                        "type": "string",
                        "description": "The customer's name."
                    },
                    "email": {
                        "type": "string",
                        "description": "The customer's email."
                    },
                    "account_id": {
                        "type": "string",
                        "description": "The unique identifier of the customer's account."
                    }
                },
                "required": [
                    "customer_name",
                    "email",
                    "account_id"
                ]
            }
        }
    }
}
{
    "func_id": "business-5",
    "task": "calculate payroll for someone",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "calculate payroll for someone"
    },
    "snippet": "def calculate_payroll(\n    hours_worked: int,\n    hourly_rate: float,\n) -> float:\n    \"\"\"\n    Calculates the total payroll for an employee based on the hours worked and hourly rate.\n    \n    Parameters:\n        hours_worked (int): The number of hours the employee has worked.\n        hourly_rate (float): The employee's rate per hour.\n                                          \n    Returns:\n        float: The total payroll amount for the employee.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def calculate_payroll(\n    hours_worked: int,\n    hourly_rate: float,\n) -> float:\n    \"\"\"\n    Calculates the total payroll for an employee based on the hours worked and hourly rate.\n    \n    Parameters:\n        hours_worked (int): The number of hours the employee has worked.\n        hourly_rate (float): The employee's rate per hour.\n                                          \n    Returns:\n        float: The total payroll amount for the employee.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": null
}
{
    "func_id": "business-6",
    "task": "calculate payroll for a team",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "calculate payroll for a team"
    },
    "snippet": "def calculate_payroll(\n    team: List[Dict[str, Union[str, int, float]]]\n) -> Dict[str, float]:\n    \"\"\"\n    Calculate the payroll for the given team.\n    \n    Parameters:\n        team (List[Dict[str, Union[str, int, float]]]): A list of dictionaries where each dictionary represents\n                                                        a team member and has keys 'name', 'hours_worked', \n                                                        and 'hourly_rate'.\n\n    Returns:\n        Dict[str, float]: A dictionary where each key is a team member's name and each value is the payroll \n                          amount for that team member.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def calculate_payroll(\n    team: List[Dict[str, Union[str, int, float]]]\n) -> Dict[str, float]:\n    \"\"\"\n    Calculate the payroll for the given team.\n    \n    Parameters:\n        team (List[Dict[str, Union[str, int, float]]]): A list of dictionaries where each dictionary represents\n                                                        a team member and has keys 'name', 'hours_worked', \n                                                        and 'hourly_rate'.\n\n    Returns:\n        Dict[str, float]: A dictionary where each key is a team member's name and each value is the payroll \n                          amount for that team member.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "calculate_payroll",
            "description": "Calculate the payroll for the given team.",
            "parameters": {
                "type": "array",
                "description": "A list of dictionaries where each dictionary represents a team member and has keys 'name', 'hours_worked', and 'hourly_rate'.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "The name of the team member."
                        },
                        "hours_worked": {
                            "type": [
                                "integer",
                                "float"
                            ],
                            "description": "The number of hours the team member has worked."
                        },
                        "hourly_rate": {
                            "type": [
                                "integer",
                                "float"
                            ],
                            "description": "The hourly rate for the team member."
                        }
                    },
                    "required": [
                        "name",
                        "hours_worked",
                        "hourly_rate"
                    ]
                }
            },
            "returns": {
                "type": "object",
                "description": "A dictionary where each key is a team member's name and each value is the payroll amount for that team member.",
                "properties": {
                    "team_member_pay": {
                        "type": "float"
                    }
                }
            }
        }
    }
}
{
    "func_id": "business-7",
    "task": "update inventory stock data",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "update inventory stock data"
    },
    "snippet": "def update_inventory_stock(\n    inventory_id: str,\n    quantity: int,\n) -> Dict[str, bool]:\n    \"\"\"\n    Updates the inventory stock data and returns whether the operation was successful.\n    \n    Parameters:\n        inventory_id (str): The id of the inventory item to be updated.\n        quantity (int): The new quantity of the inventory item.\n                                          \n    Returns:\n        Dict[str, bool]: A dictionary with 'update_success' as a key and the operation status as a value.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def update_inventory_stock(\n    inventory_id: str,\n    quantity: int,\n) -> Dict[str, bool]:\n    \"\"\"\n    Updates the inventory stock data and returns whether the operation was successful.\n    \n    Parameters:\n        inventory_id (str): The id of the inventory item to be updated.\n        quantity (int): The new quantity of the inventory item.\n                                          \n    Returns:\n        Dict[str, bool]: A dictionary with 'update_success' as a key and the operation status as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "update_inventory_stock",
            "description": "Updates the inventory stock data and returns whether the operation was successful.",
            "parameters": {
                "type": "object",
                "properties": {
                    "inventory_id": {
                        "type": "string",
                        "description": "The id of the inventory item to be updated."
                    },
                    "quantity": {
                        "type": "integer",
                        "description": "The new quantity of the inventory item."
                    }
                },
                "required": [
                    "inventory_id",
                    "quantity"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "update_success": {
                        "type": "boolean",
                        "description": "A dictionary with 'update_success' as a key and the operation status as a value."
                    }
                }
            }
        }
    }
}
{
    "func_id": "business-8",
    "task": "track the status of a shipment",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "track the status of a shipment"
    },
    "snippet": "def track_shipment_status(\n    tracking_number: str,\n    courier_service: str,\n) -> Dict[str, Union[str, datetime]]:\n    \"\"\"\n    Tracks a shipment by tracking number and courier service and returns the current status.\n    \n    Parameters:\n        tracking_number (str): The tracking number of the shipment.\n        courier_service (str): The courier service that is delivering the shipment.\n                              \n    Returns:\n        Dict[str, Union[str, datetime]]: A dictionary with 'status' as a key and the current status of the shipment,\n                                         and 'last_updated' as a key and the datetime when the status was last updated.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def track_shipment_status(\n    tracking_number: str,\n    courier_service: str,\n) -> Dict[str, Union[str, datetime]]:\n    \"\"\"\n    Tracks a shipment by tracking number and courier service and returns the current status.\n    \n    Parameters:\n        tracking_number (str): The tracking number of the shipment.\n        courier_service (str): The courier service that is delivering the shipment.\n                              \n    Returns:\n        Dict[str, Union[str, datetime]]: A dictionary with 'status' as a key and the current status of the shipment,\n                                         and 'last_updated' as a key and the datetime when the status was last updated.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "track_shipment_status",
            "description": "Tracks a shipment by tracking number and courier service and returns the current status.",
            "parameters": {
                "type": "object",
                "properties": {
                    "tracking_number": {
                        "type": "string",
                        "description": "The tracking number of the shipment."
                    },
                    "courier_service": {
                        "type": "string",
                        "description": "The courier service that is delivering the shipment."
                    }
                },
                "required": [
                    "tracking_number",
                    "courier_service"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "The current status of the shipment."
                    },
                    "last_updated": {
                        "type": "datetime",
                        "description": "The datetime when the status was last updated."
                    }
                }
            }
        }
    }
}
{
    "func_id": "business-9",
    "task": "assign a customer support ticket to an agent",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "assign a customer support ticket to an agent"
    },
    "snippet": "Here's a snippet of a python function that assigns a customer support ticket to an agent:\n\n```python\ndef assign_ticket_to_agent(\n    ticket_id: str,\n    agent_id: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Assigns a customer support ticket to an agent.\n    \n    Parameters:\n        ticket_id (str): The customer support ticket id.\n        agent_id (str): The id of the agent to assign the ticket to.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'ticket_id' and 'agent_id' as keys, and the corresponding ids as values, indicating the ticket is assigned to the agent.\n    \"\"\"\n```\nThis snippet defines a function \"assign_ticket_to_agent\" that takes two arguments, 'ticket_id' and 'agent_id', both strings representing the ids of the support ticket and agent respectively. The function returns a dictionary with 'ticket_id' and 'agent_id' as keys and their corresponding ids as values.",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "Here's a snippet of a python function that assigns a customer support ticket to an agent:\n\n```python\ndef assign_ticket_to_agent(\n    ticket_id: str,\n    agent_id: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Assigns a customer support ticket to an agent.\n    \n    Parameters:\n        ticket_id (str): The customer support ticket id.\n        agent_id (str): The id of the agent to assign the ticket to.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'ticket_id' and 'agent_id' as keys, and the corresponding ids as values, indicating the ticket is assigned to the agent.\n    \"\"\"\n```\nThis snippet defines a function \"assign_ticket_to_agent\" that takes two arguments, 'ticket_id' and 'agent_id', both strings representing the ids of the support ticket and agent respectively. The function returns a dictionary with 'ticket_id' and 'agent_id' as keys and their corresponding ids as values.",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "assign_ticket_to_agent",
            "description": "Assigns a customer support ticket to an agent.",
            "parameters": {
                "type": "object",
                "properties": {
                    "ticket_id": {
                        "type": "string",
                        "description": "The customer support ticket id."
                    },
                    "agent_id": {
                        "type": "string",
                        "description": "The id of the agent to assign the ticket to."
                    }
                },
                "required": [
                    "ticket_id",
                    "agent_id"
                ]
            },
            "returns": {
                "type": "object",
                "description": "A dictionary with 'ticket_id' and 'agent_id' as keys, and the corresponding ids as values, indicating the ticket is assigned to the agent.",
                "properties": {
                    "ticket_id": {
                        "type": "string"
                    },
                    "agent_id": {
                        "type": "string"
                    }
                }
            }
        }
    }
}
{
    "func_id": "business-10",
    "task": "generate a unique discount code for a customer for maketing promotions",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "generate a unique discount code for a customer for maketing promotions"
    },
    "snippet": "def generate_discount_code(\n    customer_id: str\n) -> str:\n    \"\"\"\n    Generates a unique discount code for a customer for marketing promotions.\n    \n    Parameters:\n        customer_id (str): The unique ID of the customer.\n        \n    Returns:\n        str: The unique discount code for the customer.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def generate_discount_code(\n    customer_id: str\n) -> str:\n    \"\"\"\n    Generates a unique discount code for a customer for marketing promotions.\n    \n    Parameters:\n        customer_id (str): The unique ID of the customer.\n        \n    Returns:\n        str: The unique discount code for the customer.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "generate_discount_code",
            "description": "Generates a unique discount code for a customer for marketing promotions.",
            "parameters": {
                "type": "object",
                "properties": {
                    "customer_id": {
                        "type": "string",
                        "description": "The unique ID of the customer."
                    }
                },
                "required": [
                    "customer_id"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "unique_discount_code": {
                        "type": "string",
                        "description": "The unique discount code for the customer."
                    }
                }
            }
        }
    }
}
{
    "func_id": "business-11",
    "task": "enable a customer's subscription to various services",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "enable a customer's subscription to various services"
    },
    "snippet": "def enable_customer_subscription(\n    customer_id: str,\n    service_list: List[str],\n) -> str:\n    \"\"\"\n    Enables a customer's subscription to various services.\n    \n    Parameters:\n        customer_id (str): The id of the customer.\n        service_list (List[str]): The list of services to subscribe to. Each element in the list should be the name of a service.\n                                          \n    Returns:\n        str: A string indicating the status of the operation.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def enable_customer_subscription(\n    customer_id: str,\n    service_list: List[str],\n) -> str:\n    \"\"\"\n    Enables a customer's subscription to various services.\n    \n    Parameters:\n        customer_id (str): The id of the customer.\n        service_list (List[str]): The list of services to subscribe to. Each element in the list should be the name of a service.\n                                          \n    Returns:\n        str: A string indicating the status of the operation.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "enable_customer_subscription",
            "description": "Enables a customer's subscription to various services.",
            "parameters": {
                "type": "object",
                "properties": {
                    "customer_id": {
                        "type": "string",
                        "description": "The id of the customer."
                    },
                    "service_list": {
                        "type": "array",
                        "description": "The list of services to subscribe to. Each element in the list should be the name of a service.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "customer_id",
                    "service_list"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "A string indicating the status of the operation."
                    }
                }
            }
        }
    }
}
{
    "func_id": "business-12",
    "task": "disable a customer's subscription to various services",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "disable a customer's subscription to various services"
    },
    "snippet": "def disable_subscription(\n    customer_id: str, \n    services: List[str]\n) -> Dict[str, bool]:\n    \"\"\"\n    Disables a customer's subscription to various services.\n\n    Parameters:\n        customer_id (str): The ID of the customer whose service is to be disabled.\n        services (List[str]): The list of services to disable for the customer.\n\n    Returns:\n        Dict[str, bool]: A dictionary with services as keys and the status of disabling as a value.\n                         If the disabling was successful, the value will be True. Otherwise, it will be False.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def disable_subscription(\n    customer_id: str, \n    services: List[str]\n) -> Dict[str, bool]:\n    \"\"\"\n    Disables a customer's subscription to various services.\n\n    Parameters:\n        customer_id (str): The ID of the customer whose service is to be disabled.\n        services (List[str]): The list of services to disable for the customer.\n\n    Returns:\n        Dict[str, bool]: A dictionary with services as keys and the status of disabling as a value.\n                         If the disabling was successful, the value will be True. Otherwise, it will be False.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": null
}
{
    "func_id": "business-13",
    "task": "modify a customer's subscription to various services",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "modify a customer's subscription to various services"
    },
    "snippet": "def modify_subscription(\n    customer_id: int,\n    service_id: int,\n    add_or_remove: str\n) -> Dict[str, str]:\n    \"\"\"\n    Modifies a customer's subscription to various services.\n\n    Parameters:\n        customer_id (int): The ID of the customer.\n        service_id (int): The ID of the service.\n        add_or_remove (str): A string indicating whether to \"add\" or \"remove\" the service.\n\n    Returns:\n        Dict[str, str]: A dictionary containing the result of the operation.\n                         The dictionary should have 'status' and 'message' as keys.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def modify_subscription(\n    customer_id: int,\n    service_id: int,\n    add_or_remove: str\n) -> Dict[str, str]:\n    \"\"\"\n    Modifies a customer's subscription to various services.\n\n    Parameters:\n        customer_id (int): The ID of the customer.\n        service_id (int): The ID of the service.\n        add_or_remove (str): A string indicating whether to \"add\" or \"remove\" the service.\n\n    Returns:\n        Dict[str, str]: A dictionary containing the result of the operation.\n                         The dictionary should have 'status' and 'message' as keys.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": null
}
{
    "func_id": "business-14",
    "task": "renew contracts for services and subscriptions that are expiring",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "renew contracts for services and subscriptions that are expiring"
    },
    "snippet": "def renew_contracts_and_subscriptions(\n    expiring_contracts: List[Dict[str, Union[str, datetime.date]]],\n) -> List[str]:\n    \"\"\"\n    Renews contracts for services and subscriptions that are expiring.\n    \n    Parameters:\n        expiring_contracts (List[Dict[str, Union[str, datetime.date]]]): \n            A list of dictionaries each representing a contract that is expiring.\n            Each dictionary should have 'contract_id' and 'expiry_date' keys.\n\n    Returns:\n        List[str]: A list of renewed contract ids.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def renew_contracts_and_subscriptions(\n    expiring_contracts: List[Dict[str, Union[str, datetime.date]]],\n) -> List[str]:\n    \"\"\"\n    Renews contracts for services and subscriptions that are expiring.\n    \n    Parameters:\n        expiring_contracts (List[Dict[str, Union[str, datetime.date]]]): \n            A list of dictionaries each representing a contract that is expiring.\n            Each dictionary should have 'contract_id' and 'expiry_date' keys.\n\n    Returns:\n        List[str]: A list of renewed contract ids.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": null
}
{
    "func_id": "business-15",
    "task": "perform a backup process of important business data",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "perform a backup process of important business data"
    },
    "snippet": "```python\ndef backup_business_data(\n    data_locations: List[str],\n    backup_location: str,\n    notification_email: str,\n) -> None:\n    \"\"\"\n    Performs a backup process of important business data.\n\n    Parameters:\n        data_locations (List[str]): A list of locations (paths) where the important business data is stored.\n        backup_location (str): The location (path) where the backup should be stored.\n        notification_email (str): The email address to notify once the backup process is complete.\n\n    Returns:\n        None\n    \"\"\"\n```",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "```python\ndef backup_business_data(\n    data_locations: List[str],\n    backup_location: str,\n    notification_email: str,\n) -> None:\n    \"\"\"\n    Performs a backup process of important business data.\n\n    Parameters:\n        data_locations (List[str]): A list of locations (paths) where the important business data is stored.\n        backup_location (str): The location (path) where the backup should be stored.\n        notification_email (str): The email address to notify once the backup process is complete.\n\n    Returns:\n        None\n    \"\"\"\n```",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "backup_business_data",
            "description": "Performs a backup process of important business data.",
            "parameters": {
                "type": "object",
                "properties": {
                    "data_locations": {
                        "type": "array",
                        "description": "A list of locations (paths) where the important business data is stored.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "backup_location": {
                        "type": "string",
                        "description": "The location (path) where the backup should be stored."
                    },
                    "notification_email": {
                        "type": "string",
                        "description": "The email address to notify once the backup process is complete."
                    }
                },
                "required": [
                    "data_locations",
                    "backup_location",
                    "notification_email"
                ]
            },
            "returns": {
                "type": "null",
                "description": "No value is returned by this function."
            }
        }
    }
}
{
    "func_id": "business-16",
    "task": "check the validity of a software license for a given product",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "check the validity of a software license for a given product"
    },
    "snippet": "def check_license_validity(\n    product_id: str,\n    license_key: str,\n) -> bool:\n    \"\"\"\n    Checks the validity of a software license for a given product.\n    \n    Parameters:\n        product_id (str): The identifier of the product.\n        license_key (str): The software license key to validate.\n\n    Returns:\n        bool: Returns True if the software license is valid, otherwise returns False.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def check_license_validity(\n    product_id: str,\n    license_key: str,\n) -> bool:\n    \"\"\"\n    Checks the validity of a software license for a given product.\n    \n    Parameters:\n        product_id (str): The identifier of the product.\n        license_key (str): The software license key to validate.\n\n    Returns:\n        bool: Returns True if the software license is valid, otherwise returns False.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "check_license_validity",
            "description": "Checks the validity of a software license for a given product.",
            "parameters": {
                "type": "object",
                "properties": {
                    "product_id": {
                        "type": "string",
                        "description": "The identifier of the product."
                    },
                    "license_key": {
                        "type": "string",
                        "description": "The software license key to validate."
                    }
                },
                "required": [
                    "product_id",
                    "license_key"
                ]
            },
            "returns": {
                "type": "boolean",
                "description": "Returns True if the software license is valid, otherwise returns False."
            }
        }
    }
}
{
    "func_id": "business-17",
    "task": "onboard a new employee and do things like generate a new id, new email account, etc.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "onboard a new employee and do things like generate a new id, new email account, etc."
    },
    "snippet": "```python\ndef onboard_new_employee(\n    first_name: str,\n    last_name: str,\n    department: str,\n    position: str\n) -> Dict[str, str]:\n    \"\"\"\n    Onboards a new employee and generates their new ID, email account, etc.\n    \n    Parameters:\n        first_name (str): The first name of the new employee.\n        last_name (str): The last name of the new employee.\n        department (str): The department the new employee will be working in.\n        position (str): The position/title of the new employee.\n                                          \n    Returns:\n        Dict[str, str]: A dictionary with 'employee_id', 'email_account' and other necessary details as keys \n        and their corresponding values.\n    \"\"\"\n```",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "```python\ndef onboard_new_employee(\n    first_name: str,\n    last_name: str,\n    department: str,\n    position: str\n) -> Dict[str, str]:\n    \"\"\"\n    Onboards a new employee and generates their new ID, email account, etc.\n    \n    Parameters:\n        first_name (str): The first name of the new employee.\n        last_name (str): The last name of the new employee.\n        department (str): The department the new employee will be working in.\n        position (str): The position/title of the new employee.\n                                          \n    Returns:\n        Dict[str, str]: A dictionary with 'employee_id', 'email_account' and other necessary details as keys \n        and their corresponding values.\n    \"\"\"\n```",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": null
}
{
    "func_id": "business-18",
    "task": "allocate resources like meeting rooms, equipment, and personnel for a project or task force",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "allocate resources like meeting rooms, equipment, and personnel for a project or task force"
    },
    "snippet": "def allocate_resources(\n    project_id: str,\n    meeting_rooms: List[str],\n    equipment: List[str],\n    personnel: List[Dict[str, str]]\n) -> Dict[str, str]:\n    \"\"\"\n    Allocates resources like meeting rooms, equipment, and personnel for a project or task force.\n\n    Parameters:\n        project_id (str): The identifier of the project or task force.\n        meeting_rooms (List[str]): A list of meeting rooms to allocate.\n        equipment (List[str]): A list of equipment to allocate.\n        personnel (List[Dict[str, str]]): A list of dictionaries containing personnel details.\n                                          Each dictionary should have 'name' and 'role' keys.\n                                          \n    Returns:\n        Dict[str, str]: A dictionary indicating the allocation status for each type of resource. \n                        The keys could be 'meeting_rooms', 'equipment', and 'personnel'.\n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def allocate_resources(\n    project_id: str,\n    meeting_rooms: List[str],\n    equipment: List[str],\n    personnel: List[Dict[str, str]]\n) -> Dict[str, str]:\n    \"\"\"\n    Allocates resources like meeting rooms, equipment, and personnel for a project or task force.\n\n    Parameters:\n        project_id (str): The identifier of the project or task force.\n        meeting_rooms (List[str]): A list of meeting rooms to allocate.\n        equipment (List[str]): A list of equipment to allocate.\n        personnel (List[Dict[str, str]]): A list of dictionaries containing personnel details.\n                                          Each dictionary should have 'name' and 'role' keys.\n                                          \n    Returns:\n        Dict[str, str]: A dictionary indicating the allocation status for each type of resource. \n                        The keys could be 'meeting_rooms', 'equipment', and 'personnel'.\n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": null
}
{
    "func_id": "business-19",
    "task": "submit timesheets for employees, either for approval or archival",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "submit timesheets for employees, either for approval or archival"
    },
    "snippet": "def submit_timesheets(\n    employees: List[Dict[str, Any]],\n    action: str,\n    date_range: Tuple[str, str]\n) -> Dict[str, str]:\n    \"\"\"\n    Submits timesheets for employees, either for approval or archival.\n\n    Parameters:\n        employees (List[Dict[str, Any]]): A list of dictionaries containing employee details.\n                                          Each dictionary should have 'name' and 'timesheet' keys.\n        action (str): The action to perform - 'approval' or 'archival'.\n        date_range (Tuple[str, str]): A tuple containing the start and end date in YYYY-MM-DD format \n                                      for which the timesheets are to be submitted.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key and the operation status as a value. \n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def submit_timesheets(\n    employees: List[Dict[str, Any]],\n    action: str,\n    date_range: Tuple[str, str]\n) -> Dict[str, str]:\n    \"\"\"\n    Submits timesheets for employees, either for approval or archival.\n\n    Parameters:\n        employees (List[Dict[str, Any]]): A list of dictionaries containing employee details.\n                                          Each dictionary should have 'name' and 'timesheet' keys.\n        action (str): The action to perform - 'approval' or 'archival'.\n        date_range (Tuple[str, str]): A tuple containing the start and end date in YYYY-MM-DD format \n                                      for which the timesheets are to be submitted.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key and the operation status as a value. \n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "submit_timesheets",
            "description": "Submits timesheets for employees, either for approval or archival.",
            "parameters": {
                "type": "object",
                "properties": {
                    "employees": {
                        "type": "array",
                        "description": "A list of dictionaries containing employee details. Each dictionary should have 'name' and 'timesheet' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "timesheet": {
                                    "type": "any"
                                }
                            },
                            "required": [
                                "name",
                                "timesheet"
                            ]
                        }
                    },
                    "action": {
                        "type": "string",
                        "description": "The action to perform - 'approval' or 'archival'."
                    },
                    "date_range": {
                        "type": "object",
                        "description": "A tuple containing the start and end date in YYYY-MM-DD format for which the timesheets are to be submitted.",
                        "properties": {
                            "start_date": {
                                "type": "string",
                                "description": "The start date in YYYY-MM-DD format."
                            },
                            "end_date": {
                                "type": "string",
                                "description": "The end date in YYYY-MM-DD format."
                            }
                        },
                        "required": [
                            "start_date",
                            "end_date"
                        ]
                    }
                },
                "required": [
                    "employees",
                    "action",
                    "date_range"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "A dictionary with 'status' as a key and the operation status as a value."
                    }
                }
            }
        }
    }
}
{
    "func_id": "business-20",
    "task": "calculate and distribute performance-based incentives or bonuses to employees",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "calculate and distribute performance-based incentives or bonuses to employees"
    },
    "snippet": "def calculate_and_distribute_bonuses(\n    employees: List[Dict[str, Union[str, int, float]]],\n    performance_scores: Dict[str, float]\n) -> Dict[str, float]:\n    \"\"\"\n    Calculates and distributes performance-based incentives or bonuses to employees.\n\n    Parameters:\n        employees (List[Dict[str, Union[str, int, float]]]): \n            A list of dictionaries containing employee details. \n            Each dictionary should have 'employee_id', 'name' and 'base_salary' keys.\n        \n        performance_scores (Dict[str, float]): \n            A dictionary with employee_ids as keys and their \n            corresponding performance scores as values. \n\n    Returns:\n        Dict[str, float]: \n            A dictionary with employee_ids as keys and the \n            calculated bonus amount as the corresponding value.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def calculate_and_distribute_bonuses(\n    employees: List[Dict[str, Union[str, int, float]]],\n    performance_scores: Dict[str, float]\n) -> Dict[str, float]:\n    \"\"\"\n    Calculates and distributes performance-based incentives or bonuses to employees.\n\n    Parameters:\n        employees (List[Dict[str, Union[str, int, float]]]): \n            A list of dictionaries containing employee details. \n            Each dictionary should have 'employee_id', 'name' and 'base_salary' keys.\n        \n        performance_scores (Dict[str, float]): \n            A dictionary with employee_ids as keys and their \n            corresponding performance scores as values. \n\n    Returns:\n        Dict[str, float]: \n            A dictionary with employee_ids as keys and the \n            calculated bonus amount as the corresponding value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "calculate_and_distribute_bonuses",
            "description": "Calculates and distributes performance-based incentives or bonuses to employees.",
            "parameters": {
                "type": "object",
                "properties": {
                    "employees": {
                        "type": "array",
                        "description": "A list of dictionaries containing employee details. Each dictionary should have 'employee_id', 'name' and 'base_salary' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "employee_id": {
                                    "type": "string"
                                },
                                "name": {
                                    "type": "string"
                                },
                                "base_salary": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "employee_id",
                                "name",
                                "base_salary"
                            ]
                        }
                    },
                    "performance_scores": {
                        "type": "object",
                        "description": "A dictionary with employee_ids as keys and their corresponding performance scores as values.",
                        "additionalProperties": {
                            "type": "float"
                        }
                    }
                },
                "required": [
                    "employees",
                    "performance_scores"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "bonus_amount": {
                        "type": "float",
                        "description": "A dictionary with employee_ids as keys and the calculated bonus amount as the corresponding value."
                    }
                }
            }
        }
    }
}
{
    "func_id": "business-21",
    "task": "generate employee shift schedules based on availability and workload",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "generate employee shift schedules based on availability and workload"
    },
    "snippet": "def generate_shift_schedule(\n    availability: Dict[str, List[str]],\n    workload: Dict[str, int],\n) -> Dict[str, List[str]]:\n    \"\"\"\n    Generates employee shift schedules based on the provided availability and workload.\n\n    Parameters:\n        availability (Dict[str, List[str]]): A dictionary object where each key is an employee's name\n                                             and the value is a list of strings representing the days of\n                                             the week when the employee is available.\n\n        workload (Dict[str, int]): A dictionary object where each key is a day of the week and the value \n                                    is an integer representing the total number of shifts required for\n                                    that day.\n\n    Returns:\n        Dict[str, List[str]]: A dictionary object where each key is an employee's name and the value\n                               is a list of strings representing the sorted work schedule for that \n                               employee based on their availability and required workload.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def generate_shift_schedule(\n    availability: Dict[str, List[str]],\n    workload: Dict[str, int],\n) -> Dict[str, List[str]]:\n    \"\"\"\n    Generates employee shift schedules based on the provided availability and workload.\n\n    Parameters:\n        availability (Dict[str, List[str]]): A dictionary object where each key is an employee's name\n                                             and the value is a list of strings representing the days of\n                                             the week when the employee is available.\n\n        workload (Dict[str, int]): A dictionary object where each key is a day of the week and the value \n                                    is an integer representing the total number of shifts required for\n                                    that day.\n\n    Returns:\n        Dict[str, List[str]]: A dictionary object where each key is an employee's name and the value\n                               is a list of strings representing the sorted work schedule for that \n                               employee based on their availability and required workload.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "generate_shift_schedule",
            "description": "Generates employee shift schedules based on the provided availability and workload.",
            "parameters": {
                "type": "object",
                "properties": {
                    "availability": {
                        "type": "object",
                        "description": "A dictionary object where each key is an employee's name and the value is a list of strings representing the days of the week when the employee is available."
                    },
                    "workload": {
                        "type": "object",
                        "description": "A dictionary object where each key is a day of the week and the value is an integer representing the total number of shifts required for that day."
                    }
                },
                "required": [
                    "availability",
                    "workload"
                ]
            },
            "returns": {
                "type": "object",
                "description": "A dictionary object where each key is an employee's name and the value is a list of strings representing the sorted work schedule for that employee based on their availability and required workload.",
                "properties": {
                    "shift_schedule": {
                        "type": "object",
                        "description": "A dictionary object where each key is an employee's name and the value is a list of strings representing the sorted work schedule for that employee."
                    }
                }
            }
        }
    }
}
{
    "func_id": "business-22",
    "task": "create and approve budgets for different departments or projects",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "create and approve budgets for different departments or projects"
    },
    "snippet": "def create_and_approve_budgets(\n    budgets: Dict[str, float],\n    departments_or_projects: List[str],\n) -> Dict[str, float]:\n    \"\"\"\n    Creates and approves budgets for different departments or projects.\n    \n    Parameters:\n        budgets (Dict[str, float]): A dictionary with the budget amounts, \n                                    where each key is a department or project, \n                                    and the value is the corresponding budget.\n        departments_or_projects (List[str]): A list of department or project names.\n                                     \n    Returns:\n        Dict[str, float]: A dictionary with the approved budgets,\n                          where each key is a department or project, \n                          and the value is the corresponding approved budget.\n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def create_and_approve_budgets(\n    budgets: Dict[str, float],\n    departments_or_projects: List[str],\n) -> Dict[str, float]:\n    \"\"\"\n    Creates and approves budgets for different departments or projects.\n    \n    Parameters:\n        budgets (Dict[str, float]): A dictionary with the budget amounts, \n                                    where each key is a department or project, \n                                    and the value is the corresponding budget.\n        departments_or_projects (List[str]): A list of department or project names.\n                                     \n    Returns:\n        Dict[str, float]: A dictionary with the approved budgets,\n                          where each key is a department or project, \n                          and the value is the corresponding approved budget.\n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "create_and_approve_budgets",
            "description": "Creates and approves budgets for different departments or projects.",
            "parameters": {
                "type": "object",
                "properties": {
                    "budgets": {
                        "type": "object",
                        "description": "A dictionary with the budget amounts, where each key is a department or project, and the value is the corresponding budget.",
                        "additionalProperties": {
                            "type": "float"
                        }
                    },
                    "departments_or_projects": {
                        "type": "array",
                        "description": "A list of department or project names.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "budgets",
                    "departments_or_projects"
                ]
            },
            "returns": {
                "type": "object",
                "description": "A dictionary with the approved budgets, where each key is a department or project, and the value is the corresponding approved budget.",
                "additionalProperties": {
                    "type": "float"
                }
            }
        }
    }
}
