{
    "function_id": "ubereats-1",
    "task": "Accept a new delivery request.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Accept a new delivery request."
    },
    "snippet": "def accept_delivery_request(\n    delivery_id: int,\n    client_id: int,\n    pickup_location: str, \n    delivery_location: str, \n    delivery_date: str, \n    delivery_contents: Dict[str, str],\n    delivery_instructions: Optional[str] = None\n) -> str:\n    \"\"\"\n    Accepts a new delivery request and returns a confirmation message.\n\n    Parameters:\n        delivery_id (int): The unique ID for this delivery.\n        client_id (int): The unique ID for the client requesting the delivery.\n        pickup_location (str): The pickup location for the delivery.\n        delivery_location (str): The delivery location.\n        delivery_date (str): The delivery date in YYYY-MM-DD format.\n        delivery_contents (Dict[str, str]): A dictionary containing delivery content details. Keys may vary depending on the specifics of the delivery.\n        delivery_instructions (Optional[str]): Additional client instructions for the delivery.\n\n    Returns:\n        str: A confirmation message that the delivery request has been accepted.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def accept_delivery_request(\n    delivery_id: int,\n    client_id: int,\n    pickup_location: str, \n    delivery_location: str, \n    delivery_date: str, \n    delivery_contents: Dict[str, str],\n    delivery_instructions: Optional[str] = None\n) -> str:\n    \"\"\"\n    Accepts a new delivery request and returns a confirmation message.\n\n    Parameters:\n        delivery_id (int): The unique ID for this delivery.\n        client_id (int): The unique ID for the client requesting the delivery.\n        pickup_location (str): The pickup location for the delivery.\n        delivery_location (str): The delivery location.\n        delivery_date (str): The delivery date in YYYY-MM-DD format.\n        delivery_contents (Dict[str, str]): A dictionary containing delivery content details. Keys may vary depending on the specifics of the delivery.\n        delivery_instructions (Optional[str]): Additional client instructions for the delivery.\n\n    Returns:\n        str: A confirmation message that the delivery request has been accepted.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "accept_delivery_request",
            "description": "Accepts a new delivery request and returns a confirmation message.",
            "parameters": {
                "type": "object",
                "properties": {
                    "delivery_id": {
                        "type": "integer",
                        "description": "The unique ID for this delivery."
                    },
                    "client_id": {
                        "type": "integer",
                        "description": "The unique ID for the client requesting the delivery."
                    },
                    "pickup_location": {
                        "type": "string",
                        "description": "The pickup location for the delivery."
                    },
                    "delivery_location": {
                        "type": "string",
                        "description": "The delivery location."
                    },
                    "delivery_date": {
                        "type": "string",
                        "description": "The delivery date in YYYY-MM-DD format."
                    },
                    "delivery_contents": {
                        "type": "object",
                        "description": "A dictionary containing delivery content details. Keys may vary depending on the specifics of the delivery.",
                        "properties": {}
                    },
                    "delivery_instructions": {
                        "type": "string",
                        "description": "Additional client instructions for the delivery."
                    }
                },
                "required": [
                    "delivery_id",
                    "client_id",
                    "pickup_location",
                    "delivery_location",
                    "delivery_date",
                    "delivery_contents"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "confirmation_message": {
                        "type": "string",
                        "description": "A confirmation message that the delivery request has been accepted."
                    }
                }
            }
        }
    }
}
{
    "function_id": "ubereats-2",
    "task": "Navigate to the restaurant for food pickup.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Navigate to the restaurant for food pickup."
    },
    "snippet": "def navigate_to_restaurant_for_food_pickup(\n    restaurant_location: str,\n    current_location: str\n) -> str:\n    \"\"\"\n    Navigates to the specified restaurant for food pickup.\n\n    Parameters:\n        restaurant_location (str): The location of the restaurant for food pickup.\n        current_location (str): The current location of the user.\n\n    Returns:\n        str: A string containing the direction guidance to the restaurant.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def navigate_to_restaurant_for_food_pickup(\n    restaurant_location: str,\n    current_location: str\n) -> str:\n    \"\"\"\n    Navigates to the specified restaurant for food pickup.\n\n    Parameters:\n        restaurant_location (str): The location of the restaurant for food pickup.\n        current_location (str): The current location of the user.\n\n    Returns:\n        str: A string containing the direction guidance to the restaurant.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "navigate_to_restaurant_for_food_pickup",
            "description": "Navigates to the specified restaurant for food pickup.",
            "parameters": {
                "type": "object",
                "properties": {
                    "restaurant_location": {
                        "type": "string",
                        "description": "The location of the restaurant for food pickup."
                    },
                    "current_location": {
                        "type": "string",
                        "description": "The current location of the user."
                    }
                },
                "required": [
                    "restaurant_location",
                    "current_location"
                ]
            },
            "returns": {
                "type": "string",
                "description": "A string containing the direction guidance to the restaurant."
            }
        }
    }
}
{
    "function_id": "ubereats-3",
    "task": "Confirm the pickup of the food items from the restaurant.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Confirm the pickup of the food items from the restaurant."
    },
    "snippet": "def confirm_pickup(\n    restaurant_name: str, \n    order_id: str\n) -> Dict[str, bool]:\n    \"\"\"\n    Confirms the pickup of the food items from the restaurant.\n\n    Parameters:\n        restaurant_name (str): The name of the restaurant from where the food was ordered.\n        order_id (str): The unique identifier for the order.\n\n    Returns:\n        Dict[str, bool]: A dictionary with 'pickup_confirmed' as a key and a boolean as a value. True if the pickup\n                         was successful, False otherwise.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def confirm_pickup(\n    restaurant_name: str, \n    order_id: str\n) -> Dict[str, bool]:\n    \"\"\"\n    Confirms the pickup of the food items from the restaurant.\n\n    Parameters:\n        restaurant_name (str): The name of the restaurant from where the food was ordered.\n        order_id (str): The unique identifier for the order.\n\n    Returns:\n        Dict[str, bool]: A dictionary with 'pickup_confirmed' as a key and a boolean as a value. True if the pickup\n                         was successful, False otherwise.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": null
}
{
    "function_id": "ubereats-4",
    "task": "Notify the customer about the estimated delivery time.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Notify the customer about the estimated delivery time."
    },
    "snippet": "def notify_estimated_delivery_time(\n    customer_id: str,\n    delivery_time: str,\n) -> str:\n    \"\"\"\n    Notifies the customer about the estimated delivery time.\n    \n    Parameters:\n        customer_id (str): The ID of the customer.\n        delivery_time (str): The estimated delivery time in HH:MM format.\n    \n    Returns:\n        str: Confirmation message about the notification sent to the customer.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def notify_estimated_delivery_time(\n    customer_id: str,\n    delivery_time: str,\n) -> str:\n    \"\"\"\n    Notifies the customer about the estimated delivery time.\n    \n    Parameters:\n        customer_id (str): The ID of the customer.\n        delivery_time (str): The estimated delivery time in HH:MM format.\n    \n    Returns:\n        str: Confirmation message about the notification sent to the customer.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": null
}
{
    "function_id": "ubereats-5",
    "task": "Navigate to the customer's location for food delivery.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Navigate to the customer's location for food delivery."
    },
    "snippet": "def navigate_to_customer_location(\n    customer_address: str,\n    current_location: str,\n) -> None:\n    \"\"\"\n    Finds a route to the customer's address from the current location for food delivery.\n    \n    Parameters:\n        customer_address (str): The address of the customer.\n        current_location (str): The current location of the food delivery driver.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def navigate_to_customer_location(\n    customer_address: str,\n    current_location: str,\n) -> None:\n    \"\"\"\n    Finds a route to the customer's address from the current location for food delivery.\n    \n    Parameters:\n        customer_address (str): The address of the customer.\n        current_location (str): The current location of the food delivery driver.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "navigate_to_customer_location",
            "description": "Finds a route to the customer's address from the current location for food delivery.",
            "parameters": {
                "type": "object",
                "properties": {
                    "customer_address": {
                        "type": "string",
                        "description": "The address of the customer."
                    },
                    "current_location": {
                        "type": "string",
                        "description": "The current location of the food delivery driver."
                    }
                },
                "required": [
                    "customer_address",
                    "current_location"
                ]
            },
            "returns": {
                "type": "null"
            }
        }
    }
}
{
    "function_id": "ubereats-6",
    "task": "Confirm the successful delivery of the food items to the customer.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Confirm the successful delivery of the food items to the customer."
    },
    "snippet": "def confirm_delivery(\n    order_id: int,\n    customer_id: int,\n) -> Dict[str, bool]:\n    \"\"\"\n    Confirms the successful delivery of the food items to the customer.\n    \n    Parameters:\n        order_id (int): The id of the order that was delivered.\n        customer_id (int): The id of the customer to whom the order was delivered.\n                                          \n    Returns:\n        Dict[str, bool]: A dictionary with 'order_delivered' as a key and a boolean as a value that\n                         signifies whether or not the order was successfully delivered.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def confirm_delivery(\n    order_id: int,\n    customer_id: int,\n) -> Dict[str, bool]:\n    \"\"\"\n    Confirms the successful delivery of the food items to the customer.\n    \n    Parameters:\n        order_id (int): The id of the order that was delivered.\n        customer_id (int): The id of the customer to whom the order was delivered.\n                                          \n    Returns:\n        Dict[str, bool]: A dictionary with 'order_delivered' as a key and a boolean as a value that\n                         signifies whether or not the order was successfully delivered.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "confirm_delivery",
            "description": "Confirms the successful delivery of the food items to the customer.",
            "parameters": {
                "type": "object",
                "properties": {
                    "order_id": {
                        "type": "integer",
                        "description": "The id of the order that was delivered."
                    },
                    "customer_id": {
                        "type": "integer",
                        "description": "The id of the customer to whom the order was delivered."
                    }
                },
                "required": [
                    "order_id",
                    "customer_id"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "order_delivered": {
                        "type": "boolean",
                        "description": "A boolean that signifies whether or not the order was successfully delivered."
                    }
                }
            }
        }
    }
}
{
    "function_id": "ubereats-7",
    "task": "Handle and report any issues with the order (e.g., missing items, delays).",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Handle and report any issues with the order (e.g., missing items, delays)."
    },
    "snippet": "def handle_order_issues(\n    order_details: Dict[str, Any],\n) -> Dict[str, str]:\n    \"\"\"\n    Handles and reports any issues with the order such as missing items or delays.\n\n    Parameters:\n        order_details (Dict[str, Any]): A dictionary containing the details of the order.\n                                        It should have 'items' and 'delivery_date' keys.\n                                        \n    Returns:\n        Dict[str, str]: A dictionary with 'status', 'issue_type' and 'message' as keys.\n                        'status' can be 'SUCCESS' or 'FAILURE'.\n                        'issue_type' can be 'MISSING_ITEMS' or 'DELAY' or 'NONE' in case of no issues.\n                        'message' is a detailed explanation of the reported issue.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def handle_order_issues(\n    order_details: Dict[str, Any],\n) -> Dict[str, str]:\n    \"\"\"\n    Handles and reports any issues with the order such as missing items or delays.\n\n    Parameters:\n        order_details (Dict[str, Any]): A dictionary containing the details of the order.\n                                        It should have 'items' and 'delivery_date' keys.\n                                        \n    Returns:\n        Dict[str, str]: A dictionary with 'status', 'issue_type' and 'message' as keys.\n                        'status' can be 'SUCCESS' or 'FAILURE'.\n                        'issue_type' can be 'MISSING_ITEMS' or 'DELAY' or 'NONE' in case of no issues.\n                        'message' is a detailed explanation of the reported issue.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "handle_order_issues",
            "description": "Handles and reports any issues with the order such as missing items or delays.",
            "parameters": {
                "type": "object",
                "properties": {
                    "order_details": {
                        "type": "object",
                        "description": "A dictionary containing the details of the order. It should have 'items' and 'delivery_date' keys."
                    }
                },
                "required": [
                    "order_details"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "'status' can be 'SUCCESS' or 'FAILURE'."
                    },
                    "issue_type": {
                        "type": "string",
                        "description": "'issue_type' can be 'MISSING_ITEMS' or 'DELAY' or 'NONE' in case of no issues."
                    },
                    "message": {
                        "type": "string",
                        "description": "'message' is a detailed explanation of the reported issue."
                    }
                }
            }
        }
    }
}
{
    "function_id": "ubereats-8",
    "task": "Record and submit daily earnings for review.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Record and submit daily earnings for review."
    },
    "snippet": "def record_daily_earnings(\n    earnings: Dict[str, float],\n    submit_date: str,\n) -> bool:\n    \"\"\"\n    Records and submits daily earnings for review.\n    \n    Parameters:\n        earnings (Dict[str, float]): A dictionary with keys as the product or service name and its corresponding \n                                     earnings as the value.\n        submit_date (str): The date of submission in YYYY-MM-DD format.\n                              \n    Returns:\n        bool: A boolean value indicating if the submission was successful or not.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def record_daily_earnings(\n    earnings: Dict[str, float],\n    submit_date: str,\n) -> bool:\n    \"\"\"\n    Records and submits daily earnings for review.\n    \n    Parameters:\n        earnings (Dict[str, float]): A dictionary with keys as the product or service name and its corresponding \n                                     earnings as the value.\n        submit_date (str): The date of submission in YYYY-MM-DD format.\n                              \n    Returns:\n        bool: A boolean value indicating if the submission was successful or not.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "record_daily_earnings",
            "description": "Records and submits daily earnings for review.",
            "parameters": {
                "type": "object",
                "properties": {
                    "earnings": {
                        "type": "object",
                        "description": "A dictionary with keys as the product or service name and its corresponding earnings as the value.",
                        "properties": {
                            "type": "string"
                        }
                    },
                    "submit_date": {
                        "type": "string",
                        "description": "The date of submission in YYYY-MM-DD format."
                    }
                },
                "required": [
                    "earnings",
                    "submit_date"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "successful_submission": {
                        "type": "boolean",
                        "description": "A boolean value indicating if the submission was successful or not."
                    }
                }
            }
        }
    }
}
{
    "function_id": "ubereats-9",
    "task": "Monitor fuel level and find the nearest gas station if needed.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Monitor fuel level and find the nearest gas station if needed."
    },
    "snippet": "def monitor_fuel_and_locate_gas_station(\n    current_fuel_level: float,\n    fuel_consumption_rate: float,\n    current_location: Tuple[float, float]\n) -> Union[str, Dict[str, float]]:\n    \"\"\"\n    Monitors the current fuel level and returns the nearest gas station if needed.\n    \n    Parameters:\n        current_fuel_level (float): The current level of fuel in the tank.\n        fuel_consumption_rate (float): The rate at which the vehicle consumes fuel.\n        current_location (Tuple[float, float]): The current geographical location of the vehicle as a pair of GPS coordinates.\n        \n    Returns:\n        Union[str, Dict[str, float]]: If the fuel level is adequate, returns a string informing that no gas station is needed.\n                                       If the fuel level is low, returns a dictionary with 'gas_station_location' \n                                       as a key and the coordinates of the nearest gas station as a value.\n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def monitor_fuel_and_locate_gas_station(\n    current_fuel_level: float,\n    fuel_consumption_rate: float,\n    current_location: Tuple[float, float]\n) -> Union[str, Dict[str, float]]:\n    \"\"\"\n    Monitors the current fuel level and returns the nearest gas station if needed.\n    \n    Parameters:\n        current_fuel_level (float): The current level of fuel in the tank.\n        fuel_consumption_rate (float): The rate at which the vehicle consumes fuel.\n        current_location (Tuple[float, float]): The current geographical location of the vehicle as a pair of GPS coordinates.\n        \n    Returns:\n        Union[str, Dict[str, float]]: If the fuel level is adequate, returns a string informing that no gas station is needed.\n                                       If the fuel level is low, returns a dictionary with 'gas_station_location' \n                                       as a key and the coordinates of the nearest gas station as a value.\n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "monitor_fuel_and_locate_gas_station",
            "description": "Monitors the current fuel level and returns the nearest gas station if needed.",
            "parameters": {
                "type": "object",
                "properties": {
                    "current_fuel_level": {
                        "type": "float",
                        "description": "The current level of fuel in the tank."
                    },
                    "fuel_consumption_rate": {
                        "type": "float",
                        "description": "The rate at which the vehicle consumes fuel."
                    },
                    "current_location": {
                        "type": "Tuple",
                        "description": "The current geographical location of the vehicle as a pair of GPS coordinates.",
                        "items": {
                            "type": "float"
                        }
                    }
                },
                "required": [
                    "current_fuel_level",
                    "fuel_consumption_rate",
                    "current_location"
                ]
            },
            "returns": {
                "type": "Union",
                "description": "If the fuel level is adequate, returns a string informing that no gas station is needed. If the fuel level is low, returns a dictionary with 'gas_station_location' as a key and the coordinates of the nearest gas station as a value.",
                "items": {
                    "type": [
                        "str",
                        "Dict"
                    ],
                    "properties": {
                        "gas_station_location": {
                            "type": "Tuple",
                            "items": {
                                "type": "float"
                            }
                        }
                    }
                }
            }
        }
    }
}
{
    "function_id": "ubereats-10",
    "task": "Update availability status (e.g., going offline, taking a break).",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Update availability status (e.g., going offline, taking a break)."
    },
    "snippet": "def update_availability_status(\n    user_id: int,\n    new_status: str\n) -> Dict[str, str]:\n    \"\"\"\n    Updates the availability status of a user and returns their updated status.\n\n    Parameters:\n        user_id (int): The id of the user to update their status.\n        new_status (str): The new status to be set for the user. Examples of status values are 'offline', 'online', 'break'.\n        \n    Returns:\n        Dict[str, str]: A dictionary with 'user_id' as a key and the updated status as a value.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def update_availability_status(\n    user_id: int,\n    new_status: str\n) -> Dict[str, str]:\n    \"\"\"\n    Updates the availability status of a user and returns their updated status.\n\n    Parameters:\n        user_id (int): The id of the user to update their status.\n        new_status (str): The new status to be set for the user. Examples of status values are 'offline', 'online', 'break'.\n        \n    Returns:\n        Dict[str, str]: A dictionary with 'user_id' as a key and the updated status as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "update_availability_status",
            "description": "Updates the availability status of a user and returns their updated status.",
            "parameters": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "integer",
                        "description": "The id of the user to update their status."
                    },
                    "new_status": {
                        "type": "string",
                        "description": "The new status to be set for the user. Examples of status values are 'offline', 'online', 'break'."
                    }
                },
                "required": [
                    "user_id",
                    "new_status"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "integer",
                        "description": "The id of the user whose status has been updated."
                    },
                    "status": {
                        "type": "string",
                        "description": "The updated status of the user."
                    }
                },
                "required": [
                    "user_id",
                    "status"
                ]
            }
        }
    }
}
{
    "function_id": "ubereats-11",
    "task": "Rate the restaurant based on the ease of the pickup process.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Rate the restaurant based on the ease of the pickup process."
    },
    "snippet": "def rate_pickup(\n    pickup_time: str,\n    wait_time: str,\n    staff_friendliness: int,\n    order_accuracy: int\n) -> Dict[str, float]:\n    \"\"\"\n    Rates the restaurant based on the ease of the pickup process.\n\n    Parameters:\n        pickup_time (str): The time the order was picked up in HH:MM:SS format.\n        wait_time (str): The time the customer waited for the order in HH:MM:SS format.\n        staff_friendliness (int): A rating for the friendliness of the staff on a scale of 1 to 10.\n        order_accuracy (int): A rating for the accuracy of the order on a scale of 1 to 10.\n        \n    Returns:\n        Dict[str, float]: A dictionary with 'pickup_rating' as a key and the calculated rating as a value.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def rate_pickup(\n    pickup_time: str,\n    wait_time: str,\n    staff_friendliness: int,\n    order_accuracy: int\n) -> Dict[str, float]:\n    \"\"\"\n    Rates the restaurant based on the ease of the pickup process.\n\n    Parameters:\n        pickup_time (str): The time the order was picked up in HH:MM:SS format.\n        wait_time (str): The time the customer waited for the order in HH:MM:SS format.\n        staff_friendliness (int): A rating for the friendliness of the staff on a scale of 1 to 10.\n        order_accuracy (int): A rating for the accuracy of the order on a scale of 1 to 10.\n        \n    Returns:\n        Dict[str, float]: A dictionary with 'pickup_rating' as a key and the calculated rating as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "rate_pickup",
            "description": "Rates the restaurant based on the ease of the pickup process.",
            "parameters": {
                "type": "object",
                "properties": {
                    "pickup_time": {
                        "type": "string",
                        "description": "The time the order was picked up in HH:MM:SS format."
                    },
                    "wait_time": {
                        "type": "string",
                        "description": "The time the customer waited for the order in HH:MM:SS format."
                    },
                    "staff_friendliness": {
                        "type": "integer",
                        "description": "A rating for the friendliness of the staff on a scale of 1 to 10."
                    },
                    "order_accuracy": {
                        "type": "integer",
                        "description": "A rating for the accuracy of the order on a scale of 1 to 10."
                    }
                },
                "required": [
                    "pickup_time",
                    "wait_time",
                    "staff_friendliness",
                    "order_accuracy"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "pickup_rating": {
                        "type": "float",
                        "description": "A dictionary with 'pickup_rating' as a key and the calculated rating as a value."
                    }
                }
            }
        }
    }
}
{
    "function_id": "ubereats-12",
    "task": "Rate the customer based on the ease of the delivery process.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Rate the customer based on the ease of the delivery process."
    },
    "snippet": "def rate_customer_based_on_delivery(\n    delivery_process: Dict[str, Union[str, int, float]]\n) -> Dict[str, float]:\n    \"\"\"\n    Rates the customer based on the ease of the delivery process.\n    \n    Parameters:\n        delivery_process (Dict[str, Union[str, int, float]]): A dictionary containing details about the delivery process.\n                                                              It should have the following keys 'customer_id', 'delivery_time' (in minutes),\n                                                              'distance' (in miles), 'product_quantity', and 'product_size' (small, medium, large).\n    \n    Returns:\n        Dict[str, float]: A dictionary with 'customer_id' as a key and the customer's rating as a value.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def rate_customer_based_on_delivery(\n    delivery_process: Dict[str, Union[str, int, float]]\n) -> Dict[str, float]:\n    \"\"\"\n    Rates the customer based on the ease of the delivery process.\n    \n    Parameters:\n        delivery_process (Dict[str, Union[str, int, float]]): A dictionary containing details about the delivery process.\n                                                              It should have the following keys 'customer_id', 'delivery_time' (in minutes),\n                                                              'distance' (in miles), 'product_quantity', and 'product_size' (small, medium, large).\n    \n    Returns:\n        Dict[str, float]: A dictionary with 'customer_id' as a key and the customer's rating as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "rate_customer_based_on_delivery",
            "description": "Rates the customer based on the ease of the delivery process.",
            "parameters": {
                "type": "object",
                "properties": {
                    "delivery_process": {
                        "type": "object",
                        "description": "A dictionary containing details about the delivery process. It should have the following keys 'customer_id', 'delivery_time' (in minutes), 'distance' (in miles), 'product_quantity', and 'product_size' (small, medium, large).",
                        "properties": {
                            "customer_id": {
                                "type": "string"
                            },
                            "delivery_time": {
                                "type": "integer"
                            },
                            "distance": {
                                "type": "float"
                            },
                            "product_quantity": {
                                "type": "integer"
                            },
                            "product_size": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "customer_id",
                            "delivery_time",
                            "distance",
                            "product_quantity",
                            "product_size"
                        ]
                    }
                },
                "required": [
                    "delivery_process"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "customer_id": {
                        "type": "string",
                        "description": "A dictionary with 'customer_id' as a key and the customer's rating as a value."
                    },
                    "rating": {
                        "type": "float",
                        "description": "The rating of the customer based on the delivery parameters."
                    }
                }
            }
        }
    }
}
{
    "function_id": "ubereats-13",
    "task": "Review customer feedback and ratings.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Review customer feedback and ratings."
    },
    "snippet": "def review_customer_feedback(\n    feedback: List[Dict[str, Union[str, int]]],\n) -> Dict[str, float]:\n    \"\"\"\n    Reviews customer feedback and ratings, and returns average rating and feedback counts.\n    \n    Parameters:\n        feedback (List[Dict[str, Union[str, int]]]): A list of dictionaries where each dictionary represents a \n                                                      customer's feedback and rating. According to the data structure, \n                                                      each dictionary should have 'comment' as a string and 'rating' \n                                                      as an integer (1-5).\n                                                      \n    Returns:\n        Dict[str, float]: A dictionary with 'average_rating' as a key and the average rating as a value,\n                          'feedback_count' as a key and the count of total feedback received as a value.\n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def review_customer_feedback(\n    feedback: List[Dict[str, Union[str, int]]],\n) -> Dict[str, float]:\n    \"\"\"\n    Reviews customer feedback and ratings, and returns average rating and feedback counts.\n    \n    Parameters:\n        feedback (List[Dict[str, Union[str, int]]]): A list of dictionaries where each dictionary represents a \n                                                      customer's feedback and rating. According to the data structure, \n                                                      each dictionary should have 'comment' as a string and 'rating' \n                                                      as an integer (1-5).\n                                                      \n    Returns:\n        Dict[str, float]: A dictionary with 'average_rating' as a key and the average rating as a value,\n                          'feedback_count' as a key and the count of total feedback received as a value.\n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "review_customer_feedback",
            "description": "Reviews customer feedback and ratings, and returns average rating and feedback counts.",
            "parameters": {
                "type": "object",
                "properties": {
                    "feedback": {
                        "type": "array",
                        "description": "A list of dictionaries where each dictionary represents a customer's feedback and rating. Each dictionary should have 'comment' as a string and 'rating' as an integer (1-5).",
                        "items": {
                            "type": "object",
                            "properties": {
                                "comment": {
                                    "type": "string"
                                },
                                "rating": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "comment",
                                "rating"
                            ]
                        }
                    }
                },
                "required": [
                    "feedback"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "average_rating": {
                        "type": "float",
                        "description": "The average rating of the feedbacks."
                    },
                    "feedback_count": {
                        "type": "float",
                        "description": "The count of total feedback received."
                    }
                }
            }
        }
    }
}
{
    "function_id": "ubereats-14",
    "task": "Contact support for resolving any disputes or issues.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Contact support for resolving any disputes or issues."
    },
    "snippet": "def contact_support_for_dispute_resolution(\n    dispute_id: str,\n    user_id: str,\n    issue_details: str,\n    communication_channel: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Contacts support for resolving any disputes or issues.\n    \n    Parameters:\n        dispute_id (str): The unique identifier of the dispute.\n        user_id (str): The unique identifier of the user raising the dispute.\n        issue_details (str): Description of the dispute or problem faced by the user.\n        communication_channel (str): The preferred communication channel (email, phone, in-app chat).\n  \n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key and the current status of the dispute resolution as a value.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def contact_support_for_dispute_resolution(\n    dispute_id: str,\n    user_id: str,\n    issue_details: str,\n    communication_channel: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Contacts support for resolving any disputes or issues.\n    \n    Parameters:\n        dispute_id (str): The unique identifier of the dispute.\n        user_id (str): The unique identifier of the user raising the dispute.\n        issue_details (str): Description of the dispute or problem faced by the user.\n        communication_channel (str): The preferred communication channel (email, phone, in-app chat).\n  \n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key and the current status of the dispute resolution as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "contact_support_for_dispute_resolution",
            "description": "Contacts support for resolving any disputes or issues.",
            "parameters": {
                "type": "object",
                "properties": {
                    "dispute_id": {
                        "type": "string",
                        "description": "The unique identifier of the dispute."
                    },
                    "user_id": {
                        "type": "string",
                        "description": "The unique identifier of the user raising the dispute."
                    },
                    "issue_details": {
                        "type": "string",
                        "description": "Description of the dispute or problem faced by the user."
                    },
                    "communication_channel": {
                        "type": "string",
                        "description": "The preferred communication channel (email, phone, in-app chat)."
                    }
                },
                "required": [
                    "dispute_id",
                    "user_id",
                    "issue_details",
                    "communication_channel"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "The current status of the dispute resolution."
                    }
                }
            }
        }
    }
}
{
    "function_id": "ubereats-15",
    "task": "Submit receipts for any work-related expenses for reimbursement.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Submit receipts for any work-related expenses for reimbursement."
    },
    "snippet": "def submit_expense_receipts(\n    employee_id: str,\n    expense_items: List[Dict[str, Union[str, float]]]\n) -> Dict[str, str]:\n    \"\"\"\n    Submits work-related expense receipts for reimbursement and returns the response.\n\n    Parameters:\n        employee_id (str): The ID of the employee submitting the receipts.\n        expense_items (List[Dict[str, Union[str, float]]]): A list of dictionaries each representing an expense. \n        Each dictionary should have 'expense_date', 'expense_type', 'description' and 'amount' keys.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'response_id' as key and the id of the response as value, also 'status' as\n        key and the status of the submission as value.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def submit_expense_receipts(\n    employee_id: str,\n    expense_items: List[Dict[str, Union[str, float]]]\n) -> Dict[str, str]:\n    \"\"\"\n    Submits work-related expense receipts for reimbursement and returns the response.\n\n    Parameters:\n        employee_id (str): The ID of the employee submitting the receipts.\n        expense_items (List[Dict[str, Union[str, float]]]): A list of dictionaries each representing an expense. \n        Each dictionary should have 'expense_date', 'expense_type', 'description' and 'amount' keys.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'response_id' as key and the id of the response as value, also 'status' as\n        key and the status of the submission as value.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "submit_expense_receipts",
            "description": "Submits work-related expense receipts for reimbursement and returns the response.",
            "parameters": {
                "type": "object",
                "properties": {
                    "employee_id": {
                        "type": "string",
                        "description": "The ID of the employee submitting the receipts."
                    },
                    "expense_items": {
                        "type": "array",
                        "description": "A list of dictionaries each representing an expense. Each dictionary should have 'expense_date', 'expense_type', 'description' and 'amount' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "expense_date": {
                                    "type": "string"
                                },
                                "expense_type": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                },
                                "amount": {
                                    "type": "float"
                                }
                            },
                            "required": [
                                "expense_date",
                                "expense_type",
                                "description",
                                "amount"
                            ]
                        }
                    }
                },
                "required": [
                    "employee_id",
                    "expense_items"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "response_id": {
                        "type": "string",
                        "description": "The id of the submitted expense."
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the expense submission."
                    }
                }
            }
        }
    }
}
{
    "function_id": "ubereats-16",
    "task": "View and accept any promotional tasks or bonus opportunities.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "View and accept any promotional tasks or bonus opportunities."
    },
    "snippet": "def view_and_accept_promotions(\n    available_promotions: List[Dict[str, Any]],\n) -> List[Dict[str, Any]]:\n    \"\"\"\n    Checks and accepts any available promotional tasks or bonus opportunities and returns them.\n    \n    Parameters:\n        available_promotions (List[Dict[str, Any]]): A list of dictionaries containing available promotions.\n                                                      Each dictionary should have 'promotion_name' and 'details' \n                                                      keys at a minimum. Other keys are optional and can vary \n                                                      depending on the promotion type.\n                                          \n    Returns:\n        List[Dict[str, Any]]: A list of dictionaries with accepted promotion details.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def view_and_accept_promotions(\n    available_promotions: List[Dict[str, Any]],\n) -> List[Dict[str, Any]]:\n    \"\"\"\n    Checks and accepts any available promotional tasks or bonus opportunities and returns them.\n    \n    Parameters:\n        available_promotions (List[Dict[str, Any]]): A list of dictionaries containing available promotions.\n                                                      Each dictionary should have 'promotion_name' and 'details' \n                                                      keys at a minimum. Other keys are optional and can vary \n                                                      depending on the promotion type.\n                                          \n    Returns:\n        List[Dict[str, Any]]: A list of dictionaries with accepted promotion details.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "view_and_accept_promotions",
            "description": "Checks and accepts any available promotional tasks or bonus opportunities and returns them.",
            "parameters": {
                "type": "object",
                "properties": {
                    "available_promotions": {
                        "type": "array",
                        "description": "A list of dictionaries containing available promotions. Each dictionary should have 'promotion_name' and 'details' keys at a minimum. Other keys are optional and can vary depending on the promotion type.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "promotion_name": {
                                    "type": "string"
                                },
                                "details": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "promotion_name",
                                "details"
                            ]
                        }
                    }
                },
                "required": [
                    "available_promotions"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "accepted_promotions": {
                        "type": "array",
                        "description": "A list of dictionaries with accepted promotion details.",
                        "items": {
                            "type": "object",
                            "description": "Each object represents a promotional deal that has been accepted. The details of the promotion are within each object."
                        }
                    }
                }
            }
        }
    }
}
{
    "function_id": "ubereats-17",
    "task": "Check and maintain vehicle condition (e.g., tire pressure, oil level).",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Check and maintain vehicle condition (e.g., tire pressure, oil level)."
    },
    "snippet": "def check_maintain_vehicle_condition(\n    vehicle_id: str,\n    current_tire_pressure: float,\n    current_oil_level: float\n) -> Dict[str, str]:\n    \"\"\"\n    Checks and maintains the vehicle's tire pressure and oil level.\n    \n    Parameters:\n        vehicle_id (str): The unique identifier of the vehicle.\n        current_tire_pressure (float): The current tire pressure of the vehicle.\n        current_oil_level (float): The current oil level of the vehicle.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'tire_pressure_status' and 'oil_level_status' as keys \n                        indicating whether tire pressure and oil level are 'OK' or 'Need Attention'. \n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def check_maintain_vehicle_condition(\n    vehicle_id: str,\n    current_tire_pressure: float,\n    current_oil_level: float\n) -> Dict[str, str]:\n    \"\"\"\n    Checks and maintains the vehicle's tire pressure and oil level.\n    \n    Parameters:\n        vehicle_id (str): The unique identifier of the vehicle.\n        current_tire_pressure (float): The current tire pressure of the vehicle.\n        current_oil_level (float): The current oil level of the vehicle.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'tire_pressure_status' and 'oil_level_status' as keys \n                        indicating whether tire pressure and oil level are 'OK' or 'Need Attention'. \n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": null
}
{
    "function_id": "ubereats-18",
    "task": "Keep track of miles driven for tax purposes.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Keep track of miles driven for tax purposes."
    },
    "snippet": "def track_miles_driven(\n    vehicle_id: str,\n    start_mileage: int,\n    end_mileage: int,\n    date_driven: str,\n) -> Dict[str, Union[str, int]]:\n    \"\"\"\n    Tracks the miles driven for a specific vehicle and date, useful for tax purposes.\n    \n    Parameters:\n        vehicle_id (str): The identifier of the vehicle.\n        start_mileage (int): The mileage at the start of the tour.\n        end_mileage (int): The mileage at the end of the tour.\n        date_driven (str): The date when the mileage was recorded in YYYY-MM-DD format.\n                          \n    Returns:\n        Dict[str, Union[str, int]]: A dictionary with keys 'vehicle_id', 'miles_driven' and 'date_driven', \n                                     and their corresponding values.\n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def track_miles_driven(\n    vehicle_id: str,\n    start_mileage: int,\n    end_mileage: int,\n    date_driven: str,\n) -> Dict[str, Union[str, int]]:\n    \"\"\"\n    Tracks the miles driven for a specific vehicle and date, useful for tax purposes.\n    \n    Parameters:\n        vehicle_id (str): The identifier of the vehicle.\n        start_mileage (int): The mileage at the start of the tour.\n        end_mileage (int): The mileage at the end of the tour.\n        date_driven (str): The date when the mileage was recorded in YYYY-MM-DD format.\n                          \n    Returns:\n        Dict[str, Union[str, int]]: A dictionary with keys 'vehicle_id', 'miles_driven' and 'date_driven', \n                                     and their corresponding values.\n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "track_miles_driven",
            "description": "Tracks the miles driven for a specific vehicle and date, useful for tax purposes.",
            "parameters": {
                "type": "object",
                "properties": {
                    "vehicle_id": {
                        "type": "string",
                        "description": "The identifier of the vehicle."
                    },
                    "start_mileage": {
                        "type": "integer",
                        "description": "The mileage at the start of the tour."
                    },
                    "end_mileage": {
                        "type": "integer",
                        "description": "The mileage at the end of the tour."
                    },
                    "date_driven": {
                        "type": "string",
                        "description": "The date when the mileage was recorded in YYYY-MM-DD format."
                    }
                },
                "required": [
                    "vehicle_id",
                    "start_mileage",
                    "end_mileage",
                    "date_driven"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "vehicle_id": {
                        "type": "string",
                        "description": "The identifier of the vehicle."
                    },
                    "miles_driven": {
                        "type": "integer",
                        "description": "The number of miles driven."
                    },
                    "date_driven": {
                        "type": "string",
                        "description": "The date when the mileage was recorded in YYYY-MM-DD format."
                    }
                }
            }
        }
    }
}
{
    "function_id": "ubereats-19",
    "task": "Receive and confirm batched orders (multiple pickups or deliveries).",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Receive and confirm batched orders (multiple pickups or deliveries)."
    },
    "snippet": "def confirm_orders(\n    batched_orders: List[Dict[str, Union[str, int]]]\n) -> Dict[str, str]:\n    \"\"\"\n    Receives and confirms batched orders (multiple pickups or deliveries).\n    \n    Parameters:\n        batched_orders (List[Dict[str, Union[str, int]]]): A list of dictionaries containing order details.\n                                                           Each dictionary should have 'order_id', 'pick_up_location',\n                                                           'delivery_location' and 'quantity' keys.\n                                                          \n    Returns:\n        Dict[str, str]: A dictionary with 'order_id' as a key and 'status' as a value.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def confirm_orders(\n    batched_orders: List[Dict[str, Union[str, int]]]\n) -> Dict[str, str]:\n    \"\"\"\n    Receives and confirms batched orders (multiple pickups or deliveries).\n    \n    Parameters:\n        batched_orders (List[Dict[str, Union[str, int]]]): A list of dictionaries containing order details.\n                                                           Each dictionary should have 'order_id', 'pick_up_location',\n                                                           'delivery_location' and 'quantity' keys.\n                                                          \n    Returns:\n        Dict[str, str]: A dictionary with 'order_id' as a key and 'status' as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": null
}
{
    "function_id": "ubereats-20",
    "task": "Track and report any tips received.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Track and report any tips received."
    },
    "snippet": "def track_and_report_tips(\n    tips_received: List[Dict[str, Union[str,float]]]\n) -> Dict[str, float]:\n    \"\"\"\n    Tracks and reports any tips received.\n    \n    Parameters:\n        tips_received (List[Dict[str, Union[str,float]]]): A list of dictionaries containing tip details.\n                                                           Each dictionary should have 'date' and 'tip_amount' keys.\n                                                              \n    Returns:\n        Dict[str, float]: A dictionary with 'total_tips' as a key and the total tip amount as a value.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def track_and_report_tips(\n    tips_received: List[Dict[str, Union[str,float]]]\n) -> Dict[str, float]:\n    \"\"\"\n    Tracks and reports any tips received.\n    \n    Parameters:\n        tips_received (List[Dict[str, Union[str,float]]]): A list of dictionaries containing tip details.\n                                                           Each dictionary should have 'date' and 'tip_amount' keys.\n                                                              \n    Returns:\n        Dict[str, float]: A dictionary with 'total_tips' as a key and the total tip amount as a value.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": null
}
