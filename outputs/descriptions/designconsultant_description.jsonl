{
    "function_id": "design-consultant-1",
    "task": "Create a new project outline or scope of work for a client.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Create a new project outline or scope of work for a client."
    },
    "snippet": "def create_project_outline(\n    client_name: str,\n    project_name: str,\n    project_description: str,\n    project_start_date: str,\n    project_end_date: str,\n    project_deliverables: List[str],\n    project_team: List[Dict[str, str]]\n) -> Dict[str, Any]:\n    \"\"\"\n    Creates a new project outline or scope of work for a client.\n\n    Parameters:\n        client_name (str): The name of the client.\n        project_name (str): The name of the project.\n        project_description (str): A brief description of the project.\n        project_start_date (str): The start date of the project in YYYY-MM-DD format.\n        project_end_date (str): The end date of the project in YYYY-MM-DD format.\n        project_deliverables (List[str]): A list of project deliverables.\n        project_team (List[Dict[str, str]]): A list of dictionaries containing project team member details.\n                                            Each dictionary should have 'name' and 'role' keys.\n\n    Returns:\n        Dict[str, Any]: A dictionary representing the project outline. It should contain keys such as 'client_name',\n        'project_name', 'project_description', 'project_start_date', 'project_end_date', 'project_deliverables', and \n        'project_team'.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def create_project_outline(\n    client_name: str,\n    project_name: str,\n    project_description: str,\n    project_start_date: str,\n    project_end_date: str,\n    project_deliverables: List[str],\n    project_team: List[Dict[str, str]]\n) -> Dict[str, Any]:\n    \"\"\"\n    Creates a new project outline or scope of work for a client.\n\n    Parameters:\n        client_name (str): The name of the client.\n        project_name (str): The name of the project.\n        project_description (str): A brief description of the project.\n        project_start_date (str): The start date of the project in YYYY-MM-DD format.\n        project_end_date (str): The end date of the project in YYYY-MM-DD format.\n        project_deliverables (List[str]): A list of project deliverables.\n        project_team (List[Dict[str, str]]): A list of dictionaries containing project team member details.\n                                            Each dictionary should have 'name' and 'role' keys.\n\n    Returns:\n        Dict[str, Any]: A dictionary representing the project outline. It should contain keys such as 'client_name',\n        'project_name', 'project_description', 'project_start_date', 'project_end_date', 'project_deliverables', and \n        'project_team'.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "create_project_outline",
            "description": "Creates a new project outline or scope of work for a client.",
            "parameters": {
                "type": "object",
                "properties": {
                    "client_name": {
                        "type": "string",
                        "description": "The name of the client."
                    },
                    "project_name": {
                        "type": "string",
                        "description": "The name of the project."
                    },
                    "project_description": {
                        "type": "string",
                        "description": "A brief description of the project."
                    },
                    "project_start_date": {
                        "type": "string",
                        "description": "The start date of the project in YYYY-MM-DD format."
                    },
                    "project_end_date": {
                        "type": "string",
                        "description": "The end date of the project in YYYY-MM-DD format."
                    },
                    "project_deliverables": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of project deliverables."
                    },
                    "project_team": {
                        "type": "array",
                        "description": "A list of dictionaries containing project team member details. Each dictionary should have 'name' and 'role' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "role": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "name",
                                "role"
                            ]
                        }
                    }
                },
                "required": [
                    "client_name",
                    "project_name",
                    "project_description",
                    "project_start_date",
                    "project_end_date",
                    "project_deliverables",
                    "project_team"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "client_name": {
                        "type": "string"
                    },
                    "project_name": {
                        "type": "string"
                    },
                    "project_description": {
                        "type": "string"
                    },
                    "project_start_date": {
                        "type": "string"
                    },
                    "project_end_date": {
                        "type": "string"
                    },
                    "project_deliverables": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "project_team": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "role": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "description": "A dictionary representing the project outline. It should contain keys such as 'client_name', 'project_name', 'project_description', 'project_start_date', 'project_end_date', 'project_deliverables', and 'project_team'."
            }
        }
    }
}
{
    "function_id": "design-consultant-2",
    "task": "Send a proposal or quotation to a prospective client.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Send a proposal or quotation to a prospective client."
    },
    "snippet": "```python\ndef send_proposal(\n    client_details: Dict[str, str],\n    proposal_details: Dict[str, str],\n    email_provider_client: Any\n) -> None:\n    \"\"\"\n    Sends a proposal or quotation to a prospective client.\n    \n    Parameters:\n        client_details (Dict[str, str]): A dictionary containing details of the client. \n                                         The dictionary should have 'email', 'name', and 'company_name' keys.\n        proposal_details (Dict[str, str]): A dictionary containing the details of the proposal. \n                                            This should have 'subject', 'body', and 'attachments' keys.\n        email_provider_client (Any): An instance of the email provider client. \n                                      This instance should have a send_email() function.\n\n    The function doesn't return anything.\n    \"\"\"\n```",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "```python\ndef send_proposal(\n    client_details: Dict[str, str],\n    proposal_details: Dict[str, str],\n    email_provider_client: Any\n) -> None:\n    \"\"\"\n    Sends a proposal or quotation to a prospective client.\n    \n    Parameters:\n        client_details (Dict[str, str]): A dictionary containing details of the client. \n                                         The dictionary should have 'email', 'name', and 'company_name' keys.\n        proposal_details (Dict[str, str]): A dictionary containing the details of the proposal. \n                                            This should have 'subject', 'body', and 'attachments' keys.\n        email_provider_client (Any): An instance of the email provider client. \n                                      This instance should have a send_email() function.\n\n    The function doesn't return anything.\n    \"\"\"\n```",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": null
}
{
    "function_id": "design-consultant-3",
    "task": "Schedule a client meeting or consultation.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Schedule a client meeting or consultation."
    },
    "snippet": "def schedule_meeting(\n    client_name: str,\n    meeting_time: str,\n    meeting_date: str,\n    meeting_type: str,\n) -> str:\n    \"\"\"\n    Schedules a client meeting or consultation and returns a confirmation message.\n\n    Parameters:\n        client_name (str): The name of the client.\n        meeting_time (str): The time of the meeting in HH:MM format.\n        meeting_date (str): The date of the meeting in YYYY-MM-DD format.\n        meeting_type (str): The type of the meeting: 'meeting' or 'consultation'.\n        \n    Returns:\n        str: A confirmation message with the scheduled meeting details.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def schedule_meeting(\n    client_name: str,\n    meeting_time: str,\n    meeting_date: str,\n    meeting_type: str,\n) -> str:\n    \"\"\"\n    Schedules a client meeting or consultation and returns a confirmation message.\n\n    Parameters:\n        client_name (str): The name of the client.\n        meeting_time (str): The time of the meeting in HH:MM format.\n        meeting_date (str): The date of the meeting in YYYY-MM-DD format.\n        meeting_type (str): The type of the meeting: 'meeting' or 'consultation'.\n        \n    Returns:\n        str: A confirmation message with the scheduled meeting details.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "schedule_meeting",
            "description": "Schedules a client meeting or consultation and returns a confirmation message.",
            "parameters": {
                "type": "object",
                "properties": {
                    "client_name": {
                        "type": "string",
                        "description": "The name of the client."
                    },
                    "meeting_time": {
                        "type": "string",
                        "description": "The time of the meeting in HH:MM format."
                    },
                    "meeting_date": {
                        "type": "string",
                        "description": "The date of the meeting in YYYY-MM-DD format."
                    },
                    "meeting_type": {
                        "type": "string",
                        "description": "The type of the meeting: 'meeting' or 'consultation'."
                    }
                },
                "required": [
                    "client_name",
                    "meeting_time",
                    "meeting_date",
                    "meeting_type"
                ]
            },
            "returns": {
                "type": "string",
                "description": "A confirmation message with the scheduled meeting details."
            }
        }
    }
}
{
    "function_id": "design-consultant-4",
    "task": "Generate and send invoices for completed work.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Generate and send invoices for completed work."
    },
    "snippet": "def generate_and_send_invoices(\n    completed_work: List[Dict[str, Union[str, float, int]]],\n    client_details: Dict[str, str]\n) -> bool:\n    \"\"\"\n    Generates and sends invoices for completed work to the client.\n    \n    Parameters:\n        completed_work (List[Dict[str, Union[str, float, int]]]): A list of dictionaries containing details of completed work.\n                                                                 Each dictionary should have 'work_id', 'description', 'hours_worked', and 'rate' keys.\n        client_details (Dict[str, str]): A dictionary containing the client's details. It should have 'name', 'email', and 'address' keys.\n\n    Returns:\n        bool: A boolean indicating whether the invoices were successfully sent.\n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def generate_and_send_invoices(\n    completed_work: List[Dict[str, Union[str, float, int]]],\n    client_details: Dict[str, str]\n) -> bool:\n    \"\"\"\n    Generates and sends invoices for completed work to the client.\n    \n    Parameters:\n        completed_work (List[Dict[str, Union[str, float, int]]]): A list of dictionaries containing details of completed work.\n                                                                 Each dictionary should have 'work_id', 'description', 'hours_worked', and 'rate' keys.\n        client_details (Dict[str, str]): A dictionary containing the client's details. It should have 'name', 'email', and 'address' keys.\n\n    Returns:\n        bool: A boolean indicating whether the invoices were successfully sent.\n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": null
}
{
    "function_id": "design-consultant-5",
    "task": "Track hours spent on each project for billing purposes.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Track hours spent on each project for billing purposes."
    },
    "snippet": "def track_project_hours(\n    project_name: str,\n    start_time: str,\n    end_time: str,\n) -> Dict[str, float]:\n    \"\"\"\n    Tracks the hours spent on a specific project and returns the total hours for billing purposes.\n    \n    Parameters:\n        project_name (str): The name of the project.\n        start_time (str): The starting time of the project in YYYY-MM-DD HH:MM:SS format.\n        end_time (str): The ending time of the project in YYYY-MM-DD HH:MM:SS format.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_hours' as a key and the total hours spent on the project as a value.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def track_project_hours(\n    project_name: str,\n    start_time: str,\n    end_time: str,\n) -> Dict[str, float]:\n    \"\"\"\n    Tracks the hours spent on a specific project and returns the total hours for billing purposes.\n    \n    Parameters:\n        project_name (str): The name of the project.\n        start_time (str): The starting time of the project in YYYY-MM-DD HH:MM:SS format.\n        end_time (str): The ending time of the project in YYYY-MM-DD HH:MM:SS format.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_hours' as a key and the total hours spent on the project as a value.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "track_project_hours",
            "description": "Tracks the hours spent on a specific project and returns the total hours for billing purposes.",
            "parameters": {
                "type": "object",
                "properties": {
                    "project_name": {
                        "type": "string",
                        "description": "The name of the project."
                    },
                    "start_time": {
                        "type": "string",
                        "description": "The starting time of the project in YYYY-MM-DD HH:MM:SS format."
                    },
                    "end_time": {
                        "type": "string",
                        "description": "The ending time of the project in YYYY-MM-DD HH:MM:SS format."
                    }
                },
                "required": [
                    "project_name",
                    "start_time",
                    "end_time"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "total_hours": {
                        "type": "float",
                        "description": "The total hours spent on the project."
                    }
                }
            }
        }
    }
}
{
    "function_id": "design-consultant-6",
    "task": "Upload design drafts to a shared client folder.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Upload design drafts to a shared client folder."
    },
    "snippet": "def upload_design_drafts(\n    client_folder_path: str,\n    drafts_files: List[str],\n) -> None:\n    \"\"\"\n    Uploads design drafts to a shared client folder.\n\n    Parameters:\n        client_folder_path (str): The path to the shared client folder.\n        drafts_files (List[str]): A list of file paths to the design drafts.\n\n    Returns:\n        None\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def upload_design_drafts(\n    client_folder_path: str,\n    drafts_files: List[str],\n) -> None:\n    \"\"\"\n    Uploads design drafts to a shared client folder.\n\n    Parameters:\n        client_folder_path (str): The path to the shared client folder.\n        drafts_files (List[str]): A list of file paths to the design drafts.\n\n    Returns:\n        None\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "upload_design_drafts",
            "description": "Uploads design drafts to a shared client folder.",
            "parameters": {
                "type": "object",
                "properties": {
                    "client_folder_path": {
                        "type": "string",
                        "description": "The path to the shared client folder."
                    },
                    "drafts_files": {
                        "type": "array",
                        "description": "A list of file paths to the design drafts.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "client_folder_path",
                    "drafts_files"
                ]
            },
            "returns": {
                "type": "null",
                "description": "None"
            }
        }
    }
}
{
    "function_id": "design-consultant-7",
    "task": "Download client feedback or annotations from a shared folder.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Download client feedback or annotations from a shared folder."
    },
    "snippet": "def download_client_feedback(\n    shared_folder_path: str,\n    file_name: str\n) -> Dict[str, Any]:\n    \"\"\"\n    Downloads client feedback or annotations from a shared folder.\n\n    Parameters:\n        shared_folder_path (str): The path of the shared folder.\n        file_name (str): The name of the file to download.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the downloaded data.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def download_client_feedback(\n    shared_folder_path: str,\n    file_name: str\n) -> Dict[str, Any]:\n    \"\"\"\n    Downloads client feedback or annotations from a shared folder.\n\n    Parameters:\n        shared_folder_path (str): The path of the shared folder.\n        file_name (str): The name of the file to download.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the downloaded data.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": null
}
{
    "function_id": "design-consultant-8",
    "task": "Post updates to a project management tool or dashboard.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Post updates to a project management tool or dashboard."
    },
    "snippet": "def post_project_updates(\n    project_id: str,\n    update: str,\n    timestamp: str,\n    user_id: str):\n    \"\"\"\n    Posts updates to a project management tool or dashboard.\n\n    Parameters:\n        project_id (str): The ID of the project to update.\n        update (str): The update or changes made to the project.\n        timestamp (str): The time the update was made in YYYY-MM-DD HH:MM:SS format.\n        user_id (str): The ID of the user who made the update.\n\n    Returns:\n        None\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def post_project_updates(\n    project_id: str,\n    update: str,\n    timestamp: str,\n    user_id: str):\n    \"\"\"\n    Posts updates to a project management tool or dashboard.\n\n    Parameters:\n        project_id (str): The ID of the project to update.\n        update (str): The update or changes made to the project.\n        timestamp (str): The time the update was made in YYYY-MM-DD HH:MM:SS format.\n        user_id (str): The ID of the user who made the update.\n\n    Returns:\n        None\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "post_project_updates",
            "description": "Posts updates to a project management tool or dashboard.",
            "parameters": {
                "type": "object",
                "properties": {
                    "project_id": {
                        "type": "string",
                        "description": "The ID of the project to update."
                    },
                    "update": {
                        "type": "string",
                        "description": "The update or changes made to the project."
                    },
                    "timestamp": {
                        "type": "string",
                        "description": "The time the update was made in YYYY-MM-DD HH:MM:SS format."
                    },
                    "user_id": {
                        "type": "string",
                        "description": "The ID of the user who made the update."
                    }
                },
                "required": [
                    "project_id",
                    "update",
                    "timestamp",
                    "user_id"
                ]
            },
            "returns": {
                "type": "object",
                "description": "None"
            }
        }
    }
}
{
    "function_id": "design-consultant-9",
    "task": "Collect final approval from the client on design deliverables.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Collect final approval from the client on design deliverables."
    },
    "snippet": "def get_final_approval(\n    client_name: str,\n    design_deliverables: List[Dict[str, str]]\n) -> Dict[str, bool]:\n    \"\"\"\n    Collects final approval from the client on design deliverables.\n\n    Parameters:\n        client_name (str): The name of the client giving approval.\n        design_deliverables (List[Dict[str, str]]): A list of dictionaries containing design deliverable details.\n                                                    Each dictionary should have 'design_id' and 'design_name' keys.\n                                                    \n    Returns:\n        Dict[str, bool]: A dictionary with each 'design_id' as a key and the approval status as a boolean value.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def get_final_approval(\n    client_name: str,\n    design_deliverables: List[Dict[str, str]]\n) -> Dict[str, bool]:\n    \"\"\"\n    Collects final approval from the client on design deliverables.\n\n    Parameters:\n        client_name (str): The name of the client giving approval.\n        design_deliverables (List[Dict[str, str]]): A list of dictionaries containing design deliverable details.\n                                                    Each dictionary should have 'design_id' and 'design_name' keys.\n                                                    \n    Returns:\n        Dict[str, bool]: A dictionary with each 'design_id' as a key and the approval status as a boolean value.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "get_final_approval",
            "description": "Collects final approval from the client on design deliverables.",
            "parameters": {
                "type": "object",
                "properties": {
                    "client_name": {
                        "type": "string",
                        "description": "The name of the client giving approval."
                    },
                    "design_deliverables": {
                        "type": "array",
                        "description": "A list of dictionaries containing design deliverable details. Each dictionary should have 'design_id' and 'design_name' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "design_id": {
                                    "type": "string"
                                },
                                "design_name": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "design_id",
                                "design_name"
                            ]
                        }
                    }
                },
                "required": [
                    "client_name",
                    "design_deliverables"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "dict": {
                        "type": "object",
                        "description": "A dictionary with each 'design_id' as a key and the approval status as a boolean value."
                    }
                }
            }
        }
    }
}
{
    "function_id": "design-consultant-10",
    "task": "Send a client satisfaction survey upon project completion.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Send a client satisfaction survey upon project completion."
    },
    "snippet": "def send_client_satisfaction_survey(\n    client_email: str,\n    project_name: str,\n) -> bool:\n    \"\"\"\n    Sends a client satisfaction survey upon project completion.\n\n    Parameters:\n        client_email (str): Email address of the recipient client.\n        project_name (str): Name of the completed project.\n\n    Returns:\n        bool: True if the survey was sent successfully, False otherwise.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def send_client_satisfaction_survey(\n    client_email: str,\n    project_name: str,\n) -> bool:\n    \"\"\"\n    Sends a client satisfaction survey upon project completion.\n\n    Parameters:\n        client_email (str): Email address of the recipient client.\n        project_name (str): Name of the completed project.\n\n    Returns:\n        bool: True if the survey was sent successfully, False otherwise.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "send_client_satisfaction_survey",
            "description": "Sends a client satisfaction survey upon project completion.",
            "parameters": {
                "type": "object",
                "properties": {
                    "client_email": {
                        "type": "string",
                        "description": "Email address of the recipient client."
                    },
                    "project_name": {
                        "type": "string",
                        "description": "Name of the completed project."
                    }
                },
                "required": [
                    "client_email",
                    "project_name"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "bool": {
                        "type": "boolean",
                        "description": "True if the survey was sent successfully, False otherwise."
                    }
                }
            }
        }
    }
}
{
    "function_id": "design-consultant-11",
    "task": "Request testimonials or referrals from satisfied clients.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Request testimonials or referrals from satisfied clients."
    },
    "snippet": "def request_testimonials(\n    clients: List[Dict[str, Union[str, int]]]\n) -> List[str]:\n    \"\"\"\n    Requests testimonials or referrals from satisfied clients.\n    \n    Parameters:\n        clients (List[Dict[str, Union[str, int]]]): A list of dictionaries containing client details. \n                                                    Each dictionary should have 'name' and 'email' keys.\n\n    Returns:\n        List[str]: A list containing the responses from the clients. Each entry in the list represents a client's response.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def request_testimonials(\n    clients: List[Dict[str, Union[str, int]]]\n) -> List[str]:\n    \"\"\"\n    Requests testimonials or referrals from satisfied clients.\n    \n    Parameters:\n        clients (List[Dict[str, Union[str, int]]]): A list of dictionaries containing client details. \n                                                    Each dictionary should have 'name' and 'email' keys.\n\n    Returns:\n        List[str]: A list containing the responses from the clients. Each entry in the list represents a client's response.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "request_testimonials",
            "description": "Requests testimonials or referrals from satisfied clients.",
            "parameters": {
                "type": "object",
                "properties": {
                    "clients": {
                        "type": "array",
                        "description": "A list of dictionaries containing client details. Each dictionary should have 'name' and 'email' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "email": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "name",
                                "email"
                            ]
                        }
                    }
                },
                "required": [
                    "clients"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "responses": {
                        "type": "array",
                        "description": "A list containing the responses from the clients. Each entry in the list represents a client's response.",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    }
}
{
    "function_id": "design-consultant-12",
    "task": "Purchase or renew software licenses for design tools.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Purchase or renew software licenses for design tools."
    },
    "snippet": "def renew_software_licenses(\n    software_names: List[str],\n    licenses_needed: int,\n    renew_dates: List[str],\n) -> Dict[str, str]:\n    \"\"\"\n    Purchases or renews software licenses for design tools.\n\n    Parameters:\n        software_names (List[str]): A list of the software for which licenses need to be purchased or renewed.\n        licenses_needed (int): The number of licenses to buy or renew for each software.\n        renew_dates (List[str]): A list of renewal dates in YYYY-MM-DD format.\n\n    Returns:\n        Dict[str, str]: A dictionary with each software's name as a key \n                        and the renewal status as a value.\n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def renew_software_licenses(\n    software_names: List[str],\n    licenses_needed: int,\n    renew_dates: List[str],\n) -> Dict[str, str]:\n    \"\"\"\n    Purchases or renews software licenses for design tools.\n\n    Parameters:\n        software_names (List[str]): A list of the software for which licenses need to be purchased or renewed.\n        licenses_needed (int): The number of licenses to buy or renew for each software.\n        renew_dates (List[str]): A list of renewal dates in YYYY-MM-DD format.\n\n    Returns:\n        Dict[str, str]: A dictionary with each software's name as a key \n                        and the renewal status as a value.\n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "renew_software_licenses",
            "description": "Purchases or renews software licenses for design tools.",
            "parameters": {
                "type": "object",
                "properties": {
                    "software_names": {
                        "type": "array",
                        "description": "A list of the software for which licenses need to be purchased or renewed.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "licenses_needed": {
                        "type": "integer",
                        "description": "The number of licenses to buy or renew for each software."
                    },
                    "renew_dates": {
                        "type": "array",
                        "description": "A list of renewal dates in YYYY-MM-DD format.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "software_names",
                    "licenses_needed",
                    "renew_dates"
                ]
            },
            "returns": {
                "type": "object",
                "description": "A dictionary with each software's name as a key and the renewal status as a value.",
                "properties": {
                    "type": "object",
                    "properties": {
                        "software_name": {
                            "type": "string"
                        },
                        "renewal_status": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "software_name",
                        "renewal_status"
                    ]
                }
            }
        }
    }
}
{
    "function_id": "design-consultant-13",
    "task": "Back up project files to a secure cloud storage.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Back up project files to a secure cloud storage."
    },
    "snippet": "def backup_project_files_to_cloud(\n    project_files: List[str],\n    cloud_storage_credentials: Dict[str, str],\n) -> str:\n    \"\"\"\n    Backs up project files to a secure cloud storage and returns a confirmation message.\n\n    Parameters:\n        project_files (List[str]): A list of project file paths to be backed up.\n        cloud_storage_credentials (Dict[str, str]): A dictionary containing cloud storage login credentials. \n                                                     The dictionary should have 'username' and 'password' keys.\n\n    Returns:\n        str: A confirmation message after successful backup.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def backup_project_files_to_cloud(\n    project_files: List[str],\n    cloud_storage_credentials: Dict[str, str],\n) -> str:\n    \"\"\"\n    Backs up project files to a secure cloud storage and returns a confirmation message.\n\n    Parameters:\n        project_files (List[str]): A list of project file paths to be backed up.\n        cloud_storage_credentials (Dict[str, str]): A dictionary containing cloud storage login credentials. \n                                                     The dictionary should have 'username' and 'password' keys.\n\n    Returns:\n        str: A confirmation message after successful backup.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": null
}
{
    "function_id": "design-consultant-14",
    "task": "Submit freelance tax forms or documentation.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Submit freelance tax forms or documentation."
    },
    "snippet": "```python\ndef submit_freelance_tax_forms(\n    freelancer_data: Dict[str, str],\n    tax_forms: List[Dict[str, str]],\n) -> str:\n    \"\"\"\n    Submits freelance tax forms or documentation and returns the submission status.\n\n    Parameters:\n        freelancer_data (Dict[str, str]): A dictionary containing freelancer details.\n                                          This dictionary should have 'freelancer_id' and 'freelancer_name' as keys.\n        tax_forms (List[Dict[str, str]]): A list of dictionaries containing the tax form details.\n                                          Each dictionary should have 'form_id', 'form_type', and 'form_data' keys.\n                                          \n    Returns:\n        str: A string indicating the submission status.\n    \"\"\"\n    pass\n```\nThis python function suggests the structure of a function to submit freelance tax forms. The actual implementation would depend on the specific way in which the forms need to be submitted: for instance, if they're being sent to a database, an API, or some other system, which is not specified in the prompt.",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "```python\ndef submit_freelance_tax_forms(\n    freelancer_data: Dict[str, str],\n    tax_forms: List[Dict[str, str]],\n) -> str:\n    \"\"\"\n    Submits freelance tax forms or documentation and returns the submission status.\n\n    Parameters:\n        freelancer_data (Dict[str, str]): A dictionary containing freelancer details.\n                                          This dictionary should have 'freelancer_id' and 'freelancer_name' as keys.\n        tax_forms (List[Dict[str, str]]): A list of dictionaries containing the tax form details.\n                                          Each dictionary should have 'form_id', 'form_type', and 'form_data' keys.\n                                          \n    Returns:\n        str: A string indicating the submission status.\n    \"\"\"\n    pass\n```\nThis python function suggests the structure of a function to submit freelance tax forms. The actual implementation would depend on the specific way in which the forms need to be submitted: for instance, if they're being sent to a database, an API, or some other system, which is not specified in the prompt.",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "submit_freelance_tax_forms",
            "description": "Submits freelance tax forms or documentation and returns the submission status.",
            "parameters": {
                "type": "object",
                "properties": {
                    "freelancer_data": {
                        "type": "object",
                        "description": "A dictionary containing freelancer details. This dictionary should have 'freelancer_id' and 'freelancer_name' as keys.",
                        "properties": {
                            "freelancer_id": {
                                "type": "string",
                                "description": "Freelancer's unique ID."
                            },
                            "freelancer_name": {
                                "type": "string",
                                "description": "Freelancer's name."
                            }
                        },
                        "required": [
                            "freelancer_id",
                            "freelancer_name"
                        ]
                    },
                    "tax_forms": {
                        "type": "array",
                        "description": "A list of dictionaries containing the tax form details. Each dictionary should have 'form_id', 'form_type', and 'form_data' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "form_id": {
                                    "type": "string",
                                    "description": "Form's unique ID."
                                },
                                "form_type": {
                                    "type": "string",
                                    "description": "Type of the tax form."
                                },
                                "form_data": {
                                    "type": "string",
                                    "description": "Data of the tax form."
                                }
                            },
                            "required": [
                                "form_id",
                                "form_type",
                                "form_data"
                            ]
                        }
                    }
                },
                "required": [
                    "freelancer_data",
                    "tax_forms"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "Status": {
                        "type": "string",
                        "description": "A string indicating the submission status."
                    }
                }
            }
        }
    }
}
{
    "function_id": "design-consultant-15",
    "task": "Update portfolio with new work samples.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Update portfolio with new work samples."
    },
    "snippet": "def update_portfolio(\n    portfolio: List[Dict[str, Union[str, bytes]]],\n    new_samples: List[Dict[str, Union[str, bytes]]]\n) -> List[Dict[str, Union[str, bytes]]]:\n    \"\"\"\n    Updates a portfolio with new work samples.\n\n    Parameters:\n        portfolio (List[Dict[str, Union[str, bytes]]]): The existing portfolio. Each dictionary\n                                                        represents a work sample, which could include\n                                                        'title', 'description' and 'file' keys.\n        new_samples (List[Dict[str, Union[str, bytes]]]): The new work samples to be added to the portfolio.\n                                                          Each dictionary should contain 'title',\n                                                          'description' and 'file' keys.\n        \n    Returns:\n        List[Dict[str, Union[str, bytes]]]: The updated portfolio now containing the new work samples.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def update_portfolio(\n    portfolio: List[Dict[str, Union[str, bytes]]],\n    new_samples: List[Dict[str, Union[str, bytes]]]\n) -> List[Dict[str, Union[str, bytes]]]:\n    \"\"\"\n    Updates a portfolio with new work samples.\n\n    Parameters:\n        portfolio (List[Dict[str, Union[str, bytes]]]): The existing portfolio. Each dictionary\n                                                        represents a work sample, which could include\n                                                        'title', 'description' and 'file' keys.\n        new_samples (List[Dict[str, Union[str, bytes]]]): The new work samples to be added to the portfolio.\n                                                          Each dictionary should contain 'title',\n                                                          'description' and 'file' keys.\n        \n    Returns:\n        List[Dict[str, Union[str, bytes]]]: The updated portfolio now containing the new work samples.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "update_portfolio",
            "description": "Updates a portfolio with new work samples.",
            "parameters": {
                "type": "object",
                "properties": {
                    "portfolio": {
                        "type": "array",
                        "description": "The existing portfolio. Each dictionary represents a work sample, which could include 'title', 'description' and 'file' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "title": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                },
                                "file": {
                                    "type": [
                                        "string",
                                        "byte"
                                    ]
                                }
                            },
                            "required": [
                                "title",
                                "description",
                                "file"
                            ]
                        }
                    },
                    "new_samples": {
                        "type": "array",
                        "description": "The new work samples to be added to the portfolio. Each dictionary should contain 'title', 'description' and 'file' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "title": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                },
                                "file": {
                                    "type": [
                                        "string",
                                        "byte"
                                    ]
                                }
                            },
                            "required": [
                                "title",
                                "description",
                                "file"
                            ]
                        }
                    }
                },
                "required": [
                    "portfolio",
                    "new_samples"
                ]
            },
            "returns": {
                "type": "array",
                "description": "The updated portfolio now containing the new work samples.",
                "items": {
                    "type": "object",
                    "properties": {
                        "title": {
                            "type": "string"
                        },
                        "description": {
                            "type": "string"
                        },
                        "file": {
                            "type": [
                                "string",
                                "byte"
                            ]
                        }
                    }
                }
            }
        }
    }
}
{
    "function_id": "design-consultant-16",
    "task": "Share new work or achievements on professional social media.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Share new work or achievements on professional social media."
    },
    "snippet": "def share_work_on_social_media(\n    platform: str, \n    work_details: Dict[str, str],\n    user_credentials: Dict[str, str]\n) -> bool:\n    \"\"\"\n    Shares the user's new work or achievements on a specified professional social media platform.\n    \n    Parameters:\n        platform (str): The social media platform on which to share the work or achievements.\n        work_details (Dict[str, str]): A dictionary containing details of the work or achievements.\n                                        Each dictionary should have 'title' and 'description' keys.\n        user_credentials (Dict[str, str]): A dictionary containing the user's login information for the platform.\n                                            Each dictionary should have 'username' and 'password' keys.\n    \n    Returns:\n        bool: Returns True if successful, False if an error occurred.\n    \"\"\"\n",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def share_work_on_social_media(\n    platform: str, \n    work_details: Dict[str, str],\n    user_credentials: Dict[str, str]\n) -> bool:\n    \"\"\"\n    Shares the user's new work or achievements on a specified professional social media platform.\n    \n    Parameters:\n        platform (str): The social media platform on which to share the work or achievements.\n        work_details (Dict[str, str]): A dictionary containing details of the work or achievements.\n                                        Each dictionary should have 'title' and 'description' keys.\n        user_credentials (Dict[str, str]): A dictionary containing the user's login information for the platform.\n                                            Each dictionary should have 'username' and 'password' keys.\n    \n    Returns:\n        bool: Returns True if successful, False if an error occurred.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": null
}
{
    "function_id": "design-consultant-17",
    "task": "Register for professional development courses or webinars.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Register for professional development courses or webinars."
    },
    "snippet": "def register_for_courses(\n    participant_name: str,\n    courses: List[str],\n    preferred_date: str,\n    payment_details: Dict[str, Union[str, int]],\n) -> Dict[str, str]:\n    \"\"\"\n    Registers a participant for professional development courses or webinars, and returns registration details.\n    \n    Parameters:\n        participant_name (str): The name of the participant.\n        courses (List[str]): A list of courses or webinars to register for.\n        preferred_date (str): The preferred date for course/webinar in YYYY-MM-DD format.\n        payment_details (Dict[str, Union[str, int]]): A dictionary containing payment details.\n                                                      It must contain 'card_number', 'expiry_date', \n                                                      and 'CVV' keys. \n\n    Returns:\n        Dict[str, str]: A dictionary with 'registration_id' and 'confirmation_status' as keys and \n                        the related values as values.\n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def register_for_courses(\n    participant_name: str,\n    courses: List[str],\n    preferred_date: str,\n    payment_details: Dict[str, Union[str, int]],\n) -> Dict[str, str]:\n    \"\"\"\n    Registers a participant for professional development courses or webinars, and returns registration details.\n    \n    Parameters:\n        participant_name (str): The name of the participant.\n        courses (List[str]): A list of courses or webinars to register for.\n        preferred_date (str): The preferred date for course/webinar in YYYY-MM-DD format.\n        payment_details (Dict[str, Union[str, int]]): A dictionary containing payment details.\n                                                      It must contain 'card_number', 'expiry_date', \n                                                      and 'CVV' keys. \n\n    Returns:\n        Dict[str, str]: A dictionary with 'registration_id' and 'confirmation_status' as keys and \n                        the related values as values.\n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "register_for_courses",
            "description": "Registers a participant for professional development courses or webinars, and returns registration details.",
            "parameters": {
                "type": "object",
                "properties": {
                    "participant_name": {
                        "type": "string",
                        "description": "The name of the participant."
                    },
                    "courses": {
                        "type": "array",
                        "description": "A list of courses or webinars to register for.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "preferred_date": {
                        "type": "string",
                        "description": "The preferred date for course/webinar in YYYY-MM-DD format."
                    },
                    "payment_details": {
                        "type": "object",
                        "description": "A dictionary containing payment details. It must contain 'card_number', 'expiry_date', and 'CVV' keys.",
                        "properties": {
                            "card_number": {
                                "type": "string"
                            },
                            "expiry_date": {
                                "type": "string"
                            },
                            "CVV": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "card_number",
                            "expiry_date",
                            "CVV"
                        ]
                    }
                },
                "required": [
                    "participant_name",
                    "courses",
                    "preferred_date",
                    "payment_details"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "registration_id": {
                        "type": "string",
                        "description": "A unique identifier for the registration."
                    },
                    "confirmation_status": {
                        "type": "string",
                        "description": "The status of the registration confirmation."
                    }
                }
            }
        }
    }
}
{
    "function_id": "design-consultant-18",
    "task": "Renew membership in professional design organizations.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Renew membership in professional design organizations."
    },
    "snippet": "def renew_membership(\n    member_id: str,\n    organization_name: str,\n    renewal_date: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Renews membership in professional design organizations and returns renewal status.\n    \n    Parameters:\n        member_id (str): The id of the member renewing their membership.\n        organization_name (str): The name of the professional design organization.\n        renewal_date (str): The date of renewal in YYYY-MM-DD format.                                          \n    \n    Returns:\n        Dict[str, str]: A dictionary with 'renewal_status' as a key and the status of the renewal as a value.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def renew_membership(\n    member_id: str,\n    organization_name: str,\n    renewal_date: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Renews membership in professional design organizations and returns renewal status.\n    \n    Parameters:\n        member_id (str): The id of the member renewing their membership.\n        organization_name (str): The name of the professional design organization.\n        renewal_date (str): The date of renewal in YYYY-MM-DD format.                                          \n    \n    Returns:\n        Dict[str, str]: A dictionary with 'renewal_status' as a key and the status of the renewal as a value.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "renew_membership",
            "description": "Renews membership in professional design organizations and returns renewal status.",
            "parameters": {
                "type": "object",
                "properties": {
                    "member_id": {
                        "type": "string",
                        "description": "The id of the member renewing their membership."
                    },
                    "organization_name": {
                        "type": "string",
                        "description": "The name of the professional design organization."
                    },
                    "renewal_date": {
                        "type": "string",
                        "description": "The date of renewal in YYYY-MM-DD format."
                    }
                },
                "required": [
                    "member_id",
                    "organization_name",
                    "renewal_date"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "renewal_status": {
                        "type": "string",
                        "description": "The status of the renewal"
                    }
                }
            }
        }
    }
}
{
    "function_id": "design-consultant-19",
    "task": "Compile and analyze client feedback for quality improvement.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Compile and analyze client feedback for quality improvement."
    },
    "snippet": "def analyze_client_feedback(\n    feedbacks: List[Dict[str, Any]]\n) -> Dict[str, Any]:\n    \"\"\"\n    Compiles and analyzes client feedback for quality improvement.\n\n    Parameters:\n        feedbacks (List[Dict[str, Any]]): A list of dictionaries containing feedback details.\n                                          Each dictionary should have 'client_id', 'feedback', and 'date' keys.\n                                          \n    Returns:\n        Dict[str, Any]: A dictionary with analysis of the client feedback prepared for quality improvement.\n    \"\"\"",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def analyze_client_feedback(\n    feedbacks: List[Dict[str, Any]]\n) -> Dict[str, Any]:\n    \"\"\"\n    Compiles and analyzes client feedback for quality improvement.\n\n    Parameters:\n        feedbacks (List[Dict[str, Any]]): A list of dictionaries containing feedback details.\n                                          Each dictionary should have 'client_id', 'feedback', and 'date' keys.\n                                          \n    Returns:\n        Dict[str, Any]: A dictionary with analysis of the client feedback prepared for quality improvement.\n    \"\"\"",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": null
}
{
    "function_id": "design-consultant-20",
    "task": "Review and update standard contract templates.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Review and update standard contract templates."
    },
    "snippet": "def update_contract_templates(\n    template_list: List[Dict[str, str]],\n    changes: Dict[str, str]\n) -> List[Dict[str, str]]:\n    \"\"\"\n    Reviews and updates standard contract templates.\n\n    Parameters:\n        template_list (List[Dict[str, str]]): A list of dictionaries containing contract templates.\n                                              Each dictionary should have 'name' and 'content' keys.\n\n        changes (Dict[str, str]): A dictionary containing the changes to be made.\n                                  Keys would be the 'name' of the contract and the values would be the updated 'content'.\n\n    Returns:\n        List[Dict[str, str]]: A list of dictionaries containing the updated contract templates.\n    \"\"\"\n    pass",
    "description_metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a json description of this function.\nReturn the output as this example:\n    {{\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def update_contract_templates(\n    template_list: List[Dict[str, str]],\n    changes: Dict[str, str]\n) -> List[Dict[str, str]]:\n    \"\"\"\n    Reviews and updates standard contract templates.\n\n    Parameters:\n        template_list (List[Dict[str, str]]): A list of dictionaries containing contract templates.\n                                              Each dictionary should have 'name' and 'content' keys.\n\n        changes (Dict[str, str]): A dictionary containing the changes to be made.\n                                  Keys would be the 'name' of the contract and the values would be the updated 'content'.\n\n    Returns:\n        List[Dict[str, str]]: A list of dictionaries containing the updated contract templates.\n    \"\"\"\n    pass",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    },
    "description": {
        "function_description": {
            "name": "update_contract_templates",
            "description": "Reviews and updates standard contract templates.",
            "parameters": {
                "type": "object",
                "properties": {
                    "template_list": {
                        "type": "array",
                        "description": "A list of dictionaries containing contract templates. Each dictionary should have 'name' and 'content' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "content": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "name",
                                "content"
                            ]
                        }
                    },
                    "changes": {
                        "type": "object",
                        "description": "A dictionary containing the changes to be made. Keys would be the 'name' of the contract and the values would be the updated 'content'.",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "content": {
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "template_list",
                    "changes"
                ]
            },
            "returns": {
                "type": "array",
                "description": "A list of dictionaries containing the updated contract templates.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "content": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "name",
                        "content"
                    ]
                }
            }
        }
    }
}
