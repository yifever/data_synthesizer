{
    "function_id": "twitch-1",
    "task": "Start or stop the Twitch stream.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Start or stop the Twitch stream."
    },
    "snippet": "def control_twitch_stream(\n    status: str\n) -> str:\n    \"\"\"\n    Starts or stops the Twitch stream.\n\n    Parameters:\n        status (str): The desired status of the stream. Valid values are 'start' and 'stop'.\n                      \n    Returns:\n        str: A message indicating the new status of the stream.\n    \"\"\"\n"
}
{
    "function_id": "twitch-2",
    "task": "Schedule a future Twitch stream.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Schedule a future Twitch stream."
    },
    "snippet": "def schedule_twitch_stream(\n    channel_id: str,\n    stream_date: str,\n    stream_time: str,\n    duration: str,\n    title: str,\n    description: str,\n) -> str:\n    \"\"\"\n    Schedules a future Twitch stream and returns a confirmation message.\n\n    Parameters:\n        channel_id (str): The ID of the Twitch channel where the stream will be held.\n        stream_date (str): The date of the stream in YYYY-MM-DD format.\n        stream_time (str): The start time of the stream in HH:MM format.\n        duration (str): The expected duration of the stream in HH:MM format.\n        title (str): The title of the stream.\n        description (str): A brief description of the stream.\n\n    Returns:\n        str: A confirmation message indicating that the stream has been scheduled.\n    \"\"\"\n"
}
{
    "function_id": "twitch-3",
    "task": "Change the title and category of the current stream.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Change the title and category of the current stream."
    },
    "snippet": "def update_stream_details(\n    stream_id: str,\n    new_title: str,\n    new_category: str,\n) -> None:\n    \"\"\"\n    Update the title and category of the current stream.\n\n    Parameters:\n        stream_id (str): The ID of the stream.\n        new_title (str): The new title to assign to the stream.\n        new_category (str): The new category to assign to the stream.\n\n    Returns:\n        None\n    \"\"\"\n"
}
{
    "function_id": "twitch-4",
    "task": "Retrieve current viewer count and other analytics.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Retrieve current viewer count and other analytics."
    },
    "snippet": "def get_viewer_analytics() -> Dict[str, Union[int, List[Dict[str, Any]]]]:\n    \"\"\"\n    Retrieves current viewer count and other related analytics.\n\n    Returns:\n        Dict[str, Union[int, List[Dict[str, Any]]]]: A dictionary with 'current_viewer_count' as a key \n        and the current viewer count as a value, and 'other_analytics' as a key and a list of dictionaries \n        containing other analytics data.\n    \"\"\"\n"
}
{
    "function_id": "twitch-5",
    "task": "Manage and post automated messages in the chat.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Manage and post automated messages in the chat."
    },
    "snippet": "def post_automated_messages(\n    chat_id: str, \n    messages: List[Dict[str, Union[str, datetime.datetime]]]\n) -> None:\n    \"\"\"\n    Manages and posts automated messages in the chat.\n\n    Parameters:\n        chat_id (str): The ID of the chat where messages need to be posted.\n        messages (List[Dict[str, Union[str, datetime.datetime]]]): \n                    A list of dictionaries containing message details.\n                    Each dictionary should have 'text' and 'post_at' keys.\n                    'text' is the body of the message and 'post_at' is \n                    the time when the message should be posted, in datetime object format.\n    \n    Returns:\n        None\n    \"\"\"\n"
}
{
    "function_id": "twitch-6",
    "task": "Activate or deactivate certain emotes in the chat.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Activate or deactivate certain emotes in the chat."
    },
    "snippet": "def modify_emotes(\n    emote: str,\n    status: bool,\n) -> None:\n    \"\"\"\n    Activates or deactivates certain emotes in the chat.\n    \n    Parameters:\n        emote (str): The identifier of the emote.\n        status (bool): The new status of the emote; 'True' for activate and 'False' for deactivate.\n    \"\"\"\n"
}
{
    "function_id": "twitch-7",
    "task": "Initiate subscriber-only mode in the chat.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Initiate subscriber-only mode in the chat."
    },
    "snippet": "def enable_subscriber_only_chat(\n    channel_id: str,\n    operator_id: str,\n) -> bool:\n    \"\"\"\n    Initiates subscriber-only mode in a chat attached to a specific channel.\n    \n    Parameters:\n        channel_id (str): The unique identifier for the channel whose chat will be modified.\n        operator_id (str): The unique identifier for the chat moderator or channel owner initiating the action.\n                  \n    Returns:\n        bool: True if the operation was successful, False otherwise.\n    \"\"\""
}
{
    "function_id": "twitch-8",
    "task": "Run advertisements at specified intervals.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Run advertisements at specified intervals."
    },
    "snippet": "def run_advertisements(\n    ad_content: str, \n    start_time: datetime, \n    interval: timedelta\n) -> None:\n    \"\"\"\n    Runs advertisements at specified intervals.\n    \n    Parameters:\n        ad_content (str): The content of the advertisement to be displayed.\n        start_time (datetime): The time when the advertisement should start running.\n        interval (timedelta): The time interval at which the advertisement should be displayed again.\n\n    Returns:\n        None\n    \"\"\"\n"
}
{
    "function_id": "twitch-9",
    "task": "Create and manage custom chat commands.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Create and manage custom chat commands."
    },
    "snippet": "def manage_chat_commands(\n    command: str,\n    parameters: Dict[str, Any],\n    actions: Callable,\n) -> Dict[str, Any]:\n    \"\"\"\n    Creates and manages custom chat commands and perform respective actions.\n\n    Parameters:\n        command (str): The custom command to execute.\n        parameters (Dict[str, Any]): A dictionary containing parameters related to the command.\n                                     Each dictionary could have varying keys depending on the action required.\n        actions (Callable): A function/method which contains the steps to execute when a command is called.\n\n    Returns:\n        Dict[str, Any]: A dictionary with 'status' and 'message' as keys.\n                        'status' is a boolean which indicates if the command was successfully executed,\n                        'message' provides additional information or result of the command execution.\n    \"\"\"\n"
}
{
    "function_id": "twitch-10",
    "task": "Automatically shout-out to new subscribers, followers, or donors.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Automatically shout-out to new subscribers, followers, or donors."
    },
    "snippet": "def shout_out_new_subscribers_followers_donors(\n    new_subscribers: List[str],\n    new_followers: List[str],\n    new_donors: Dict[str, float]\n) -> None:\n    \"\"\"\n    Sends a shout-out to new subscribers, followers, or donors.\n\n    Parameters:\n        new_subscribers (List[str]): The list of new subscribers.\n        new_followers (List[str]): The list of new followers.\n        new_donors (Dict[str, float]): A dictionary containing donor names as keys and donation amounts as values.\n    \"\"\"\n"
}
{
    "function_id": "twitch-11",
    "task": "Create and manage stream markers for highlights.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Create and manage stream markers for highlights."
    },
    "snippet": "```python\ndef manage_stream_markers(\n    marker_name: str,\n    marker_description: str,\n    marker_time: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Creates and manages stream markers for highlights.\n    \n    Parameters:\n        marker_name (str): The name of the stream marker.\n        marker_description (str): Description of the stream marker.\n        marker_time (str): The time of the marker in the stream, in HH:MM:SS format.\n        \n    Returns:\n        Dict[str, str]: A dictionary with 'marker_ID' as a key and the ID of the created stream marker as a value.\n    \"\"\"\n```\n"
}
{
    "function_id": "twitch-12",
    "task": "Retrieve a list of current subscribers.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Retrieve a list of current subscribers."
    },
    "snippet": "def get_current_subscribers() -> List[str]:\n    \"\"\"\n    Retrieves the list of current subscribers.\n    \n    Returns:\n        List[str]: A list of strings containing the names of current subscribers.\n    \"\"\"\n"
}
{
    "function_id": "twitch-13",
    "task": "Automatically ban or time-out users based on chat behavior.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Automatically ban or time-out users based on chat behavior."
    },
    "snippet": "```python\ndef regulate_user(\n    user_id: str, \n    user_messages: List[str], \n    violation_threshold: int, \n    time_out_period: int,\n) -> Union[bool, Tuple[bool, int]]:\n    \"\"\"\n    Regulates users based on their chat behavior and applies restrictions when necessary.\n\n    Parameters:\n        user_id (str): The ID of the user.\n        user_messages (List[str]): List of recent messages from the user.\n        violation_threshold (int): The threshold for the number of violations which would result in a ban/time-out.\n        time_out_period (int): The length of time for which the user should be timed out (in minutes).\n\n    Returns:\n        bool: Returns True if the user is banned permanently.\n        Tuple[bool, int]: Returns a tuple (False, minutes) if the user is timed out for 'minutes' amount of time.\n    \"\"\"\n```\n"
}
{
    "function_id": "twitch-14",
    "task": "Create and manage polls or voting activities during the stream.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Create and manage polls or voting activities during the stream."
    },
    "snippet": "def manage_polls_during_stream(\n    poll_id: str,\n    options: Dict[str, str],\n    status: str,\n) -> Dict[str, int]:\n    \"\"\"\n    Manages polls or voting activities during the stream.\n\n    Parameters:\n        poll_id (str): The id of the poll.\n        options (Dict[str, str]): A dictionary containing the options for the poll. Keys represent option identifiers and values represent option descriptions.\n        status (str): The status of the poll. Possible values are 'open', 'closed', 'result'.\n\n    Returns:\n        Dict[str, int]: A dictionary with options identifiers as keys and corresponding vote counts as values.\n    \"\"\""
}
{
    "function_id": "twitch-15",
    "task": "Display alerts or notifications for in-stream events, like receiving a donation.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Display alerts or notifications for in-stream events, like receiving a donation."
    },
    "snippet": "def display_notification_for_donations(\n    event_stream: Iterable[Dict[str, Any]]\n) -> None:\n    \"\"\"\n    Displays alerts or notifications for in-stream events, \n    like receiving a donation.\n    \n    Parameters:\n        event_stream (Iterable[Dict[str, Any]]): An iterable of dictionaries containing event details. \n                                                  Each dictionary should at least have 'type' and 'payload' keys.\n                                                  \n    Returns:\n        None\n    \"\"\"\n"
}
{
    "function_id": "twitch-16",
    "task": "Retrieve historical data such as past streams, viewer metrics, and chat logs.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Retrieve historical data such as past streams, viewer metrics, and chat logs."
    },
    "snippet": "def retrieve_historical_data(\n    channel_id: str,\n    start_date: str,\n    end_date: str\n) -> Dict[str, List[Union[str, int]]]:\n    \"\"\"\n    Retrieve historical data such as past streams, viewer metrics, and chat logs from a specific channel.\n    \n    Parameters:\n        channel_id (str): The ID of the channel to retrieve data from.\n        start_date (str): The start date to retrieve data from in YYYY-MM-DD format.\n        end_date (str): The end date to retrieve data up to in YYYY-MM-DD format.\n                                          \n    Returns:\n        Dict[str, List[Union[str, int]]]: A dictionary containing historical data.\n                                          The keys could be 'past_streams', 'viewer_metrics', and 'chat_logs'.\n                                          Each key corresponds to a list containing the historical records.\n                                          The 'past_streams' list contains streams in a string format.\n                                          The 'viewer_metrics' list contains metrics in an integer format.\n                                          The 'chat_logs' list contains chat logs as string.\n    \"\"\"\n"
}
{
    "function_id": "twitch-17",
    "task": "Manage and redeem channel points or rewards.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Manage and redeem channel points or rewards."
    },
    "snippet": "def manage_and_redeem_rewards(\n    user_id: str,\n    channel_id: str,\n    points_to_redeem: int\n) -> Dict[str, Union[str, bool]]:\n    \"\"\"\n    Manages and redeems channel points or rewards and returns the transaction status.\n\n    Parameters:\n        user_id (str): The ID of the user who wants to redeem points.\n        channel_id (str): The ID of the channel where the points are to be redeemed.\n        points_to_redeem (int): The number of points that the user wants to redeem.\n\n    Returns:\n        Dict[str, Union[str, bool]]: A dictionary containing the transaction status: 'transaction_completed' and 'transaction_message'. If the transaction was successful, 'transaction_completed' will be True, and 'transaction_message' will contain a relevant success message. If the transaction was not successful, 'transaction_completed' will be False, and 'transaction_message' will contain a relevant error message.\n    \"\"\"\n    pass"
}
{
    "function_id": "twitch-18",
    "task": "Clip segments of the current stream.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Clip segments of the current stream."
    },
    "snippet": "```python\ndef clip_stream_segments(\n    stream: Iterable,\n    clip_start: int,\n    clip_end: int,\n) -> Iterable:\n    \"\"\"\n    Clips specified segments from the current input stream and returns the clipped stream.\n    \n    Parameters:\n        stream (Iterable): The input stream to clip segments from.\n        clip_start (int): The starting index of the stream segment to clip.\n        clip_end (int): The ending index of the stream segment to clip.\n        \n    Returns:\n        Iterable: The clipped stream.\n    \"\"\"\n```"
}
{
    "function_id": "twitch-19",
    "task": "Configure audio and video settings, including bitrate and resolution.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Configure audio and video settings, including bitrate and resolution."
    },
    "snippet": "def configure_av_settings(\n    audio_bitrate: int,\n    video_bitrate: int,\n    resolution: Tuple[int, int]\n) -> None:\n    \"\"\"\n    Configures audio and video settings including bitrate and resolution.\n    \n    Parameters:\n        audio_bitrate (int): The desired audio bitrate in kbps.\n        video_bitrate (int): The desired video bitrate in kbps.\n        resolution (Tuple[int, int]): A tuple containing the desired video resolution (width, height).\n    \"\"\"\n"
}
{
    "function_id": "twitch-20",
    "task": "Host or raid another Twitch channel.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Host or raid another Twitch channel."
    },
    "snippet": "def host_or_raid_channel(\n    twitch_channel: str,\n    is_raid: bool,\n) -> None:\n    \"\"\"\n    Hosts or raids another Twitch channel.\n    \n    Parameters:\n        twitch_channel (str): The name of the twitch channel to host or raid.\n        is_raid (bool): Whether to raid the other channel. If False, it will host the channel.\n                          \n    Returns:\n        None\n    \"\"\""
}
{
    "function_id": "twitch-21",
    "task": "Initiate and manage a co-stream with another streamer.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Initiate and manage a co-stream with another streamer."
    },
    "snippet": "def initiate_manage_costream(\n    current_streamer: str,\n    co_streamer: str,\n    platform: str,\n    start_time: str,\n    end_time: str,\n) -> str:\n    \"\"\"\n    Initiates and manages a co-stream with another streamer and returns the status of the co-stream.\n    \n    Parameters:\n        current_streamer (str): The current streamer's username.\n        co_streamer (str): The co-streamer's username.\n        platform (str): The platform on which the co-stream is taking place.\n        start_time (str): The start time of the co-stream in HH:MM:SS format.\n        end_time (str): The end time of the co-stream in HH:MM:SS format.\n                                          \n    Returns:\n        str: The status of the co-stream, it can be 'successful', 'failed' or 'in progress'.\n    \"\"\"\n"
}
{
    "function_id": "twitch-22",
    "task": "Manage and update panels and other customizable areas below the video player.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Manage and update panels and other customizable areas below the video player."
    },
    "snippet": "def update_video_player_panels(\n    player_id: str,\n    panels: dict\n) -> bool:\n    \"\"\"\n    Updates the customizable areas below a video player. \n\n    Parameters:\n        player_id (str): The unique identifier for the video player.\n        panels (dict): A dictionary containing details of the panels and custom areas to update. \n                       Each key in the dictionary represents a panel or custom area, \n                       and the value represents the new settings for the area.\n                       \n    Returns:\n        bool: True if the update was successful, False otherwise.\n    \"\"\"\n"
}
{
    "function_id": "twitch-23",
    "task": "Activate specific scenes or overlays.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Activate specific scenes or overlays."
    },
    "snippet": "def activate_scene_or_overlay(\n    scene_name: str,\n    overlay: Dict[str, Any],\n) -> None:\n    \"\"\"\n    Activates a specific scene or overlay.\n    \n    Parameters:\n        scene_name (str): The name of the scene to activate.\n        overlay (Dict[str, Any]): A dictionary containing overlay details to activate.\n                                  \n    \"\"\"\n"
}
{
    "function_id": "twitch-24",
    "task": "Automatically archive past broadcasts.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Automatically archive past broadcasts."
    },
    "snippet": "def archive_past_broadcasts(\n    broadcasts: List[Dict[str, Union[str, datetime]]]\n) -> List[str]:\n    \"\"\"\n    Archives past broadcasts and returns a list of archived broadcasts' titles.\n    \n    Parameters:\n        broadcasts (List[Dict[str, Union[str, datetime]]]): A list of dictionaries containing broadcast details.\n                                                             Each dictionary should have 'title' and 'date' keys.\n    \n    Returns:\n        List[str]: A list of titles of the archived past broadcasts.\n    \"\"\"\n"
}
{
    "function_id": "twitch-25",
    "task": "Enable or disable slow mode in the chat.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Enable or disable slow mode in the chat."
    },
    "snippet": "def toggle_slow_mode(\n    chat_id: int,\n    slow_mode: bool\n) -> str:\n    \"\"\"\n    Enables or disables slow mode in the chat.\n    \n    Parameters:\n        chat_id (int): The identifier for the chat to apply slow mode to.\n        slow_mode (bool): Whether to enable (True) or disable (False) slow mode.\n                          \n    Returns:\n        str: A message indicating the success or failure of the operation.\n    \"\"\""
}
{
    "function_id": "twitch-26",
    "task": "Monitor and manage subscriptions to other channels.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Monitor and manage subscriptions to other channels."
    },
    "snippet": "def manage_subscriptions(\n    channel_id: str,\n    subscription_action: str,\n    user_id: Optional[str] = None,\n) -> bool:\n    \"\"\"\n    Monitors and manages subscriptions to different channels.\n\n    Parameters:\n        channel_id (str): The identifier of the channel.\n        subscription_action (str): The action to perform. It can be 'subscribe', 'unsubscribe', 'check'.\n        user_id (str, optional): The identifier of the user. Default is None, which corresponds to the current user id.\n\n    Returns:\n        bool: True if the action was successful, False otherwise.\n    \"\"\"\n"
}
{
    "function_id": "twitch-27",
    "task": "Set up donation goals and progress bars.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Set up donation goals and progress bars."
    },
    "snippet": "def setup_donation_goals(\n    goal_amount: float,\n    current_amount: float,\n) -> Dict[str, Union[float, str]]:\n    \"\"\"\n    Sets up donation goals and creates a progress bar to visualize the current progress\n    \n    Parameters:\n        goal_amount (float): The desired donation goal.\n        current_amount (float): The current amount of money raised.\n                                          \n    Returns:\n        Dict[str, Union[float, str]]: A dictionary with 'percentage_completed' as a key representing \n                                       the percentage of the goal reached and 'progress_bar' as a key, \n                                       with the visual representation of the progress in string format.\n    \"\"\""
}
{
    "function_id": "twitch-28",
    "task": "Manage and send direct messages.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Manage and send direct messages."
    },
    "snippet": "def send_direct_message(\n    recipient_id: str,\n    message: str,\n    attachment: Optional[str] = None\n) -> bool:\n    \"\"\"\n    Sends a direct message to a recipient and returns whether it was successful.\n    \n    Parameters:\n        recipient_id (str): The ID of the recipient.\n        message (str): The content of the message to send.\n        attachment (Optional[str]): The file path of an attachment to send, if any.\n                                    \n    Returns:\n        bool: True if the message was sent successfully, False otherwise.\n    \"\"\""
}
{
    "function_id": "twitch-29",
    "task": "Configure and manage bots for chat moderation or entertainment.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Configure and manage bots for chat moderation or entertainment."
    },
    "snippet": "def manage_chat_bot(\n    bot_name: str,\n    chat_id: str,\n    moderation_rules: Dict[str, Any],\n    entertainment_settings: Dict[str, Any],\n) -> str:\n    \"\"\"\n    Configures and manages a chat bot for either moderation or entertainment purposes.\n\n    Parameters:\n        bot_name (str): The name of the bot.\n        chat_id (str): The unique identifier of the chat where the bot will operate.\n        moderation_rules (Dict[str, Any]): A dictionary providing the rules for the bot's moderation capabilities.\n        entertainment_settings (Dict[str, Any]): A dictionary providing the settings for the bot's entertainment capabilities.\n\n    Returns:\n        str: A status message indicating if the bot configuration and management operation was successful.\n    \"\"\"\n"
}
