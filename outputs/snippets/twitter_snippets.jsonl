{
    "function_id": "twitter-1",
    "task": "Post a tweet to a user's timeline.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Post a tweet to a user's timeline."
    },
    "snippet": "def post_tweet(user: str, message: str) -> None:\n    \"\"\"\n    Posts a tweet to a user's timeline.\n    \n    Parameters:\n        user (str): The username of the user.\n        message (str): The content of the tweet.\n        \n    Returns:\n        None\n    \"\"\"\n    # Code to post the tweet to the user's timeline goes here"
}
{
    "function_id": "twitter-2",
    "task": "Delete a specific tweet from a user's timeline.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Delete a specific tweet from a user's timeline."
    },
    "snippet": "def delete_tweet(\n    user_id: str,\n    tweet_id: str,\n) -> bool:\n    \"\"\"\n    Deletes a specific tweet from a user's timeline.\n    \n    Parameters:\n        user_id (str): The user ID of the user whose tweet is to be deleted.\n        tweet_id (str): The ID of the tweet to be deleted.\n                                          \n    Returns:\n        bool: True if the tweet was successfully deleted, False otherwise.\n    \"\"\""
}
{
    "function_id": "twitter-3",
    "task": "Retrieve a user's timeline, including tweets, retweets, and replies.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Retrieve a user's timeline, including tweets, retweets, and replies."
    },
    "snippet": "def retrieve_user_timeline(\n    user_id: str,\n) -> List[Dict[str, Any]]:\n    \"\"\"\n    Retrieve a user's timeline, including tweets, retweets, and replies.\n    \n    Parameters:\n        user_id (str): The ID of the user whose timeline to retrieve.\n        \n    Returns:\n        List[Dict[str, Any]]: A list of dictionaries containing timeline entries.\n                              Each dictionary represents a tweet, retweet, or reply and includes\n                              relevant information such as the tweet content, timestamp, and author.\n    \"\"\"\n    pass"
}
{
    "function_id": "twitter-4",
    "task": "Retrieve information about a specific user based on their username.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Retrieve information about a specific user based on their username."
    },
    "snippet": "def retrieve_user_info(\n    username: str,\n) -> Dict[str, Union[str, int]]:\n    \"\"\"\n    Retrieves information about a specific user based on their username.\n    \n    Parameters:\n        username (str): The username of the user to retrieve information for.\n                                          \n    Returns:\n        Dict[str, Union[str, int]]: A dictionary with user information."
}
{
    "function_id": "twitter-5",
    "task": "Follow a specific user.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Follow a specific user."
    },
    "snippet": "def follow_user(\n    user_id: int,\n) -> bool:\n    \"\"\"\n    Follows a specific user.\n    \n    Parameters:\n        user_id (int): The ID of the user to follow.\n        \n    Returns:\n        bool: True if the user was successfully followed, False otherwise.\n    \"\"\"\n    # Code to follow the user goes here\n    return True"
}
{
    "function_id": "twitter-6",
    "task": "Unfollow a specific user.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Unfollow a specific user."
    },
    "snippet": "def unfollow_user(username: str) -> bool:\n    \"\"\"\n    Unfollows a specific user.\n    \n    Parameters:\n        username (str): The username of the user to unfollow.\n        \n    Returns:\n        bool: True if the user was successfully unfollowed, False otherwise.\n    \"\"\"\n    # Implementation details here"
}
{
    "function_id": "twitter-7",
    "task": "Like a specific tweet.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Like a specific tweet."
    },
    "snippet": "def like_tweet(tweet_id: str) -> None:\n    \"\"\"\n    Likes a specific tweet.\n    \n    Parameters:\n        tweet_id (str): The ID of the tweet to like.\n        \n    Returns:\n        None\n    \"\"\""
}
{
    "function_id": "twitter-8",
    "task": "Unlike a specific tweet.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Unlike a specific tweet."
    },
    "snippet": "def unlike_tweet(tweet_id: str) -> None:\n    \"\"\"\n    Undo the like action on a specific tweet.\n    \n    Parameters:\n        tweet_id (str): The ID of the tweet to unlike.\n        \n    Returns:\n        None\n    \"\"\""
}
{
    "function_id": "twitter-9",
    "task": "Retweet a specific tweet.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Retweet a specific tweet."
    },
    "snippet": "def retweet_specific_tweet(\n    tweet_id: str,\n) -> bool:\n    \"\"\"\n    Retweets a specific tweet.\n\n    Parameters:\n        tweet_id (str): The ID of the tweet to retweet.\n\n    Returns:\n        bool: True if the tweet was successfully retweeted, False otherwise.\n    \"\"\""
}
{
    "function_id": "twitter-10",
    "task": "Undo a retweet.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Undo a retweet."
    },
    "snippet": "def undo_retweet(tweet_id: str) -> bool:\n    \"\"\"\n    Undo a retweet by tweet ID.\n    \n    Parameters:\n        tweet_id (str): The ID of the tweet to undo the retweet on.\n        \n    Returns:\n        bool: True if the retweet was successfully undone, False otherwise.\n    \"\"\""
}
{
    "function_id": "twitter-11",
    "task": "Send a direct message to a specific user.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Send a direct message to a specific user."
    },
    "snippet": "def send_direct_message(user: str, message: str) -> None:\n    \"\"\"\n    Sends a direct message to a specific user.\n    \n    Parameters:\n        user (str): The username of the recipient.\n        message (str): The message to send.\n        \n    Returns:\n        None\n    \"\"\"\n    # Code to send the direct message to the specified user goes here"
}
{
    "function_id": "twitter-12",
    "task": "Delete a sent direct message.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Delete a sent direct message."
    },
    "snippet": "def delete_direct_message(\n    message_id: str,\n) -> None:\n    \"\"\"\n    Deletes a sent direct message.\n    \n    Parameters:\n        message_id (str): The ID of the message to be deleted.\n        \n    Returns:\n        None\n    \"\"\""
}
{
    "function_id": "twitter-13",
    "task": "Retrieve a list of direct messages sent and received.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Retrieve a list of direct messages sent and received."
    },
    "snippet": "def retrieve_direct_messages() -> List[str]:\n    \"\"\"\n    Retrieves a list of direct messages sent and received.\n\n    Returns:\n        List[str]: A list of direct messages.\n    \"\"\""
}
{
    "function_id": "twitter-14",
    "task": "Retrieve trending topics for a specific location.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Retrieve trending topics for a specific location."
    },
    "snippet": "def retrieve_trending_topics(location: str) -> List[str]:\n    \"\"\"\n    Retrieves trending topics for a specific location.\n    \n    Parameters:\n        location (str): The location for which to retrieve trending topics.\n        \n    Returns:\n        List[str]: A list of trending topics.\n    \"\"\"\n    pass"
}
{
    "function_id": "twitter-15",
    "task": "Retrieve a list of followers for a specific user.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Retrieve a list of followers for a specific user."
    },
    "snippet": "def get_followers(user_id: str) -> List[str]:\n    \"\"\"\n    Retrieves a list of followers for a specific user.\n\n    Parameters:\n        user_id (str): The id of the user.\n\n    Returns:\n        List[str]: A list of usernames of the followers.\n    \"\"\"\n    followers = []\n    # Code to retrieve followers for user_id\n    return followers"
}
{
    "function_id": "twitter-16",
    "task": "Retrieve a list of accounts a specific user is following.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Retrieve a list of accounts a specific user is following."
    },
    "snippet": "def get_accounts_following(user_id: int) -> List[int]:\n    \"\"\"\n    Retrieves a list of accounts a specific user is following.\n    \n    Parameters:\n        user_id (int): The ID of the user.\n        \n    Returns:\n        List[int]: A list of account IDs that the user is following.\n    \"\"\"\n    # Code to retrieve the list of accounts following the specified user\n"
}
{
    "function_id": "twitter-17",
    "task": "Search for tweets containing specific keywords, hashtags, or mentioning specific users.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Search for tweets containing specific keywords, hashtags, or mentioning specific users."
    },
    "snippet": "def search_tweets(\n    keywords: List[str],\n    hashtags: Optional[List[str]] = None,\n    mentions: Optional[List[str]] = None,\n) -> List[str]:\n    \"\"\"\n    Search for tweets containing specific keywords, hashtags, or mentioning specific users.\n    \n    Parameters:\n        keywords (List[str]): A list of keywords to search for in tweets.\n        hashtags (Optional[List[str]]): A list of hashtags to search for in tweets.\n        mentions (Optional[List[str]]): A list of users to search for in tweets.\n        \n    Returns:\n        List[str]: A list of tweets that match the search criteria.\n    \"\"\"\n"
}
{
    "function_id": "twitter-18",
    "task": "Update the profile details such as description, location, and profile image.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Update the profile details such as description, location, and profile image."
    },
    "snippet": "def update_profile_details(\n    description: str,\n    location: str,\n    profile_image: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Updates the profile details such as description, location, and profile image.\n    \n    Parameters:\n        description (str): The new description for the profile.\n        location (str): The new location for the profile.\n        profile_image (str): The new profile image URL.\n        \n    Returns:\n        Dict[str, str]: A dictionary with the updated profile details.\n    \"\"\""
}
{
    "function_id": "twitter-19",
    "task": "Retrieve user engagement metrics like likes, retweets, and impressions for specific tweets.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Retrieve user engagement metrics like likes, retweets, and impressions for specific tweets."
    },
    "snippet": "def retrieve_engagement_metrics(\n    tweet_ids: List[str]\n) -> Dict[str, Dict[str, int]]:\n    \"\"\"\n    Retrieves user engagement metrics like likes, retweets, and impressions for specific tweets.\n    \n    Parameters:\n        tweet_ids (List[str]): A list of tweet IDs for which to retrieve engagement metrics.\n        \n    Returns:\n        Dict[str, Dict[str, int]]: A dictionary with tweet IDs as keys and a nested dictionary as values.\n                                   The nested dictionary contains 'likes', 'retweets', and 'impressions' as keys\n                                   and the corresponding metric values as values.\n    \"\"\""
}
{
    "function_id": "twitter-20",
    "task": "Pin a tweet to the top of a user's timeline.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Pin a tweet to the top of a user's timeline."
    },
    "snippet": "def pin_tweet_to_top(tweet_id: int) -> bool:\n    \"\"\"\n    Pins a tweet to the top of a user's timeline.\n    \n    Parameters:\n        tweet_id (int): The ID of the tweet to pin.\n        \n    Returns:\n        bool: True if the tweet is successfully pinned, False otherwise.\n    \"\"\"\n"
}
{
    "function_id": "twitter-21",
    "task": "Unpin a tweet from the top of a user's timeline.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Unpin a tweet from the top of a user's timeline."
    },
    "snippet": "```python\ndef unpin_tweet_from_timeline(user_id: str, tweet_id: str) -> bool:\n    \"\"\"\n    Unpins a tweet from the top of a user's timeline.\n    \n    Parameters:\n        user_id (str): The ID of the user.\n        tweet_id (str): The ID of the tweet to unpin.\n        \n    Returns:\n        bool: True if the tweet is successfully unpinned, False otherwise.\n    \"\"\"\n```"
}
{
    "function_id": "twitter-22",
    "task": "Retrieve lists that a user is a member of.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Retrieve lists that a user is a member of."
    },
    "snippet": "def retrieve_lists(user_id: str) -> List[str]:\n    \"\"\"\n    Retrieves the lists that a user is a member of.\n    \n    Parameters:\n        user_id (str): The user ID of the member.\n        \n    Returns:\n        List[str]: A list of list names that the user is a member of.\n    \"\"\"\n    # Code implementation to retrieve the lists that a user is a member of\n    pass"
}
{
    "function_id": "twitter-23",
    "task": "Create a new list.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Create a new list."
    },
    "snippet": "def create_new_list(\n    items: List[Any],\n) -> List[Any]:\n    \"\"\"\n    Creates a new list based on the input list.\n    \n    Parameters:\n        items (List[Any]): The list of items to create a new list from.\n                                          \n    Returns:\n        List[Any]: A new list created based on the input list.\n    \"\"\""
}
{
    "function_id": "twitter-24",
    "task": "Add users to an existing list.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Add users to an existing list."
    },
    "snippet": "def add_users(user_list: List[str], new_users: List[str]) -> List[str]:\n    \"\"\"\n    Add new users to an existing user list.\n\n    Parameters:\n        user_list (List[str]): The existing user list.\n        new_users (List[str]): The new users to add.\n\n    Returns:\n        List[str]: The updated user list with new users added.\n    \"\"\"\n    updated_user_list = user_list + new_users\n    return updated_user_list"
}
{
    "function_id": "twitter-25",
    "task": "Remove users from an existing list.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Remove users from an existing list."
    },
    "snippet": "def remove_users(user_list: List[str], users_to_remove: List[str]) -> List[str]:\n    \"\"\"\n    Removes users from an existing list.\n\n    Parameters:\n        user_list (List[str]): The original list of users.\n        users_to_remove (List[str]): The list of users to remove.\n\n    Returns:\n        List[str]: The updated list of users after removing the specified users.\n    \"\"\"\n    pass"
}
{
    "function_id": "twitter-26",
    "task": "Delete an existing list.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Delete an existing list."
    },
    "snippet": "\ndef delete_list(lst: List) -> None:\n    \"\"\"\n    Deletes an existing list.\n    \n    Parameters:\n        lst (List): The list to be deleted.\n        \n    Returns:\n        None\n    \"\"\"\n    \n    del lst"
}
{
    "function_id": "twitter-27",
    "task": "Check if a user is following another user.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Check if a user is following another user."
    },
    "snippet": "def check_if_following(user: str, other_user: str) -> bool:\n    \"\"\"\n    Checks if a user is following another user.\n\n    Parameters:\n        user (str): The user to check.\n        other_user (str): The user to check if being followed.\n\n    Returns:\n        bool: True if user is following other_user, False otherwise.\n    \"\"\"\n    # implementation of checking if user is following other_user\n    return True"
}
{
    "function_id": "twitter-28",
    "task": "Block a specific user.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Block a specific user."
    },
    "snippet": "def block_user(user_id: int) -> None:\n    \"\"\"\n    Blocks a specific user.\n    \n    Parameters:\n        user_id (int): The ID of the user to block.\n        \n    Returns:\n        None\n    \"\"\""
}
{
    "function_id": "twitter-29",
    "task": "Unblock a specific user.",
    "snippet_metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\n\nAn example of a snippet is:\n    \ndef example_function(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n    \n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n                                          \n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Unblock a specific user."
    },
    "snippet": "def unblock_user(user_id: str) -> None:\n    \"\"\"\n    Unblocks a specific user.\n    \n    Parameters:\n        user_id (str): The ID of the user to unblock.\n        \n    Returns:\n        None\n    \"\"\""
}
